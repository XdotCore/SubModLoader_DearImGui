// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma warning disable CS0109 // The member 'member' does not hide an inherited member. The new keyword is not required

#pragma warning disable CS0414 // The private field 'field' is assigned but its value is never used

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member 'Type_or_Member'

using DearImGui;
using System;
using System.Collections.Concurrent;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using ImS8 = System.SByte;
using ImU8 = System.Byte;
using ImS16 = System.Int16;
using ImU16 = System.UInt16;
using ImS32 = System.Int32;
using ImU32 = System.UInt32;
using ImS64 = System.Int64;
using ImU64 = System.UInt64;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace DearImGui
{
    /// <summary>Enumeration for AddMouseSourceEvent() actual source of Mouse Input data.<br/>Historically we use "Mouse" terminology everywhere to indicate pointer data, e.g. MousePos, IsMousePressed(), io.AddMousePosEvent().<br/>But that "Mouse" data can come from different source which occasionally may be useful for application to know about.<br/>You can submit a change of pointer type using io.AddMouseSourceEvent().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1857"/></summary>
    // DEBUG: enum ImGuiMouseSource : int
    // DEBUG: {
    // DEBUG:     ImGuiMouseSource_Mouse = 0,         // Input is coming from an actual mouse.
    // DEBUG:     ImGuiMouseSource_TouchScreen,       // Input is coming from a touch screen (no hovering prior to initial press, less precise initial press aiming, dual-axis wheeling possible).
    // DEBUG:     ImGuiMouseSource_Pen,               // Input is coming from a pressure/magnetic pen (often used in conjunction with high-sampling rates).
    // DEBUG:     ImGuiMouseSource_COUNT
    // DEBUG: }
    public enum ImGuiMouseSource
    {
        /// <summary>Input is coming from an actual mouse.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1859"/></summary>
        Mouse = 0,
        /// <summary>Input is coming from a touch screen (no hovering prior to initial press, less precise initial press aiming, dual-axis wheeling possible).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1860"/></summary>
        TouchScreen = 1,
        /// <summary>Input is coming from a pressure/magnetic pen (often used in conjunction with high-sampling rates).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1861"/></summary>
        Pen = 2,
    }

    /// <summary>A key identifier (ImGuiKey_XXX or ImGuiMod_XXX value): can represent Keyboard, Mouse and Gamepad values.<br/>All our named keys are &gt;= 512. Keys value 0 to 511 are left unused as legacy native/opaque key values (&lt; 1.87).<br/>Since &gt;= 1.89 we increased typing (went from int to enum), some legacy code may need a cast to ImGuiKey.<br/>Read details about the 1.87 and 1.89 transition : https://github.com/ocornut/imgui/issues/4921.<br/>Note that "Keys" related to physical keys and are not the same concept as input "Characters", the later are submitted via io.AddInputCharacter().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1468"/></summary>
    // DEBUG: enum ImGuiKey : int
    // DEBUG: {
    // DEBUG:     // Keyboard
    // DEBUG:     ImGuiKey_None = 0,
    // DEBUG:     ImGuiKey_Tab = 512,             // == ImGuiKey_NamedKey_BEGIN
    // DEBUG:     ImGuiKey_LeftArrow,
    // DEBUG:     ImGuiKey_RightArrow,
    // DEBUG:     ImGuiKey_UpArrow,
    // DEBUG:     ImGuiKey_DownArrow,
    // DEBUG:     ImGuiKey_PageUp,
    // DEBUG:     ImGuiKey_PageDown,
    // DEBUG:     ImGuiKey_Home,
    // DEBUG:     ImGuiKey_End,
    // DEBUG:     ImGuiKey_Insert,
    // DEBUG:     ImGuiKey_Delete,
    // DEBUG:     ImGuiKey_Backspace,
    // DEBUG:     ImGuiKey_Space,
    // DEBUG:     ImGuiKey_Enter,
    // DEBUG:     ImGuiKey_Escape,
    // DEBUG:     ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,
    // DEBUG:     ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,
    // DEBUG:     ImGuiKey_Menu,
    // DEBUG:     ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey_7, ImGuiKey_8, ImGuiKey_9,
    // DEBUG:     ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey_H, ImGuiKey_I, ImGuiKey_J,
    // DEBUG:     ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey_R, ImGuiKey_S, ImGuiKey_T,
    // DEBUG:     ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,
    // DEBUG:     ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,
    // DEBUG:     ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,
    // DEBUG:     ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,
    // DEBUG:     ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,
    // DEBUG:     ImGuiKey_Apostrophe,        // '
    // DEBUG:     ImGuiKey_Comma,             // ,
    // DEBUG:     ImGuiKey_Minus,             // -
    // DEBUG:     ImGuiKey_Period,            // .
    // DEBUG:     ImGuiKey_Slash,             // /
    // DEBUG:     ImGuiKey_Semicolon,         // ;
    // DEBUG:     ImGuiKey_Equal,             // =
    // DEBUG:     ImGuiKey_LeftBracket,       // [
    // DEBUG:     ImGuiKey_Backslash,         // \ (this text inhibit multiline comment caused by backslash)
    // DEBUG:     ImGuiKey_RightBracket,      // ]
    // DEBUG:     ImGuiKey_GraveAccent,       // `
    // DEBUG:     ImGuiKey_CapsLock,
    // DEBUG:     ImGuiKey_ScrollLock,
    // DEBUG:     ImGuiKey_NumLock,
    // DEBUG:     ImGuiKey_PrintScreen,
    // DEBUG:     ImGuiKey_Pause,
    // DEBUG:     ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,
    // DEBUG:     ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,
    // DEBUG:     ImGuiKey_KeypadDecimal,
    // DEBUG:     ImGuiKey_KeypadDivide,
    // DEBUG:     ImGuiKey_KeypadMultiply,
    // DEBUG:     ImGuiKey_KeypadSubtract,
    // DEBUG:     ImGuiKey_KeypadAdd,
    // DEBUG:     ImGuiKey_KeypadEnter,
    // DEBUG:     ImGuiKey_KeypadEqual,
    // DEBUG:     ImGuiKey_AppBack,               // Available on some keyboard/mouses. Often referred as "Browser Back"
    // DEBUG:     ImGuiKey_AppForward,
    // DEBUG: 
    // DEBUG:     // Gamepad (some of those are analog values, 0.0f to 1.0f)                          // NAVIGATION ACTION
    // DEBUG:     // (download controller mapping PNG/PSD at http://dearimgui.com/controls_sheets)
    // DEBUG:     ImGuiKey_GamepadStart,          // Menu (Xbox)      + (Switch)   Start/Options (PS)
    // DEBUG:     ImGuiKey_GamepadBack,           // View (Xbox)      - (Switch)   Share (PS)
    // DEBUG:     ImGuiKey_GamepadFaceLeft,       // X (Xbox)         Y (Switch)   Square (PS)        // Tap: Toggle Menu. Hold: Windowing mode (Focus/Move/Resize windows)
    // DEBUG:     ImGuiKey_GamepadFaceRight,      // B (Xbox)         A (Switch)   Circle (PS)        // Cancel / Close / Exit
    // DEBUG:     ImGuiKey_GamepadFaceUp,         // Y (Xbox)         X (Switch)   Triangle (PS)      // Text Input / On-screen Keyboard
    // DEBUG:     ImGuiKey_GamepadFaceDown,       // A (Xbox)         B (Switch)   Cross (PS)         // Activate / Open / Toggle / Tweak
    // DEBUG:     ImGuiKey_GamepadDpadLeft,       // D-pad Left                                       // Move / Tweak / Resize Window (in Windowing mode)
    // DEBUG:     ImGuiKey_GamepadDpadRight,      // D-pad Right                                      // Move / Tweak / Resize Window (in Windowing mode)
    // DEBUG:     ImGuiKey_GamepadDpadUp,         // D-pad Up                                         // Move / Tweak / Resize Window (in Windowing mode)
    // DEBUG:     ImGuiKey_GamepadDpadDown,       // D-pad Down                                       // Move / Tweak / Resize Window (in Windowing mode)
    // DEBUG:     ImGuiKey_GamepadL1,             // L Bumper (Xbox)  L (Switch)   L1 (PS)            // Tweak Slower / Focus Previous (in Windowing mode)
    // DEBUG:     ImGuiKey_GamepadR1,             // R Bumper (Xbox)  R (Switch)   R1 (PS)            // Tweak Faster / Focus Next (in Windowing mode)
    // DEBUG:     ImGuiKey_GamepadL2,             // L Trig. (Xbox)   ZL (Switch)  L2 (PS) [Analog]
    // DEBUG:     ImGuiKey_GamepadR2,             // R Trig. (Xbox)   ZR (Switch)  R2 (PS) [Analog]
    // DEBUG:     ImGuiKey_GamepadL3,             // L Stick (Xbox)   L3 (Switch)  L3 (PS)
    // DEBUG:     ImGuiKey_GamepadR3,             // R Stick (Xbox)   R3 (Switch)  R3 (PS)
    // DEBUG:     ImGuiKey_GamepadLStickLeft,     // [Analog]                                         // Move Window (in Windowing mode)
    // DEBUG:     ImGuiKey_GamepadLStickRight,    // [Analog]                                         // Move Window (in Windowing mode)
    // DEBUG:     ImGuiKey_GamepadLStickUp,       // [Analog]                                         // Move Window (in Windowing mode)
    // DEBUG:     ImGuiKey_GamepadLStickDown,     // [Analog]                                         // Move Window (in Windowing mode)
    // DEBUG:     ImGuiKey_GamepadRStickLeft,     // [Analog]
    // DEBUG:     ImGuiKey_GamepadRStickRight,    // [Analog]
    // DEBUG:     ImGuiKey_GamepadRStickUp,       // [Analog]
    // DEBUG:     ImGuiKey_GamepadRStickDown,     // [Analog]
    // DEBUG: 
    // DEBUG:     // Aliases: Mouse Buttons (auto-submitted from AddMouseButtonEvent() calls)
    // DEBUG:     // - This is mirroring the data also written to io.MouseDown[], io.MouseWheel, in a format allowing them to be accessed via standard key API.
    // DEBUG:     ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_MouseX2, ImGuiKey_MouseWheelX, ImGuiKey_MouseWheelY,
    // DEBUG: 
    // DEBUG:     // [Internal] Reserved for mod storage
    // DEBUG:     ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGuiKey_ReservedForModSuper,
    // DEBUG:     ImGuiKey_COUNT,
    // DEBUG: 
    // DEBUG:     // Keyboard Modifiers (explicitly submitted by backend via AddKeyEvent() calls)
    // DEBUG:     // - This is mirroring the data also written to io.KeyCtrl, io.KeyShift, io.KeyAlt, io.KeySuper, in a format allowing
    // DEBUG:     //   them to be accessed via standard key API, allowing calls such as IsKeyPressed(), IsKeyReleased(), querying duration etc.
    // DEBUG:     // - Code polling every key (e.g. an interface to detect a key press for input mapping) might want to ignore those
    // DEBUG:     //   and prefer using the real keys (e.g. ImGuiKey_LeftCtrl, ImGuiKey_RightCtrl instead of ImGuiMod_Ctrl).
    // DEBUG:     // - In theory the value of keyboard modifiers should be roughly equivalent to a logical or of the equivalent left/right keys.
    // DEBUG:     //   In practice: it's complicated; mods are often provided from different sources. Keyboard layout, IME, sticky keys and
    // DEBUG:     //   backends tend to interfere and break that equivalence. The safer decision is to relay that ambiguity down to the end-user...
    // DEBUG:     ImGuiMod_None                   = 0,
    // DEBUG:     ImGuiMod_Ctrl                   = 1 << 12, // Ctrl
    // DEBUG:     ImGuiMod_Shift                  = 1 << 13, // Shift
    // DEBUG:     ImGuiMod_Alt                    = 1 << 14, // Option/Menu
    // DEBUG:     ImGuiMod_Super                  = 1 << 15, // Cmd/Super/Windows
    // DEBUG:     ImGuiMod_Shortcut               = 1 << 11, // Alias for Ctrl (non-macOS) _or_ Super (macOS).
    // DEBUG:     ImGuiMod_Mask_                  = 0xF800,  // 5-bits
    // DEBUG: 
    // DEBUG:     // [Internal] Prior to 1.87 we required user to fill io.KeysDown[512] using their own native index + the io.KeyMap[] array.
    // DEBUG:     // We are ditching this method but keeping a legacy path for user code doing e.g. IsKeyPressed(MY_NATIVE_KEY_CODE)
    // DEBUG:     // If you need to iterate all keys (for e.g. an input mapper) you may use ImGuiKey_NamedKey_BEGIN..ImGuiKey_NamedKey_END.
    // DEBUG:     ImGuiKey_NamedKey_BEGIN         = 512,
    // DEBUG:     ImGuiKey_NamedKey_END           = ImGuiKey_COUNT,
    // DEBUG:     ImGuiKey_NamedKey_COUNT         = ImGuiKey_NamedKey_END - ImGuiKey_NamedKey_BEGIN,
    // DEBUG: #ifdef IMGUI_DISABLE_OBSOLETE_KEYIO
    // DEBUG:     ImGuiKey_KeysData_SIZE          = ImGuiKey_NamedKey_COUNT,  // Size of KeysData[]: only hold named keys
    // DEBUG:     ImGuiKey_KeysData_OFFSET        = ImGuiKey_NamedKey_BEGIN,  // Accesses to io.KeysData[] must use (key - ImGuiKey_KeysData_OFFSET) index.
    // DEBUG: #else
    // DEBUG:     ImGuiKey_KeysData_SIZE          = ImGuiKey_COUNT,           // Size of KeysData[]: hold legacy 0..512 keycodes + named keys
    // DEBUG:     ImGuiKey_KeysData_OFFSET        = 0,                        // Accesses to io.KeysData[] must use (key - ImGuiKey_KeysData_OFFSET) index.
    // DEBUG: #endif
    // DEBUG: 
    // DEBUG: #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    // DEBUG:     ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGuiMod_Alt, ImGuiKey_ModSuper = ImGuiMod_Super, // Renamed in 1.89
    // DEBUG:     ImGuiKey_KeyPadEnter = ImGuiKey_KeypadEnter,    // Renamed in 1.87
    // DEBUG: #endif
    // DEBUG: }
    public enum ImGuiKey
    {
        /// <summary>Keyboard.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1471"/></summary>
        None = 0,
        /// <summary>== ImGuiKey_NamedKey_BEGIN.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1472"/></summary>
        Tab = 512,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1473"/></summary>
        LeftArrow = 513,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1474"/></summary>
        RightArrow = 514,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1475"/></summary>
        UpArrow = 515,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1476"/></summary>
        DownArrow = 516,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1477"/></summary>
        PageUp = 517,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1478"/></summary>
        PageDown = 518,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1479"/></summary>
        Home = 519,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1480"/></summary>
        End = 520,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1481"/></summary>
        Insert = 521,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1482"/></summary>
        Delete = 522,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1483"/></summary>
        Backspace = 523,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1484"/></summary>
        Space = 524,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1485"/></summary>
        Enter = 525,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1486"/></summary>
        Escape = 526,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1487"/></summary>
        LeftCtrl = 527,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1487"/></summary>
        LeftShift = 528,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1487"/></summary>
        LeftAlt = 529,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1487"/></summary>
        LeftSuper = 530,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1488"/></summary>
        RightCtrl = 531,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1488"/></summary>
        RightShift = 532,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1488"/></summary>
        RightAlt = 533,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1488"/></summary>
        RightSuper = 534,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1489"/></summary>
        Menu = 535,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1490"/></summary>
        _0 = 536,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1490"/></summary>
        _1 = 537,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1490"/></summary>
        _2 = 538,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1490"/></summary>
        _3 = 539,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1490"/></summary>
        _4 = 540,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1490"/></summary>
        _5 = 541,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1490"/></summary>
        _6 = 542,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1490"/></summary>
        _7 = 543,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1490"/></summary>
        _8 = 544,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1490"/></summary>
        _9 = 545,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1491"/></summary>
        A = 546,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1491"/></summary>
        B = 547,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1491"/></summary>
        C = 548,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1491"/></summary>
        D = 549,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1491"/></summary>
        E = 550,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1491"/></summary>
        F = 551,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1491"/></summary>
        G = 552,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1491"/></summary>
        H = 553,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1491"/></summary>
        I = 554,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1491"/></summary>
        J = 555,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1492"/></summary>
        K = 556,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1492"/></summary>
        L = 557,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1492"/></summary>
        M = 558,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1492"/></summary>
        N = 559,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1492"/></summary>
        O = 560,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1492"/></summary>
        P = 561,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1492"/></summary>
        Q = 562,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1492"/></summary>
        R = 563,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1492"/></summary>
        S = 564,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1492"/></summary>
        T = 565,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1493"/></summary>
        U = 566,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1493"/></summary>
        V = 567,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1493"/></summary>
        W = 568,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1493"/></summary>
        X = 569,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1493"/></summary>
        Y = 570,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1493"/></summary>
        Z = 571,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1494"/></summary>
        F1 = 572,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1494"/></summary>
        F2 = 573,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1494"/></summary>
        F3 = 574,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1494"/></summary>
        F4 = 575,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1494"/></summary>
        F5 = 576,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1494"/></summary>
        F6 = 577,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1495"/></summary>
        F7 = 578,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1495"/></summary>
        F8 = 579,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1495"/></summary>
        F9 = 580,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1495"/></summary>
        F10 = 581,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1495"/></summary>
        F11 = 582,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1495"/></summary>
        F12 = 583,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1496"/></summary>
        F13 = 584,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1496"/></summary>
        F14 = 585,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1496"/></summary>
        F15 = 586,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1496"/></summary>
        F16 = 587,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1496"/></summary>
        F17 = 588,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1496"/></summary>
        F18 = 589,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1497"/></summary>
        F19 = 590,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1497"/></summary>
        F20 = 591,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1497"/></summary>
        F21 = 592,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1497"/></summary>
        F22 = 593,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1497"/></summary>
        F23 = 594,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1497"/></summary>
        F24 = 595,
        /// <summary>'.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1498"/></summary>
        Apostrophe = 596,
        /// <summary>,.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1499"/></summary>
        Comma = 597,
        /// <summary>-.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1500"/></summary>
        Minus = 598,
        /// <summary>.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1501"/></summary>
        Period = 599,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1502"/></summary>
        Slash = 600,
        /// <summary>;.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1503"/></summary>
        Semicolon = 601,
        /// <summary>=.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1504"/></summary>
        Equal = 602,
        /// <summary>[.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1505"/></summary>
        LeftBracket = 603,
        /// <summary>\ (this text inhibit multiline comment caused by backslash).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1506"/></summary>
        Backslash = 604,
        /// <summary>].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1507"/></summary>
        RightBracket = 605,
        /// <summary>`.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1508"/></summary>
        GraveAccent = 606,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1509"/></summary>
        CapsLock = 607,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1510"/></summary>
        ScrollLock = 608,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1511"/></summary>
        NumLock = 609,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1512"/></summary>
        PrintScreen = 610,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1513"/></summary>
        Pause = 611,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1514"/></summary>
        Keypad0 = 612,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1514"/></summary>
        Keypad1 = 613,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1514"/></summary>
        Keypad2 = 614,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1514"/></summary>
        Keypad3 = 615,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1514"/></summary>
        Keypad4 = 616,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1515"/></summary>
        Keypad5 = 617,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1515"/></summary>
        Keypad6 = 618,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1515"/></summary>
        Keypad7 = 619,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1515"/></summary>
        Keypad8 = 620,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1515"/></summary>
        Keypad9 = 621,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1516"/></summary>
        KeypadDecimal = 622,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1517"/></summary>
        KeypadDivide = 623,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1518"/></summary>
        KeypadMultiply = 624,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1519"/></summary>
        KeypadSubtract = 625,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1520"/></summary>
        KeypadAdd = 626,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1521"/></summary>
        KeypadEnter = 627,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1522"/></summary>
        KeypadEqual = 628,
        /// <summary>Available on some keyboard/mouses. Often referred as "Browser Back".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1523"/></summary>
        AppBack = 629,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1524"/></summary>
        AppForward = 630,
        /// <summary>Menu (Xbox).<br/>+ (Switch).<br/>Start/Options (PS).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1528"/></summary>
        GamepadStart = 631,
        /// <summary>View (Xbox).<br/>- (Switch).<br/>Share (PS).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1529"/></summary>
        GamepadBack = 632,
        /// <summary>X (Xbox).<br/>Y (Switch).<br/>Square (PS).<br/>Tap: Toggle Menu. Hold: Windowing mode (Focus/Move/Resize windows).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1530"/></summary>
        GamepadFaceLeft = 633,
        /// <summary>B (Xbox).<br/>A (Switch).<br/>Circle (PS).<br/>Cancel / Close / Exit.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1531"/></summary>
        GamepadFaceRight = 634,
        /// <summary>Y (Xbox).<br/>X (Switch).<br/>Triangle (PS).<br/>Text Input / On-screen Keyboard.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1532"/></summary>
        GamepadFaceUp = 635,
        /// <summary>A (Xbox).<br/>B (Switch).<br/>Cross (PS).<br/>Activate / Open / Toggle / Tweak.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1533"/></summary>
        GamepadFaceDown = 636,
        /// <summary>D-pad Left.<br/>Move / Tweak / Resize Window (in Windowing mode).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1534"/></summary>
        GamepadDpadLeft = 637,
        /// <summary>D-pad Right.<br/>Move / Tweak / Resize Window (in Windowing mode).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1535"/></summary>
        GamepadDpadRight = 638,
        /// <summary>D-pad Up.<br/>Move / Tweak / Resize Window (in Windowing mode).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1536"/></summary>
        GamepadDpadUp = 639,
        /// <summary>D-pad Down.<br/>Move / Tweak / Resize Window (in Windowing mode).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1537"/></summary>
        GamepadDpadDown = 640,
        /// <summary>L Bumper (Xbox).<br/>L (Switch).<br/>L1 (PS).<br/>Tweak Slower / Focus Previous (in Windowing mode).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1538"/></summary>
        GamepadL1 = 641,
        /// <summary>R Bumper (Xbox).<br/>R (Switch).<br/>R1 (PS).<br/>Tweak Faster / Focus Next (in Windowing mode).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1539"/></summary>
        GamepadR1 = 642,
        /// <summary>L Trig. (Xbox).<br/>ZL (Switch).<br/>L2 (PS) [Analog].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1540"/></summary>
        GamepadL2 = 643,
        /// <summary>R Trig. (Xbox).<br/>ZR (Switch).<br/>R2 (PS) [Analog].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1541"/></summary>
        GamepadR2 = 644,
        /// <summary>L Stick (Xbox).<br/>L3 (Switch).<br/>L3 (PS).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1542"/></summary>
        GamepadL3 = 645,
        /// <summary>R Stick (Xbox).<br/>R3 (Switch).<br/>R3 (PS).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1543"/></summary>
        GamepadR3 = 646,
        /// <summary>[Analog].<br/>Move Window (in Windowing mode).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1544"/></summary>
        GamepadLStickLeft = 647,
        /// <summary>[Analog].<br/>Move Window (in Windowing mode).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1545"/></summary>
        GamepadLStickRight = 648,
        /// <summary>[Analog].<br/>Move Window (in Windowing mode).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1546"/></summary>
        GamepadLStickUp = 649,
        /// <summary>[Analog].<br/>Move Window (in Windowing mode).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1547"/></summary>
        GamepadLStickDown = 650,
        /// <summary>[Analog].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1548"/></summary>
        GamepadRStickLeft = 651,
        /// <summary>[Analog].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1549"/></summary>
        GamepadRStickRight = 652,
        /// <summary>[Analog].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1550"/></summary>
        GamepadRStickUp = 653,
        /// <summary>[Analog].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1551"/></summary>
        GamepadRStickDown = 654,
        /// <summary>Aliases: Mouse Buttons (auto-submitted from AddMouseButtonEvent() calls).<br/>- This is mirroring the data also written to io.MouseDown[], io.MouseWheel, in a format allowing them to be accessed via standard key API.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1555"/></summary>
        MouseLeft = 655,
        /// <summary>Aliases: Mouse Buttons (auto-submitted from AddMouseButtonEvent() calls).<br/>- This is mirroring the data also written to io.MouseDown[], io.MouseWheel, in a format allowing them to be accessed via standard key API.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1555"/></summary>
        MouseRight = 656,
        /// <summary>Aliases: Mouse Buttons (auto-submitted from AddMouseButtonEvent() calls).<br/>- This is mirroring the data also written to io.MouseDown[], io.MouseWheel, in a format allowing them to be accessed via standard key API.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1555"/></summary>
        MouseMiddle = 657,
        /// <summary>Aliases: Mouse Buttons (auto-submitted from AddMouseButtonEvent() calls).<br/>- This is mirroring the data also written to io.MouseDown[], io.MouseWheel, in a format allowing them to be accessed via standard key API.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1555"/></summary>
        MouseX1 = 658,
        /// <summary>Aliases: Mouse Buttons (auto-submitted from AddMouseButtonEvent() calls).<br/>- This is mirroring the data also written to io.MouseDown[], io.MouseWheel, in a format allowing them to be accessed via standard key API.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1555"/></summary>
        MouseX2 = 659,
        /// <summary>Aliases: Mouse Buttons (auto-submitted from AddMouseButtonEvent() calls).<br/>- This is mirroring the data also written to io.MouseDown[], io.MouseWheel, in a format allowing them to be accessed via standard key API.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1555"/></summary>
        MouseWheelX = 660,
        /// <summary>Aliases: Mouse Buttons (auto-submitted from AddMouseButtonEvent() calls).<br/>- This is mirroring the data also written to io.MouseDown[], io.MouseWheel, in a format allowing them to be accessed via standard key API.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1555"/></summary>
        MouseWheelY = 661,
        /// <summary>[Internal] Reserved for mod storage.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1558"/></summary>
        ReservedForModCtrl = 662,
        /// <summary>[Internal] Reserved for mod storage.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1558"/></summary>
        ReservedForModShift = 663,
        /// <summary>[Internal] Reserved for mod storage.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1558"/></summary>
        ReservedForModAlt = 664,
        /// <summary>[Internal] Reserved for mod storage.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1558"/></summary>
        ReservedForModSuper = 665,
        /// <summary>Keyboard Modifiers (explicitly submitted by backend via AddKeyEvent() calls).<br/>- This is mirroring the data also written to io.KeyCtrl, io.KeyShift, io.KeyAlt, io.KeySuper, in a format allowing.<br/>Them to be accessed via standard key API, allowing calls such as IsKeyPressed(), IsKeyReleased(), querying duration etc.<br/>- Code polling every key (e.g. an interface to detect a key press for input mapping) might want to ignore those.<br/>And prefer using the real keys (e.g. ImGuiKey_LeftCtrl, ImGuiKey_RightCtrl instead of ImGuiMod_Ctrl).<br/>- In theory the value of keyboard modifiers should be roughly equivalent to a logical or of the equivalent left/right keys.<br/>In practice: it's complicated; mods are often provided from different sources. Keyboard layout, IME, sticky keys and.<br/>Backends tend to interfere and break that equivalence. The safer decision is to relay that ambiguity down to the end-user.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1569"/></summary>
        ImGuiModNone = 0,
        /// <summary>Ctrl.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1570"/></summary>
        ImGuiModCtrl = 4096,
        /// <summary>Shift.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1571"/></summary>
        ImGuiModShift = 8192,
        /// <summary>Option/Menu.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1572"/></summary>
        ImGuiModAlt = 16384,
        /// <summary>Cmd/Super/Windows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1573"/></summary>
        ImGuiModSuper = 32768,
        /// <summary>Alias for Ctrl (non-macOS) _or_ Super (macOS).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1574"/></summary>
        ImGuiModShortcut = 2048,
        /// <summary>5-bits.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1575"/></summary>
        ImGuiModMask = 63488,
    }

    /// <summary>Flags for ImGui::Begin().<br/>(Those are per-window flags. There are shared flags in ImGuiIO: io.ConfigWindowsResizeFromEdges and io.ConfigWindowsMoveFromTitleBarOnly).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1017"/></summary>
    // DEBUG: enum ImGuiWindowFlags_
    // DEBUG: {
    // DEBUG:     ImGuiWindowFlags_None                   = 0,
    // DEBUG:     ImGuiWindowFlags_NoTitleBar             = 1 << 0,   // Disable title-bar
    // DEBUG:     ImGuiWindowFlags_NoResize               = 1 << 1,   // Disable user resizing with the lower-right grip
    // DEBUG:     ImGuiWindowFlags_NoMove                 = 1 << 2,   // Disable user moving the window
    // DEBUG:     ImGuiWindowFlags_NoScrollbar            = 1 << 3,   // Disable scrollbars (window can still scroll with mouse or programmatically)
    // DEBUG:     ImGuiWindowFlags_NoScrollWithMouse      = 1 << 4,   // Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.
    // DEBUG:     ImGuiWindowFlags_NoCollapse             = 1 << 5,   // Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).
    // DEBUG:     ImGuiWindowFlags_AlwaysAutoResize       = 1 << 6,   // Resize every window to its content every frame
    // DEBUG:     ImGuiWindowFlags_NoBackground           = 1 << 7,   // Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).
    // DEBUG:     ImGuiWindowFlags_NoSavedSettings        = 1 << 8,   // Never load/save settings in .ini file
    // DEBUG:     ImGuiWindowFlags_NoMouseInputs          = 1 << 9,   // Disable catching mouse, hovering test with pass through.
    // DEBUG:     ImGuiWindowFlags_MenuBar                = 1 << 10,  // Has a menu-bar
    // DEBUG:     ImGuiWindowFlags_HorizontalScrollbar    = 1 << 11,  // Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the "Horizontal Scrolling" section.
    // DEBUG:     ImGuiWindowFlags_NoFocusOnAppearing     = 1 << 12,  // Disable taking focus when transitioning from hidden to visible state
    // DEBUG:     ImGuiWindowFlags_NoBringToFrontOnFocus  = 1 << 13,  // Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)
    // DEBUG:     ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,  // Always show vertical scrollbar (even if ContentSize.y < Size.y)
    // DEBUG:     ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,  // Always show horizontal scrollbar (even if ContentSize.x < Size.x)
    // DEBUG:     ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,  // Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)
    // DEBUG:     ImGuiWindowFlags_NoNavInputs            = 1 << 18,  // No gamepad/keyboard navigation within the window
    // DEBUG:     ImGuiWindowFlags_NoNavFocus             = 1 << 19,  // No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)
    // DEBUG:     ImGuiWindowFlags_UnsavedDocument        = 1 << 20,  // Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
    // DEBUG:     ImGuiWindowFlags_NoDocking              = 1 << 21,  // Disable docking of this window
    // DEBUG: 
    // DEBUG:     ImGuiWindowFlags_NoNav                  = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
    // DEBUG:     ImGuiWindowFlags_NoDecoration           = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse,
    // DEBUG:     ImGuiWindowFlags_NoInputs               = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
    // DEBUG: 
    // DEBUG:     // [Internal]
    // DEBUG:     ImGuiWindowFlags_NavFlattened           = 1 << 23,  // [BETA] On child window: allow gamepad/keyboard navigation to cross over parent border to this child or between sibling child windows.
    // DEBUG:     ImGuiWindowFlags_ChildWindow            = 1 << 24,  // Don't use! For internal use by BeginChild()
    // DEBUG:     ImGuiWindowFlags_Tooltip                = 1 << 25,  // Don't use! For internal use by BeginTooltip()
    // DEBUG:     ImGuiWindowFlags_Popup                  = 1 << 26,  // Don't use! For internal use by BeginPopup()
    // DEBUG:     ImGuiWindowFlags_Modal                  = 1 << 27,  // Don't use! For internal use by BeginPopupModal()
    // DEBUG:     ImGuiWindowFlags_ChildMenu              = 1 << 28,  // Don't use! For internal use by BeginMenu()
    // DEBUG:     ImGuiWindowFlags_DockNodeHost           = 1 << 29,  // Don't use! For internal use by Begin()/NewFrame()
    // DEBUG: }
    [Flags]
    public enum ImGuiWindowFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1019"/></summary>
        None = 0,
        /// <summary>Disable title-bar.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1020"/></summary>
        NoTitleBar = 1,
        /// <summary>Disable user resizing with the lower-right grip.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1021"/></summary>
        NoResize = 2,
        /// <summary>Disable user moving the window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1022"/></summary>
        NoMove = 4,
        /// <summary>Disable scrollbars (window can still scroll with mouse or programmatically).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1023"/></summary>
        NoScrollbar = 8,
        /// <summary>Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1024"/></summary>
        NoScrollWithMouse = 16,
        /// <summary>Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1025"/></summary>
        NoCollapse = 32,
        /// <summary>Resize every window to its content every frame.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1026"/></summary>
        AlwaysAutoResize = 64,
        /// <summary>Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1027"/></summary>
        NoBackground = 128,
        /// <summary>Never load/save settings in .ini file.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1028"/></summary>
        NoSavedSettings = 256,
        /// <summary>Disable catching mouse, hovering test with pass through.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1029"/></summary>
        NoMouseInputs = 512,
        /// <summary>Has a menu-bar.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1030"/></summary>
        MenuBar = 1024,
        /// <summary>Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the "Horizontal Scrolling" section.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1031"/></summary>
        HorizontalScrollbar = 2048,
        /// <summary>Disable taking focus when transitioning from hidden to visible state.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1032"/></summary>
        NoFocusOnAppearing = 4096,
        /// <summary>Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1033"/></summary>
        NoBringToFrontOnFocus = 8192,
        /// <summary>Always show vertical scrollbar (even if ContentSize.y &lt; Size.y).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1034"/></summary>
        AlwaysVerticalScrollbar = 16384,
        /// <summary>Always show horizontal scrollbar (even if ContentSize.x &lt; Size.x).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1035"/></summary>
        AlwaysHorizontalScrollbar = 32768,
        /// <summary>Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1036"/></summary>
        AlwaysUseWindowPadding = 65536,
        /// <summary>No gamepad/keyboard navigation within the window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1037"/></summary>
        NoNavInputs = 262144,
        /// <summary>No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1038"/></summary>
        NoNavFocus = 524288,
        /// <summary>Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1039"/></summary>
        UnsavedDocument = 1048576,
        /// <summary>Disable docking of this window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1040"/></summary>
        NoDocking = 2097152,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1042"/></summary>
        NoNav = 786432,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1043"/></summary>
        NoDecoration = 43,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1044"/></summary>
        NoInputs = 786944,
        /// <summary>[BETA] On child window: allow gamepad/keyboard navigation to cross over parent border to this child or between sibling child windows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1047"/></summary>
        NavFlattened = 8388608,
        /// <summary>Don't use! For internal use by BeginChild().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1048"/></summary>
        ChildWindow = 16777216,
        /// <summary>Don't use! For internal use by BeginTooltip().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1049"/></summary>
        Tooltip = 33554432,
        /// <summary>Don't use! For internal use by BeginPopup().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1050"/></summary>
        Popup = 67108864,
        /// <summary>Don't use! For internal use by BeginPopupModal().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1051"/></summary>
        Modal = 134217728,
        /// <summary>Don't use! For internal use by BeginMenu().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1052"/></summary>
        ChildMenu = 268435456,
        /// <summary>Don't use! For internal use by Begin()/NewFrame().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1053"/></summary>
        DockNodeHost = 536870912
    }

    /// <summary>Flags for ImGui::InputText().<br/>(Those are per-item flags. There are shared flags in ImGuiIO: io.ConfigInputTextCursorBlink and io.ConfigInputTextEnterKeepActive).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1058"/></summary>
    // DEBUG: enum ImGuiInputTextFlags_
    // DEBUG: {
    // DEBUG:     ImGuiInputTextFlags_None                = 0,
    // DEBUG:     ImGuiInputTextFlags_CharsDecimal        = 1 << 0,   // Allow 0123456789.+-*/
    // DEBUG:     ImGuiInputTextFlags_CharsHexadecimal    = 1 << 1,   // Allow 0123456789ABCDEFabcdef
    // DEBUG:     ImGuiInputTextFlags_CharsUppercase      = 1 << 2,   // Turn a..z into A..Z
    // DEBUG:     ImGuiInputTextFlags_CharsNoBlank        = 1 << 3,   // Filter out spaces, tabs
    // DEBUG:     ImGuiInputTextFlags_AutoSelectAll       = 1 << 4,   // Select entire text when first taking mouse focus
    // DEBUG:     ImGuiInputTextFlags_EnterReturnsTrue    = 1 << 5,   // Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.
    // DEBUG:     ImGuiInputTextFlags_CallbackCompletion  = 1 << 6,   // Callback on pressing TAB (for completion handling)
    // DEBUG:     ImGuiInputTextFlags_CallbackHistory     = 1 << 7,   // Callback on pressing Up/Down arrows (for history handling)
    // DEBUG:     ImGuiInputTextFlags_CallbackAlways      = 1 << 8,   // Callback on each iteration. User code may query cursor position, modify text buffer.
    // DEBUG:     ImGuiInputTextFlags_CallbackCharFilter  = 1 << 9,   // Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.
    // DEBUG:     ImGuiInputTextFlags_AllowTabInput       = 1 << 10,  // Pressing TAB input a '\t' character into the text field
    // DEBUG:     ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,  // In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).
    // DEBUG:     ImGuiInputTextFlags_NoHorizontalScroll  = 1 << 12,  // Disable following the cursor horizontally
    // DEBUG:     ImGuiInputTextFlags_AlwaysOverwrite     = 1 << 13,  // Overwrite mode
    // DEBUG:     ImGuiInputTextFlags_ReadOnly            = 1 << 14,  // Read-only mode
    // DEBUG:     ImGuiInputTextFlags_Password            = 1 << 15,  // Password mode, display all characters as '*'
    // DEBUG:     ImGuiInputTextFlags_NoUndoRedo          = 1 << 16,  // Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().
    // DEBUG:     ImGuiInputTextFlags_CharsScientific     = 1 << 17,  // Allow 0123456789.+-*/eE (Scientific notation input)
    // DEBUG:     ImGuiInputTextFlags_CallbackResize      = 1 << 18,  // Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this)
    // DEBUG:     ImGuiInputTextFlags_CallbackEdit        = 1 << 19,  // Callback on any edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)
    // DEBUG:     ImGuiInputTextFlags_EscapeClearsAll     = 1 << 20,  // Escape key clears content if not empty, and deactivate otherwise (contrast to default behavior of Escape to revert)
    // DEBUG: 
    // DEBUG:     // Obsolete names
    // DEBUG:     //ImGuiInputTextFlags_AlwaysInsertMode  = ImGuiInputTextFlags_AlwaysOverwrite   // [renamed in 1.82] name was not matching behavior
    // DEBUG: }
    [Flags]
    public enum ImGuiInputTextFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1060"/></summary>
        None = 0,
        /// <summary>Allow 0123456789.+-*.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1061"/></summary>
        CharsDecimal = 1,
        /// <summary>Allow 0123456789ABCDEFabcdef.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1062"/></summary>
        CharsHexadecimal = 2,
        /// <summary>Turn a..z into A..Z.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1063"/></summary>
        CharsUppercase = 4,
        /// <summary>Filter out spaces, tabs.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1064"/></summary>
        CharsNoBlank = 8,
        /// <summary>Select entire text when first taking mouse focus.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1065"/></summary>
        AutoSelectAll = 16,
        /// <summary>Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1066"/></summary>
        EnterReturnsTrue = 32,
        /// <summary>Callback on pressing TAB (for completion handling).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1067"/></summary>
        CallbackCompletion = 64,
        /// <summary>Callback on pressing Up/Down arrows (for history handling).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1068"/></summary>
        CallbackHistory = 128,
        /// <summary>Callback on each iteration. User code may query cursor position, modify text buffer.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1069"/></summary>
        CallbackAlways = 256,
        /// <summary>Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1070"/></summary>
        CallbackCharFilter = 512,
        /// <summary>Pressing TAB input a '\t' character into the text field.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1071"/></summary>
        AllowTabInput = 1024,
        /// <summary>In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1072"/></summary>
        CtrlEnterForNewLine = 2048,
        /// <summary>Disable following the cursor horizontally.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1073"/></summary>
        NoHorizontalScroll = 4096,
        /// <summary>Overwrite mode.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1074"/></summary>
        AlwaysOverwrite = 8192,
        /// <summary>Read-only mode.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1075"/></summary>
        ReadOnly = 16384,
        /// <summary>Password mode, display all characters as '*'.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1076"/></summary>
        Password = 32768,
        /// <summary>Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1077"/></summary>
        NoUndoRedo = 65536,
        /// <summary>Allow 0123456789.+-*/eE (Scientific notation input).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1078"/></summary>
        CharsScientific = 131072,
        /// <summary>Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1079"/></summary>
        CallbackResize = 262144,
        /// <summary>Callback on any edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1080"/></summary>
        CallbackEdit = 524288,
        /// <summary>Escape key clears content if not empty, and deactivate otherwise (contrast to default behavior of Escape to revert).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1081"/></summary>
        EscapeClearsAll = 1048576
    }

    /// <summary>Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader*().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1088"/></summary>
    // DEBUG: enum ImGuiTreeNodeFlags_
    // DEBUG: {
    // DEBUG:     ImGuiTreeNodeFlags_None                 = 0,
    // DEBUG:     ImGuiTreeNodeFlags_Selected             = 1 << 0,   // Draw as selected
    // DEBUG:     ImGuiTreeNodeFlags_Framed               = 1 << 1,   // Draw frame with background (e.g. for CollapsingHeader)
    // DEBUG:     ImGuiTreeNodeFlags_AllowOverlap         = 1 << 2,   // Hit testing to allow subsequent widgets to overlap this one
    // DEBUG:     ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1 << 3,   // Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack
    // DEBUG:     ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1 << 4,   // Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)
    // DEBUG:     ImGuiTreeNodeFlags_DefaultOpen          = 1 << 5,   // Default node to be open
    // DEBUG:     ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1 << 6,   // Need double-click to open node
    // DEBUG:     ImGuiTreeNodeFlags_OpenOnArrow          = 1 << 7,   // Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.
    // DEBUG:     ImGuiTreeNodeFlags_Leaf                 = 1 << 8,   // No collapsing, no arrow (use as a convenience for leaf nodes).
    // DEBUG:     ImGuiTreeNodeFlags_Bullet               = 1 << 9,   // Display a bullet instead of arrow. IMPORTANT: node can still be marked open/close if you don't set the _Leaf flag!
    // DEBUG:     ImGuiTreeNodeFlags_FramePadding         = 1 << 10,  // Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().
    // DEBUG:     ImGuiTreeNodeFlags_SpanAvailWidth       = 1 << 11,  // Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line. In the future we may refactor the hit system to be front-to-back, allowing natural overlaps and then this can become the default.
    // DEBUG:     ImGuiTreeNodeFlags_SpanFullWidth        = 1 << 12,  // Extend hit box to the left-most and right-most edges (bypass the indented area).
    // DEBUG:     ImGuiTreeNodeFlags_SpanAllColumns       = 1 << 13,  // Frame will span all columns of its container table (text will still fit in current column)
    // DEBUG:     ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 14,  // (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)
    // DEBUG:     //ImGuiTreeNodeFlags_NoScrollOnOpen     = 1 << 14,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible
    // DEBUG:     ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog,
    // DEBUG: 
    // DEBUG: #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    // DEBUG:     ImGuiTreeNodeFlags_AllowItemOverlap     = ImGuiTreeNodeFlags_AllowOverlap,  // Renamed in 1.89.7
    // DEBUG: #endif
    // DEBUG: }
    [Flags]
    public enum ImGuiTreeNodeFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1090"/></summary>
        None = 0,
        /// <summary>Draw as selected.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1091"/></summary>
        Selected = 1,
        /// <summary>Draw frame with background (e.g. for CollapsingHeader).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1092"/></summary>
        Framed = 2,
        /// <summary>Hit testing to allow subsequent widgets to overlap this one.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1093"/></summary>
        AllowOverlap = 4,
        /// <summary>Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1094"/></summary>
        NoTreePushOnOpen = 8,
        /// <summary>Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1095"/></summary>
        NoAutoOpenOnLog = 16,
        /// <summary>Default node to be open.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1096"/></summary>
        DefaultOpen = 32,
        /// <summary>Need double-click to open node.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1097"/></summary>
        OpenOnDoubleClick = 64,
        /// <summary>Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1098"/></summary>
        OpenOnArrow = 128,
        /// <summary>No collapsing, no arrow (use as a convenience for leaf nodes).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1099"/></summary>
        Leaf = 256,
        /// <summary>Display a bullet instead of arrow. IMPORTANT: node can still be marked open/close if you don't set the _Leaf flag!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1100"/></summary>
        Bullet = 512,
        /// <summary>Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1101"/></summary>
        FramePadding = 1024,
        /// <summary>Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line. In the future we may refactor the hit system to be front-to-back, allowing natural overlaps and then this can become the default.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1102"/></summary>
        SpanAvailWidth = 2048,
        /// <summary>Extend hit box to the left-most and right-most edges (bypass the indented area).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1103"/></summary>
        SpanFullWidth = 4096,
        /// <summary>Frame will span all columns of its container table (text will still fit in current column).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1104"/></summary>
        SpanAllColumns = 8192,
        /// <summary>(WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1105"/></summary>
        NavLeftJumpsBackHere = 16384,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1107"/></summary>
        CollapsingHeader = 26
    }

    /// <summary>Flags for OpenPopup*(), BeginPopupContext*(), IsPopupOpen() functions.<br/>- To be backward compatible with older API which took an 'int mouse_button = 1' argument, we need to treat.<br/>Small flags values as a mouse button index, so we encode the mouse button in the first few bits of the flags.<br/>It is therefore guaranteed to be legal to pass a mouse button index in ImGuiPopupFlags.<br/>- For the same reason, we exceptionally default the ImGuiPopupFlags argument of BeginPopupContextXXX functions to 1 instead of 0.<br/>IMPORTANT: because the default parameter is 1 (==ImGuiPopupFlags_MouseButtonRight), if you rely on the default parameter.<br/>And want to use another flag, you need to pass in the ImGuiPopupFlags_MouseButtonRight flag explicitly.<br/>- Multiple buttons currently cannot be combined/or-ed in those functions (we could allow it later).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1122"/></summary>
    // DEBUG: enum ImGuiPopupFlags_
    // DEBUG: {
    // DEBUG:     ImGuiPopupFlags_None                    = 0,
    // DEBUG:     ImGuiPopupFlags_MouseButtonLeft         = 0,        // For BeginPopupContext*(): open on Left Mouse release. Guaranteed to always be == 0 (same as ImGuiMouseButton_Left)
    // DEBUG:     ImGuiPopupFlags_MouseButtonRight        = 1,        // For BeginPopupContext*(): open on Right Mouse release. Guaranteed to always be == 1 (same as ImGuiMouseButton_Right)
    // DEBUG:     ImGuiPopupFlags_MouseButtonMiddle       = 2,        // For BeginPopupContext*(): open on Middle Mouse release. Guaranteed to always be == 2 (same as ImGuiMouseButton_Middle)
    // DEBUG:     ImGuiPopupFlags_MouseButtonMask_        = 0x1F,
    // DEBUG:     ImGuiPopupFlags_MouseButtonDefault_     = 1,
    // DEBUG:     ImGuiPopupFlags_NoOpenOverExistingPopup = 1 << 5,   // For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack
    // DEBUG:     ImGuiPopupFlags_NoOpenOverItems         = 1 << 6,   // For BeginPopupContextWindow(): don't return true when hovering items, only when hovering empty space
    // DEBUG:     ImGuiPopupFlags_AnyPopupId              = 1 << 7,   // For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup.
    // DEBUG:     ImGuiPopupFlags_AnyPopupLevel           = 1 << 8,   // For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level)
    // DEBUG:     ImGuiPopupFlags_AnyPopup                = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPopupLevel,
    // DEBUG: }
    [Flags]
    public enum ImGuiPopupFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1124"/></summary>
        None = 0,
        /// <summary>For BeginPopupContext*(): open on Left Mouse release. Guaranteed to always be == 0 (same as ImGuiMouseButton_Left).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1125"/></summary>
        MouseButtonLeft = 0,
        /// <summary>For BeginPopupContext*(): open on Right Mouse release. Guaranteed to always be == 1 (same as ImGuiMouseButton_Right).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1126"/></summary>
        MouseButtonRight = 1,
        /// <summary>For BeginPopupContext*(): open on Middle Mouse release. Guaranteed to always be == 2 (same as ImGuiMouseButton_Middle).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1127"/></summary>
        MouseButtonMiddle = 2,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1128"/></summary>
        MouseButtonMask = 31,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1129"/></summary>
        MouseButtonDefault = 1,
        /// <summary>For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1130"/></summary>
        NoOpenOverExistingPopup = 32,
        /// <summary>For BeginPopupContextWindow(): don't return true when hovering items, only when hovering empty space.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1131"/></summary>
        NoOpenOverItems = 64,
        /// <summary>For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1132"/></summary>
        AnyPopupId = 128,
        /// <summary>For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1133"/></summary>
        AnyPopupLevel = 256,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1134"/></summary>
        AnyPopup = 384
    }

    /// <summary>Flags for ImGui::Selectable().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1138"/></summary>
    // DEBUG: enum ImGuiSelectableFlags_
    // DEBUG: {
    // DEBUG:     ImGuiSelectableFlags_None               = 0,
    // DEBUG:     ImGuiSelectableFlags_DontClosePopups    = 1 << 0,   // Clicking this doesn't close parent popup window
    // DEBUG:     ImGuiSelectableFlags_SpanAllColumns     = 1 << 1,   // Frame will span all columns of its container table (text will still fit in current column)
    // DEBUG:     ImGuiSelectableFlags_AllowDoubleClick   = 1 << 2,   // Generate press events on double clicks too
    // DEBUG:     ImGuiSelectableFlags_Disabled           = 1 << 3,   // Cannot be selected, display grayed out text
    // DEBUG:     ImGuiSelectableFlags_AllowOverlap       = 1 << 4,   // (WIP) Hit testing to allow subsequent widgets to overlap this one
    // DEBUG: 
    // DEBUG: #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    // DEBUG:     ImGuiSelectableFlags_AllowItemOverlap   = ImGuiSelectableFlags_AllowOverlap,  // Renamed in 1.89.7
    // DEBUG: #endif
    // DEBUG: }
    [Flags]
    public enum ImGuiSelectableFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1140"/></summary>
        None = 0,
        /// <summary>Clicking this doesn't close parent popup window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1141"/></summary>
        DontClosePopups = 1,
        /// <summary>Frame will span all columns of its container table (text will still fit in current column).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1142"/></summary>
        SpanAllColumns = 2,
        /// <summary>Generate press events on double clicks too.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1143"/></summary>
        AllowDoubleClick = 4,
        /// <summary>Cannot be selected, display grayed out text.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1144"/></summary>
        Disabled = 8,
        /// <summary>(WIP) Hit testing to allow subsequent widgets to overlap this one.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1145"/></summary>
        AllowOverlap = 16
    }

    /// <summary>Flags for ImGui::BeginCombo().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1153"/></summary>
    // DEBUG: enum ImGuiComboFlags_
    // DEBUG: {
    // DEBUG:     ImGuiComboFlags_None                    = 0,
    // DEBUG:     ImGuiComboFlags_PopupAlignLeft          = 1 << 0,   // Align the popup toward the left by default
    // DEBUG:     ImGuiComboFlags_HeightSmall             = 1 << 1,   // Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()
    // DEBUG:     ImGuiComboFlags_HeightRegular           = 1 << 2,   // Max ~8 items visible (default)
    // DEBUG:     ImGuiComboFlags_HeightLarge             = 1 << 3,   // Max ~20 items visible
    // DEBUG:     ImGuiComboFlags_HeightLargest           = 1 << 4,   // As many fitting items as possible
    // DEBUG:     ImGuiComboFlags_NoArrowButton           = 1 << 5,   // Display on the preview box without the square arrow button
    // DEBUG:     ImGuiComboFlags_NoPreview               = 1 << 6,   // Display only a square arrow button
    // DEBUG:     ImGuiComboFlags_WidthFitPreview         = 1 << 7,   // Width dynamically calculated from preview contents
    // DEBUG:     ImGuiComboFlags_HeightMask_             = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest,
    // DEBUG: }
    [Flags]
    public enum ImGuiComboFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1155"/></summary>
        None = 0,
        /// <summary>Align the popup toward the left by default.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1156"/></summary>
        PopupAlignLeft = 1,
        /// <summary>Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1157"/></summary>
        HeightSmall = 2,
        /// <summary>Max ~8 items visible (default).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1158"/></summary>
        HeightRegular = 4,
        /// <summary>Max ~20 items visible.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1159"/></summary>
        HeightLarge = 8,
        /// <summary>As many fitting items as possible.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1160"/></summary>
        HeightLargest = 16,
        /// <summary>Display on the preview box without the square arrow button.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1161"/></summary>
        NoArrowButton = 32,
        /// <summary>Display only a square arrow button.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1162"/></summary>
        NoPreview = 64,
        /// <summary>Width dynamically calculated from preview contents.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1163"/></summary>
        WidthFitPreview = 128,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1164"/></summary>
        HeightMask = 30
    }

    /// <summary>Flags for ImGui::BeginTabBar().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1168"/></summary>
    // DEBUG: enum ImGuiTabBarFlags_
    // DEBUG: {
    // DEBUG:     ImGuiTabBarFlags_None                           = 0,
    // DEBUG:     ImGuiTabBarFlags_Reorderable                    = 1 << 0,   // Allow manually dragging tabs to re-order them + New tabs are appended at the end of list
    // DEBUG:     ImGuiTabBarFlags_AutoSelectNewTabs              = 1 << 1,   // Automatically select new tabs when they appear
    // DEBUG:     ImGuiTabBarFlags_TabListPopupButton             = 1 << 2,   // Disable buttons to open the tab list popup
    // DEBUG:     ImGuiTabBarFlags_NoCloseWithMiddleMouseButton   = 1 << 3,   // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.
    // DEBUG:     ImGuiTabBarFlags_NoTabListScrollingButtons      = 1 << 4,   // Disable scrolling buttons (apply when fitting policy is ImGuiTabBarFlags_FittingPolicyScroll)
    // DEBUG:     ImGuiTabBarFlags_NoTooltip                      = 1 << 5,   // Disable tooltips when hovering a tab
    // DEBUG:     ImGuiTabBarFlags_FittingPolicyResizeDown        = 1 << 6,   // Resize tabs when they don't fit
    // DEBUG:     ImGuiTabBarFlags_FittingPolicyScroll            = 1 << 7,   // Add scroll buttons when tabs don't fit
    // DEBUG:     ImGuiTabBarFlags_FittingPolicyMask_             = ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll,
    // DEBUG:     ImGuiTabBarFlags_FittingPolicyDefault_          = ImGuiTabBarFlags_FittingPolicyResizeDown,
    // DEBUG: }
    [Flags]
    public enum ImGuiTabBarFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1170"/></summary>
        None = 0,
        /// <summary>Allow manually dragging tabs to re-order them + New tabs are appended at the end of list.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1171"/></summary>
        Reorderable = 1,
        /// <summary>Automatically select new tabs when they appear.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1172"/></summary>
        AutoSelectNewTabs = 2,
        /// <summary>Disable buttons to open the tab list popup.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1173"/></summary>
        TabListPopupButton = 4,
        /// <summary>Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() &amp; &amp; IsMouseClicked(2)) *p_open = false.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1174"/></summary>
        NoCloseWithMiddleMouseButton = 8,
        /// <summary>Disable scrolling buttons (apply when fitting policy is ImGuiTabBarFlags_FittingPolicyScroll).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1175"/></summary>
        NoTabListScrollingButtons = 16,
        /// <summary>Disable tooltips when hovering a tab.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1176"/></summary>
        NoTooltip = 32,
        /// <summary>Resize tabs when they don't fit.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1177"/></summary>
        FittingPolicyResizeDown = 64,
        /// <summary>Add scroll buttons when tabs don't fit.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1178"/></summary>
        FittingPolicyScroll = 128,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1179"/></summary>
        FittingPolicyMask = 192,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1180"/></summary>
        FittingPolicyDefault = 64
    }

    /// <summary>Flags for ImGui::BeginTabItem().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1184"/></summary>
    // DEBUG: enum ImGuiTabItemFlags_
    // DEBUG: {
    // DEBUG:     ImGuiTabItemFlags_None                          = 0,
    // DEBUG:     ImGuiTabItemFlags_UnsavedDocument               = 1 << 0,   // Display a dot next to the title + tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
    // DEBUG:     ImGuiTabItemFlags_SetSelected                   = 1 << 1,   // Trigger flag to programmatically make the tab selected when calling BeginTabItem()
    // DEBUG:     ImGuiTabItemFlags_NoCloseWithMiddleMouseButton  = 1 << 2,   // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.
    // DEBUG:     ImGuiTabItemFlags_NoPushId                      = 1 << 3,   // Don't call PushID(tab->ID)/PopID() on BeginTabItem()/EndTabItem()
    // DEBUG:     ImGuiTabItemFlags_NoTooltip                     = 1 << 4,   // Disable tooltip for the given tab
    // DEBUG:     ImGuiTabItemFlags_NoReorder                     = 1 << 5,   // Disable reordering this tab or having another tab cross over this tab
    // DEBUG:     ImGuiTabItemFlags_Leading                       = 1 << 6,   // Enforce the tab position to the left of the tab bar (after the tab list popup button)
    // DEBUG:     ImGuiTabItemFlags_Trailing                      = 1 << 7,   // Enforce the tab position to the right of the tab bar (before the scrolling buttons)
    // DEBUG: }
    [Flags]
    public enum ImGuiTabItemFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1186"/></summary>
        None = 0,
        /// <summary>Display a dot next to the title + tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1187"/></summary>
        UnsavedDocument = 1,
        /// <summary>Trigger flag to programmatically make the tab selected when calling BeginTabItem().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1188"/></summary>
        SetSelected = 2,
        /// <summary>Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() &amp; &amp; IsMouseClicked(2)) *p_open = false.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1189"/></summary>
        NoCloseWithMiddleMouseButton = 4,
        /// <summary>Don't call PushID(tab-&gt;ID)/PopID() on BeginTabItem()/EndTabItem().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1190"/></summary>
        NoPushId = 8,
        /// <summary>Disable tooltip for the given tab.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1191"/></summary>
        NoTooltip = 16,
        /// <summary>Disable reordering this tab or having another tab cross over this tab.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1192"/></summary>
        NoReorder = 32,
        /// <summary>Enforce the tab position to the left of the tab bar (after the tab list popup button).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1193"/></summary>
        Leading = 64,
        /// <summary>Enforce the tab position to the right of the tab bar (before the scrolling buttons).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1194"/></summary>
        Trailing = 128
    }

    /// <summary>Flags for ImGui::BeginTable().<br/>- Important! Sizing policies have complex and subtle side effects, much more so than you would expect.<br/>Read comments/demos carefully + experiment with live demos to get acquainted with them.<br/>- The DEFAULT sizing policies are:.<br/>- Default to ImGuiTableFlags_SizingFixedFit, if ScrollX is on, or if host window has ImGuiWindowFlags_AlwaysAutoResize.<br/>- Default to ImGuiTableFlags_SizingStretchSame if ScrollX is off.<br/>- When ScrollX is off:.<br/>- Table defaults to ImGuiTableFlags_SizingStretchSame -&gt; all Columns defaults to ImGuiTableColumnFlags_WidthStretch with same weight.<br/>- Columns sizing policy allowed: Stretch (default), Fixed/Auto.<br/>- Fixed Columns (if any) will generally obtain their requested width (unless the table cannot fit them all).<br/>- Stretch Columns will share the remaining width according to their respective weight.<br/>- Mixed Fixed/Stretch columns is possible but has various side-effects on resizing behaviors.<br/>The typical use of mixing sizing policies is: any number of LEADING Fixed columns, followed by one or two TRAILING Stretch columns.<br/>(this is because the visible order of columns have subtle but necessary effects on how they react to manual resizing).<br/>- When ScrollX is on:.<br/>- Table defaults to ImGuiTableFlags_SizingFixedFit -&gt; all Columns defaults to ImGuiTableColumnFlags_WidthFixed.<br/>- Columns sizing policy allowed: Fixed/Auto mostly.<br/>- Fixed Columns can be enlarged as needed. Table will show a horizontal scrollbar if needed.<br/>- When using auto-resizing (non-resizable) fixed columns, querying the content width to use item right-alignment e.g. SetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.<br/>- Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on, UNLESS you have specified a value for 'inner_width' in BeginTable().<br/>If you specify a value for 'inner_width' then effectively the scrolling space is known and Stretch or mixed Fixed/Stretch columns become meaningful again.<br/>- Read on documentation at the top of imgui_tables.cpp for details.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1219"/></summary>
    // DEBUG: enum ImGuiTableFlags_
    // DEBUG: {
    // DEBUG:     // Features
    // DEBUG:     ImGuiTableFlags_None                       = 0,
    // DEBUG:     ImGuiTableFlags_Resizable                  = 1 << 0,   // Enable resizing columns.
    // DEBUG:     ImGuiTableFlags_Reorderable                = 1 << 1,   // Enable reordering columns in header row (need calling TableSetupColumn() + TableHeadersRow() to display headers)
    // DEBUG:     ImGuiTableFlags_Hideable                   = 1 << 2,   // Enable hiding/disabling columns in context menu.
    // DEBUG:     ImGuiTableFlags_Sortable                   = 1 << 3,   // Enable sorting. Call TableGetSortSpecs() to obtain sort specs. Also see ImGuiTableFlags_SortMulti and ImGuiTableFlags_SortTristate.
    // DEBUG:     ImGuiTableFlags_NoSavedSettings            = 1 << 4,   // Disable persisting columns order, width and sort settings in the .ini file.
    // DEBUG:     ImGuiTableFlags_ContextMenuInBody          = 1 << 5,   // Right-click on columns body/contents will display table context menu. By default it is available in TableHeadersRow().
    // DEBUG:     // Decorations
    // DEBUG:     ImGuiTableFlags_RowBg                      = 1 << 6,   // Set each RowBg color with ImGuiCol_TableRowBg or ImGuiCol_TableRowBgAlt (equivalent of calling TableSetBgColor with ImGuiTableBgFlags_RowBg0 on each row manually)
    // DEBUG:     ImGuiTableFlags_BordersInnerH              = 1 << 7,   // Draw horizontal borders between rows.
    // DEBUG:     ImGuiTableFlags_BordersOuterH              = 1 << 8,   // Draw horizontal borders at the top and bottom.
    // DEBUG:     ImGuiTableFlags_BordersInnerV              = 1 << 9,   // Draw vertical borders between columns.
    // DEBUG:     ImGuiTableFlags_BordersOuterV              = 1 << 10,  // Draw vertical borders on the left and right sides.
    // DEBUG:     ImGuiTableFlags_BordersH                   = ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersOuterH, // Draw horizontal borders.
    // DEBUG:     ImGuiTableFlags_BordersV                   = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersOuterV, // Draw vertical borders.
    // DEBUG:     ImGuiTableFlags_BordersInner               = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInnerH, // Draw inner borders.
    // DEBUG:     ImGuiTableFlags_BordersOuter               = ImGuiTableFlags_BordersOuterV | ImGuiTableFlags_BordersOuterH, // Draw outer borders.
    // DEBUG:     ImGuiTableFlags_Borders                    = ImGuiTableFlags_BordersInner | ImGuiTableFlags_BordersOuter,   // Draw all borders.
    // DEBUG:     ImGuiTableFlags_NoBordersInBody            = 1 << 11,  // [ALPHA] Disable vertical borders in columns Body (borders will always appear in Headers). -> May move to style
    // DEBUG:     ImGuiTableFlags_NoBordersInBodyUntilResize = 1 << 12,  // [ALPHA] Disable vertical borders in columns Body until hovered for resize (borders will always appear in Headers). -> May move to style
    // DEBUG:     // Sizing Policy (read above for defaults)
    // DEBUG:     ImGuiTableFlags_SizingFixedFit             = 1 << 13,  // Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching contents width.
    // DEBUG:     ImGuiTableFlags_SizingFixedSame            = 2 << 13,  // Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching the maximum contents width of all columns. Implicitly enable ImGuiTableFlags_NoKeepColumnsVisible.
    // DEBUG:     ImGuiTableFlags_SizingStretchProp          = 3 << 13,  // Columns default to _WidthStretch with default weights proportional to each columns contents widths.
    // DEBUG:     ImGuiTableFlags_SizingStretchSame          = 4 << 13,  // Columns default to _WidthStretch with default weights all equal, unless overridden by TableSetupColumn().
    // DEBUG:     // Sizing Extra Options
    // DEBUG:     ImGuiTableFlags_NoHostExtendX              = 1 << 16,  // Make outer width auto-fit to columns, overriding outer_size.x value. Only available when ScrollX/ScrollY are disabled and Stretch columns are not used.
    // DEBUG:     ImGuiTableFlags_NoHostExtendY              = 1 << 17,  // Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit). Only available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.
    // DEBUG:     ImGuiTableFlags_NoKeepColumnsVisible       = 1 << 18,  // Disable keeping column always minimally visible when ScrollX is off and table gets too small. Not recommended if columns are resizable.
    // DEBUG:     ImGuiTableFlags_PreciseWidths              = 1 << 19,  // Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.
    // DEBUG:     // Clipping
    // DEBUG:     ImGuiTableFlags_NoClip                     = 1 << 20,  // Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with TableSetupScrollFreeze().
    // DEBUG:     // Padding
    // DEBUG:     ImGuiTableFlags_PadOuterX                  = 1 << 21,  // Default if BordersOuterV is on. Enable outermost padding. Generally desirable if you have headers.
    // DEBUG:     ImGuiTableFlags_NoPadOuterX                = 1 << 22,  // Default if BordersOuterV is off. Disable outermost padding.
    // DEBUG:     ImGuiTableFlags_NoPadInnerX                = 1 << 23,  // Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off).
    // DEBUG:     // Scrolling
    // DEBUG:     ImGuiTableFlags_ScrollX                    = 1 << 24,  // Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size. Changes default sizing policy. Because this creates a child window, ScrollY is currently generally recommended when using ScrollX.
    // DEBUG:     ImGuiTableFlags_ScrollY                    = 1 << 25,  // Enable vertical scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size.
    // DEBUG:     // Sorting
    // DEBUG:     ImGuiTableFlags_SortMulti                  = 1 << 26,  // Hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).
    // DEBUG:     ImGuiTableFlags_SortTristate               = 1 << 27,  // Allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).
    // DEBUG:     // Miscellaneous
    // DEBUG:     ImGuiTableFlags_HighlightHoveredColumn     = 1 << 28,  // Highlight column headers when hovered (may evolve into a fuller highlight)
    // DEBUG: 
    // DEBUG:     // [Internal] Combinations and masks
    // DEBUG:     ImGuiTableFlags_SizingMask_                = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_SizingFixedSame | ImGuiTableFlags_SizingStretchProp | ImGuiTableFlags_SizingStretchSame,
    // DEBUG: }
    [Flags]
    public enum ImGuiTableFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1222"/></summary>
        None = 0,
        /// <summary>Enable resizing columns.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1223"/></summary>
        Resizable = 1,
        /// <summary>Enable reordering columns in header row (need calling TableSetupColumn() + TableHeadersRow() to display headers).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1224"/></summary>
        Reorderable = 2,
        /// <summary>Enable hiding/disabling columns in context menu.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1225"/></summary>
        Hideable = 4,
        /// <summary>Enable sorting. Call TableGetSortSpecs() to obtain sort specs. Also see ImGuiTableFlags_SortMulti and ImGuiTableFlags_SortTristate.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1226"/></summary>
        Sortable = 8,
        /// <summary>Disable persisting columns order, width and sort settings in the .ini file.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1227"/></summary>
        NoSavedSettings = 16,
        /// <summary>Right-click on columns body/contents will display table context menu. By default it is available in TableHeadersRow().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1228"/></summary>
        ContextMenuInBody = 32,
        /// <summary>Set each RowBg color with ImGuiCol_TableRowBg or ImGuiCol_TableRowBgAlt (equivalent of calling TableSetBgColor with ImGuiTableBgFlags_RowBg0 on each row manually).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1230"/></summary>
        RowBg = 64,
        /// <summary>Draw horizontal borders between rows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1231"/></summary>
        BordersInnerH = 128,
        /// <summary>Draw horizontal borders at the top and bottom.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1232"/></summary>
        BordersOuterH = 256,
        /// <summary>Draw vertical borders between columns.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1233"/></summary>
        BordersInnerV = 512,
        /// <summary>Draw vertical borders on the left and right sides.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1234"/></summary>
        BordersOuterV = 1024,
        /// <summary>Draw horizontal borders.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1235"/></summary>
        BordersH = 384,
        /// <summary>Draw vertical borders.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1236"/></summary>
        BordersV = 1536,
        /// <summary>Draw inner borders.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1237"/></summary>
        BordersInner = 640,
        /// <summary>Draw outer borders.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1238"/></summary>
        BordersOuter = 1280,
        /// <summary>Draw all borders.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1239"/></summary>
        Borders = 1920,
        /// <summary>[ALPHA] Disable vertical borders in columns Body (borders will always appear in Headers). -&gt; May move to style.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1240"/></summary>
        NoBordersInBody = 2048,
        /// <summary>[ALPHA] Disable vertical borders in columns Body until hovered for resize (borders will always appear in Headers). -&gt; May move to style.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1241"/></summary>
        NoBordersInBodyUntilResize = 4096,
        /// <summary>Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching contents width.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1243"/></summary>
        SizingFixedFit = 8192,
        /// <summary>Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching the maximum contents width of all columns. Implicitly enable ImGuiTableFlags_NoKeepColumnsVisible.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1244"/></summary>
        SizingFixedSame = 16384,
        /// <summary>Columns default to _WidthStretch with default weights proportional to each columns contents widths.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1245"/></summary>
        SizingStretchProp = 24576,
        /// <summary>Columns default to _WidthStretch with default weights all equal, unless overridden by TableSetupColumn().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1246"/></summary>
        SizingStretchSame = 32768,
        /// <summary>Make outer width auto-fit to columns, overriding outer_size.x value. Only available when ScrollX/ScrollY are disabled and Stretch columns are not used.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1248"/></summary>
        NoHostExtendX = 65536,
        /// <summary>Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit). Only available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1249"/></summary>
        NoHostExtendY = 131072,
        /// <summary>Disable keeping column always minimally visible when ScrollX is off and table gets too small. Not recommended if columns are resizable.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1250"/></summary>
        NoKeepColumnsVisible = 262144,
        /// <summary>Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1251"/></summary>
        PreciseWidths = 524288,
        /// <summary>Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with TableSetupScrollFreeze().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1253"/></summary>
        NoClip = 1048576,
        /// <summary>Default if BordersOuterV is on. Enable outermost padding. Generally desirable if you have headers.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1255"/></summary>
        PadOuterX = 2097152,
        /// <summary>Default if BordersOuterV is off. Disable outermost padding.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1256"/></summary>
        NoPadOuterX = 4194304,
        /// <summary>Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1257"/></summary>
        NoPadInnerX = 8388608,
        /// <summary>Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size. Changes default sizing policy. Because this creates a child window, ScrollY is currently generally recommended when using ScrollX.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1259"/></summary>
        ScrollX = 16777216,
        /// <summary>Enable vertical scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1260"/></summary>
        ScrollY = 33554432,
        /// <summary>Hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount &gt; 1).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1262"/></summary>
        SortMulti = 67108864,
        /// <summary>Allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1263"/></summary>
        SortTristate = 134217728,
        /// <summary>Highlight column headers when hovered (may evolve into a fuller highlight).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1265"/></summary>
        HighlightHoveredColumn = 268435456,
        /// <summary>[Internal] Combinations and masks.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1268"/></summary>
        SizingMask = 57344
    }

    /// <summary>Flags for ImGui::TableSetupColumn().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1272"/></summary>
    // DEBUG: enum ImGuiTableColumnFlags_
    // DEBUG: {
    // DEBUG:     // Input configuration flags
    // DEBUG:     ImGuiTableColumnFlags_None                  = 0,
    // DEBUG:     ImGuiTableColumnFlags_Disabled              = 1 << 0,   // Overriding/master disable flag: hide column, won't show in context menu (unlike calling TableSetColumnEnabled() which manipulates the user accessible state)
    // DEBUG:     ImGuiTableColumnFlags_DefaultHide           = 1 << 1,   // Default as a hidden/disabled column.
    // DEBUG:     ImGuiTableColumnFlags_DefaultSort           = 1 << 2,   // Default as a sorting column.
    // DEBUG:     ImGuiTableColumnFlags_WidthStretch          = 1 << 3,   // Column will stretch. Preferable with horizontal scrolling disabled (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).
    // DEBUG:     ImGuiTableColumnFlags_WidthFixed            = 1 << 4,   // Column will not stretch. Preferable with horizontal scrolling enabled (default if table sizing policy is _SizingFixedFit and table is resizable).
    // DEBUG:     ImGuiTableColumnFlags_NoResize              = 1 << 5,   // Disable manual resizing.
    // DEBUG:     ImGuiTableColumnFlags_NoReorder             = 1 << 6,   // Disable manual reordering this column, this will also prevent other columns from crossing over this column.
    // DEBUG:     ImGuiTableColumnFlags_NoHide                = 1 << 7,   // Disable ability to hide/disable this column.
    // DEBUG:     ImGuiTableColumnFlags_NoClip                = 1 << 8,   // Disable clipping for this column (all NoClip columns will render in a same draw command).
    // DEBUG:     ImGuiTableColumnFlags_NoSort                = 1 << 9,   // Disable ability to sort on this field (even if ImGuiTableFlags_Sortable is set on the table).
    // DEBUG:     ImGuiTableColumnFlags_NoSortAscending       = 1 << 10,  // Disable ability to sort in the ascending direction.
    // DEBUG:     ImGuiTableColumnFlags_NoSortDescending      = 1 << 11,  // Disable ability to sort in the descending direction.
    // DEBUG:     ImGuiTableColumnFlags_NoHeaderLabel         = 1 << 12,  // TableHeadersRow() will not submit horizontal label for this column. Convenient for some small columns. Name will still appear in context menu or in angled headers.
    // DEBUG:     ImGuiTableColumnFlags_NoHeaderWidth         = 1 << 13,  // Disable header text width contribution to automatic column width.
    // DEBUG:     ImGuiTableColumnFlags_PreferSortAscending   = 1 << 14,  // Make the initial sort direction Ascending when first sorting on this column (default).
    // DEBUG:     ImGuiTableColumnFlags_PreferSortDescending  = 1 << 15,  // Make the initial sort direction Descending when first sorting on this column.
    // DEBUG:     ImGuiTableColumnFlags_IndentEnable          = 1 << 16,  // Use current Indent value when entering cell (default for column 0).
    // DEBUG:     ImGuiTableColumnFlags_IndentDisable         = 1 << 17,  // Ignore current Indent value when entering cell (default for columns > 0). Indentation changes _within_ the cell will still be honored.
    // DEBUG:     ImGuiTableColumnFlags_AngledHeader          = 1 << 18,  // TableHeadersRow() will submit an angled header row for this column. Note this will add an extra row.
    // DEBUG: 
    // DEBUG:     // Output status flags, read-only via TableGetColumnFlags()
    // DEBUG:     ImGuiTableColumnFlags_IsEnabled             = 1 << 24,  // Status: is enabled == not hidden by user/api (referred to as "Hide" in _DefaultHide and _NoHide) flags.
    // DEBUG:     ImGuiTableColumnFlags_IsVisible             = 1 << 25,  // Status: is visible == is enabled AND not clipped by scrolling.
    // DEBUG:     ImGuiTableColumnFlags_IsSorted              = 1 << 26,  // Status: is currently part of the sort specs
    // DEBUG:     ImGuiTableColumnFlags_IsHovered             = 1 << 27,  // Status: is hovered by mouse
    // DEBUG: 
    // DEBUG:     // [Internal] Combinations and masks
    // DEBUG:     ImGuiTableColumnFlags_WidthMask_            = ImGuiTableColumnFlags_WidthStretch | ImGuiTableColumnFlags_WidthFixed,
    // DEBUG:     ImGuiTableColumnFlags_IndentMask_           = ImGuiTableColumnFlags_IndentEnable | ImGuiTableColumnFlags_IndentDisable,
    // DEBUG:     ImGuiTableColumnFlags_StatusMask_           = ImGuiTableColumnFlags_IsEnabled | ImGuiTableColumnFlags_IsVisible | ImGuiTableColumnFlags_IsSorted | ImGuiTableColumnFlags_IsHovered,
    // DEBUG:     ImGuiTableColumnFlags_NoDirectResize_       = 1 << 30,  // [Internal] Disable user resizing this column directly (it may however we resized indirectly from its left edge)
    // DEBUG: }
    [Flags]
    public enum ImGuiTableColumnFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1275"/></summary>
        None = 0,
        /// <summary>Overriding/master disable flag: hide column, won't show in context menu (unlike calling TableSetColumnEnabled() which manipulates the user accessible state).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1276"/></summary>
        Disabled = 1,
        /// <summary>Default as a hidden/disabled column.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1277"/></summary>
        DefaultHide = 2,
        /// <summary>Default as a sorting column.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1278"/></summary>
        DefaultSort = 4,
        /// <summary>Column will stretch. Preferable with horizontal scrolling disabled (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1279"/></summary>
        WidthStretch = 8,
        /// <summary>Column will not stretch. Preferable with horizontal scrolling enabled (default if table sizing policy is _SizingFixedFit and table is resizable).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1280"/></summary>
        WidthFixed = 16,
        /// <summary>Disable manual resizing.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1281"/></summary>
        NoResize = 32,
        /// <summary>Disable manual reordering this column, this will also prevent other columns from crossing over this column.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1282"/></summary>
        NoReorder = 64,
        /// <summary>Disable ability to hide/disable this column.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1283"/></summary>
        NoHide = 128,
        /// <summary>Disable clipping for this column (all NoClip columns will render in a same draw command).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1284"/></summary>
        NoClip = 256,
        /// <summary>Disable ability to sort on this field (even if ImGuiTableFlags_Sortable is set on the table).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1285"/></summary>
        NoSort = 512,
        /// <summary>Disable ability to sort in the ascending direction.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1286"/></summary>
        NoSortAscending = 1024,
        /// <summary>Disable ability to sort in the descending direction.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1287"/></summary>
        NoSortDescending = 2048,
        /// <summary>TableHeadersRow() will not submit horizontal label for this column. Convenient for some small columns. Name will still appear in context menu or in angled headers.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1288"/></summary>
        NoHeaderLabel = 4096,
        /// <summary>Disable header text width contribution to automatic column width.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1289"/></summary>
        NoHeaderWidth = 8192,
        /// <summary>Make the initial sort direction Ascending when first sorting on this column (default).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1290"/></summary>
        PreferSortAscending = 16384,
        /// <summary>Make the initial sort direction Descending when first sorting on this column.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1291"/></summary>
        PreferSortDescending = 32768,
        /// <summary>Use current Indent value when entering cell (default for column 0).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1292"/></summary>
        IndentEnable = 65536,
        /// <summary>Ignore current Indent value when entering cell (default for columns &gt; 0). Indentation changes _within_ the cell will still be honored.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1293"/></summary>
        IndentDisable = 131072,
        /// <summary>TableHeadersRow() will submit an angled header row for this column. Note this will add an extra row.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1294"/></summary>
        AngledHeader = 262144,
        /// <summary>Status: is enabled == not hidden by user/api (referred to as "Hide" in _DefaultHide and _NoHide) flags.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1297"/></summary>
        IsEnabled = 16777216,
        /// <summary>Status: is visible == is enabled AND not clipped by scrolling.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1298"/></summary>
        IsVisible = 33554432,
        /// <summary>Status: is currently part of the sort specs.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1299"/></summary>
        IsSorted = 67108864,
        /// <summary>Status: is hovered by mouse.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1300"/></summary>
        IsHovered = 134217728,
        /// <summary>[Internal] Combinations and masks.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1303"/></summary>
        WidthMask = 24,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1304"/></summary>
        IndentMask = 196608,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1305"/></summary>
        StatusMask = 251658240,
        /// <summary>[Internal] Disable user resizing this column directly (it may however we resized indirectly from its left edge).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1306"/></summary>
        NoDirectResize = 1073741824
    }

    /// <summary>Flags for ImGui::TableNextRow().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1310"/></summary>
    // DEBUG: enum ImGuiTableRowFlags_
    // DEBUG: {
    // DEBUG:     ImGuiTableRowFlags_None                     = 0,
    // DEBUG:     ImGuiTableRowFlags_Headers                  = 1 << 0,   // Identify header row (set default background color + width of its contents accounted differently for auto column width)
    // DEBUG: }
    [Flags]
    public enum ImGuiTableRowFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1312"/></summary>
        None = 0,
        /// <summary>Identify header row (set default background color + width of its contents accounted differently for auto column width).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1313"/></summary>
        Headers = 1
    }

    /// <summary>Enum for ImGui::TableSetBgColor().<br/>Background colors are rendering in 3 layers:.<br/>- Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.<br/>- Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.<br/>- Layer 2: draw with CellBg color if set.<br/>The purpose of the two row/columns layers is to let you decide if a background color change should override or blend with the existing color.<br/>When using ImGuiTableFlags_RowBg on the table, each row has the RowBg0 color automatically set for odd/even rows.<br/>If you set the color of RowBg0 target, your color will override the existing RowBg0 color.<br/>If you set the color of RowBg1 or ColumnBg1 target, your color will blend over the RowBg0 color.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1325"/></summary>
    // DEBUG: enum ImGuiTableBgTarget_
    // DEBUG: {
    // DEBUG:     ImGuiTableBgTarget_None                     = 0,
    // DEBUG:     ImGuiTableBgTarget_RowBg0                   = 1,        // Set row background color 0 (generally used for background, automatically set when ImGuiTableFlags_RowBg is used)
    // DEBUG:     ImGuiTableBgTarget_RowBg1                   = 2,        // Set row background color 1 (generally used for selection marking)
    // DEBUG:     ImGuiTableBgTarget_CellBg                   = 3,        // Set cell background color (top-most color)
    // DEBUG: }
    public enum ImGuiTableBgTarget
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1327"/></summary>
        None = 0,
        /// <summary>Set row background color 0 (generally used for background, automatically set when ImGuiTableFlags_RowBg is used).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1328"/></summary>
        RowBg0 = 1,
        /// <summary>Set row background color 1 (generally used for selection marking).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1329"/></summary>
        RowBg1 = 2,
        /// <summary>Set cell background color (top-most color).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1330"/></summary>
        CellBg = 3
    }

    /// <summary>Flags for ImGui::IsWindowFocused().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1334"/></summary>
    // DEBUG: enum ImGuiFocusedFlags_
    // DEBUG: {
    // DEBUG:     ImGuiFocusedFlags_None                          = 0,
    // DEBUG:     ImGuiFocusedFlags_ChildWindows                  = 1 << 0,   // Return true if any children of the window is focused
    // DEBUG:     ImGuiFocusedFlags_RootWindow                    = 1 << 1,   // Test from root window (top most parent of the current hierarchy)
    // DEBUG:     ImGuiFocusedFlags_AnyWindow                     = 1 << 2,   // Return true if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!
    // DEBUG:     ImGuiFocusedFlags_NoPopupHierarchy              = 1 << 3,   // Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)
    // DEBUG:     ImGuiFocusedFlags_DockHierarchy                 = 1 << 4,   // Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)
    // DEBUG:     ImGuiFocusedFlags_RootAndChildWindows           = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows,
    // DEBUG: }
    [Flags]
    public enum ImGuiFocusedFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1336"/></summary>
        None = 0,
        /// <summary>Return true if any children of the window is focused.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1337"/></summary>
        ChildWindows = 1,
        /// <summary>Test from root window (top most parent of the current hierarchy).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1338"/></summary>
        RootWindow = 2,
        /// <summary>Return true if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1339"/></summary>
        AnyWindow = 4,
        /// <summary>Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1340"/></summary>
        NoPopupHierarchy = 8,
        /// <summary>Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1341"/></summary>
        DockHierarchy = 16,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1342"/></summary>
        RootAndChildWindows = 3
    }

    /// <summary>Flags for ImGui::IsItemHovered(), ImGui::IsWindowHovered().<br/>Note: if you are trying to check whether your mouse should be dispatched to Dear ImGui or to your app, you should use 'io.WantCaptureMouse' instead! Please read the FAQ!<br/>Note: windows with the ImGuiWindowFlags_NoInputs flag are ignored by IsWindowHovered() calls.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1348"/></summary>
    // DEBUG: enum ImGuiHoveredFlags_
    // DEBUG: {
    // DEBUG:     ImGuiHoveredFlags_None                          = 0,        // Return true if directly over the item/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.
    // DEBUG:     ImGuiHoveredFlags_ChildWindows                  = 1 << 0,   // IsWindowHovered() only: Return true if any children of the window is hovered
    // DEBUG:     ImGuiHoveredFlags_RootWindow                    = 1 << 1,   // IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)
    // DEBUG:     ImGuiHoveredFlags_AnyWindow                     = 1 << 2,   // IsWindowHovered() only: Return true if any window is hovered
    // DEBUG:     ImGuiHoveredFlags_NoPopupHierarchy              = 1 << 3,   // IsWindowHovered() only: Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)
    // DEBUG:     ImGuiHoveredFlags_DockHierarchy                 = 1 << 4,   // IsWindowHovered() only: Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)
    // DEBUG:     ImGuiHoveredFlags_AllowWhenBlockedByPopup       = 1 << 5,   // Return true even if a popup window is normally blocking access to this item/window
    // DEBUG:     //ImGuiHoveredFlags_AllowWhenBlockedByModal     = 1 << 6,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.
    // DEBUG:     ImGuiHoveredFlags_AllowWhenBlockedByActiveItem  = 1 << 7,   // Return true even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.
    // DEBUG:     ImGuiHoveredFlags_AllowWhenOverlappedByItem     = 1 << 8,   // IsItemHovered() only: Return true even if the item uses AllowOverlap mode and is overlapped by another hoverable item.
    // DEBUG:     ImGuiHoveredFlags_AllowWhenOverlappedByWindow   = 1 << 9,   // IsItemHovered() only: Return true even if the position is obstructed or overlapped by another window.
    // DEBUG:     ImGuiHoveredFlags_AllowWhenDisabled             = 1 << 10,  // IsItemHovered() only: Return true even if the item is disabled
    // DEBUG:     ImGuiHoveredFlags_NoNavOverride                 = 1 << 11,  // IsItemHovered() only: Disable using gamepad/keyboard navigation state when active, always query mouse
    // DEBUG:     ImGuiHoveredFlags_AllowWhenOverlapped           = ImGuiHoveredFlags_AllowWhenOverlappedByItem | ImGuiHoveredFlags_AllowWhenOverlappedByWindow,
    // DEBUG:     ImGuiHoveredFlags_RectOnly                      = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped,
    // DEBUG:     ImGuiHoveredFlags_RootAndChildWindows           = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows,
    // DEBUG: 
    // DEBUG:     // Tooltips mode
    // DEBUG:     // - typically used in IsItemHovered() + SetTooltip() sequence.
    // DEBUG:     // - this is a shortcut to pull flags from 'style.HoverFlagsForTooltipMouse' or 'style.HoverFlagsForTooltipNav' where you can reconfigure desired behavior.
    // DEBUG:     //   e.g. 'TooltipHoveredFlagsForMouse' defaults to 'ImGuiHoveredFlags_Stationary | ImGuiHoveredFlags_DelayShort'.
    // DEBUG:     // - for frequently actioned or hovered items providing a tooltip, you want may to use ImGuiHoveredFlags_ForTooltip (stationary + delay) so the tooltip doesn't show too often.
    // DEBUG:     // - for items which main purpose is to be hovered, or items with low affordance, or in less consistent apps, prefer no delay or shorter delay.
    // DEBUG:     ImGuiHoveredFlags_ForTooltip                    = 1 << 12,  // Shortcut for standard flags when using IsItemHovered() + SetTooltip() sequence.
    // DEBUG: 
    // DEBUG:     // (Advanced) Mouse Hovering delays.
    // DEBUG:     // - generally you can use ImGuiHoveredFlags_ForTooltip to use application-standardized flags.
    // DEBUG:     // - use those if you need specific overrides.
    // DEBUG:     ImGuiHoveredFlags_Stationary                    = 1 << 13,  // Require mouse to be stationary for style.HoverStationaryDelay (~0.15 sec) _at least one time_. After this, can move on same item/window. Using the stationary test tends to reduces the need for a long delay.
    // DEBUG:     ImGuiHoveredFlags_DelayNone                     = 1 << 14,  // IsItemHovered() only: Return true immediately (default). As this is the default you generally ignore this.
    // DEBUG:     ImGuiHoveredFlags_DelayShort                    = 1 << 15,  // IsItemHovered() only: Return true after style.HoverDelayShort elapsed (~0.15 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item).
    // DEBUG:     ImGuiHoveredFlags_DelayNormal                   = 1 << 16,  // IsItemHovered() only: Return true after style.HoverDelayNormal elapsed (~0.40 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item).
    // DEBUG:     ImGuiHoveredFlags_NoSharedDelay                 = 1 << 17,  // IsItemHovered() only: Disable shared delay system where moving from one item to the next keeps the previous timer for a short time (standard for tooltips with long delays)
    // DEBUG: }
    [Flags]
    public enum ImGuiHoveredFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1350"/></summary>
        None = 0,
        /// <summary>IsWindowHovered() only: Return true if any children of the window is hovered.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1351"/></summary>
        ChildWindows = 1,
        /// <summary>IsWindowHovered() only: Test from root window (top most parent of the current hierarchy).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1352"/></summary>
        RootWindow = 2,
        /// <summary>IsWindowHovered() only: Return true if any window is hovered.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1353"/></summary>
        AnyWindow = 4,
        /// <summary>IsWindowHovered() only: Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1354"/></summary>
        NoPopupHierarchy = 8,
        /// <summary>IsWindowHovered() only: Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1355"/></summary>
        DockHierarchy = 16,
        /// <summary>Return true even if a popup window is normally blocking access to this item/window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1356"/></summary>
        AllowWhenBlockedByPopup = 32,
        /// <summary>Return true even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1358"/></summary>
        AllowWhenBlockedByActiveItem = 128,
        /// <summary>IsItemHovered() only: Return true even if the item uses AllowOverlap mode and is overlapped by another hoverable item.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1359"/></summary>
        AllowWhenOverlappedByItem = 256,
        /// <summary>IsItemHovered() only: Return true even if the position is obstructed or overlapped by another window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1360"/></summary>
        AllowWhenOverlappedByWindow = 512,
        /// <summary>IsItemHovered() only: Return true even if the item is disabled.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1361"/></summary>
        AllowWhenDisabled = 1024,
        /// <summary>IsItemHovered() only: Disable using gamepad/keyboard navigation state when active, always query mouse.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1362"/></summary>
        NoNavOverride = 2048,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1363"/></summary>
        AllowWhenOverlapped = 768,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1364"/></summary>
        RectOnly = 928,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1365"/></summary>
        RootAndChildWindows = 3,
        /// <summary>Shortcut for standard flags when using IsItemHovered() + SetTooltip() sequence.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1373"/></summary>
        ForTooltip = 4096,
        /// <summary>Require mouse to be stationary for style.HoverStationaryDelay (~0.15 sec) _at least one time_. After this, can move on same item/window. Using the stationary test tends to reduces the need for a long delay.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1378"/></summary>
        Stationary = 8192,
        /// <summary>IsItemHovered() only: Return true immediately (default). As this is the default you generally ignore this.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1379"/></summary>
        DelayNone = 16384,
        /// <summary>IsItemHovered() only: Return true after style.HoverDelayShort elapsed (~0.15 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1380"/></summary>
        DelayShort = 32768,
        /// <summary>IsItemHovered() only: Return true after style.HoverDelayNormal elapsed (~0.40 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1381"/></summary>
        DelayNormal = 65536,
        /// <summary>IsItemHovered() only: Disable shared delay system where moving from one item to the next keeps the previous timer for a short time (standard for tooltips with long delays).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1382"/></summary>
        NoSharedDelay = 131072
    }

    /// <summary>Flags for ImGui::DockSpace(), shared/inherited by child nodes.<br/>(Some flags can be applied to individual nodes directly).<br/>FIXME-DOCK: Also see ImGuiDockNodeFlagsPrivate_ which may involve using the WIP and internal DockBuilder api.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1388"/></summary>
    // DEBUG: enum ImGuiDockNodeFlags_
    // DEBUG: {
    // DEBUG:     ImGuiDockNodeFlags_None                         = 0,
    // DEBUG:     ImGuiDockNodeFlags_KeepAliveOnly                = 1 << 0,   //       // Don't display the dockspace node but keep it alive. Windows docked into this dockspace node won't be undocked.
    // DEBUG:     //ImGuiDockNodeFlags_NoCentralNode              = 1 << 1,   //       // Disable Central Node (the node which can stay empty)
    // DEBUG:     ImGuiDockNodeFlags_NoDockingOverCentralNode     = 1 << 2,   //       // Disable docking over the Central Node, which will be always kept empty.
    // DEBUG:     ImGuiDockNodeFlags_PassthruCentralNode          = 1 << 3,   //       // Enable passthru dockspace: 1) DockSpace() will render a ImGuiCol_WindowBg background covering everything excepted the Central Node when empty. Meaning the host window should probably use SetNextWindowBgAlpha(0.0f) prior to Begin() when using this. 2) When Central Node is empty: let inputs pass-through + won't display a DockingEmptyBg background. See demo for details.
    // DEBUG:     ImGuiDockNodeFlags_NoDockingSplit               = 1 << 4,   //       // Disable other windows/nodes from splitting this node.
    // DEBUG:     ImGuiDockNodeFlags_NoResize                     = 1 << 5,   // Saved // Disable resizing node using the splitter/separators. Useful with programmatically setup dockspaces.
    // DEBUG:     ImGuiDockNodeFlags_AutoHideTabBar               = 1 << 6,   //       // Tab bar will automatically hide when there is a single window in the dock node.
    // DEBUG:     ImGuiDockNodeFlags_NoUndocking                  = 1 << 7,   //       // Disable undocking this node.
    // DEBUG: 
    // DEBUG: #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    // DEBUG:     ImGuiDockNodeFlags_NoSplit                      = ImGuiDockNodeFlags_NoDockingSplit, // Renamed in 1.90
    // DEBUG:     ImGuiDockNodeFlags_NoDockingInCentralNode       = ImGuiDockNodeFlags_NoDockingOverCentralNode, // Renamed in 1.90
    // DEBUG: #endif
    // DEBUG: }
    [Flags]
    public enum ImGuiDockNodeFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1390"/></summary>
        None = 0,
        /// <summary>Don't display the dockspace node but keep it alive. Windows docked into this dockspace node won't be undocked.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1391"/></summary>
        KeepAliveOnly = 1,
        /// <summary>Disable docking over the Central Node, which will be always kept empty.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1393"/></summary>
        NoDockingOverCentralNode = 4,
        /// <summary>Enable passthru dockspace: 1) DockSpace() will render a ImGuiCol_WindowBg background covering everything excepted the Central Node when empty. Meaning the host window should probably use SetNextWindowBgAlpha(0.0f) prior to Begin() when using this. 2) When Central Node is empty: let inputs pass-through + won't display a DockingEmptyBg background. See demo for details.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1394"/></summary>
        PassthruCentralNode = 8,
        /// <summary>Disable other windows/nodes from splitting this node.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1395"/></summary>
        NoDockingSplit = 16,
        /// <summary>Saved.<br/>Disable resizing node using the splitter/separators. Useful with programmatically setup dockspaces.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1396"/></summary>
        NoResize = 32,
        /// <summary>Tab bar will automatically hide when there is a single window in the dock node.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1397"/></summary>
        AutoHideTabBar = 64,
        /// <summary>Disable undocking this node.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1398"/></summary>
        NoUndocking = 128
    }

    /// <summary>Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1407"/></summary>
    // DEBUG: enum ImGuiDragDropFlags_
    // DEBUG: {
    // DEBUG:     ImGuiDragDropFlags_None                         = 0,
    // DEBUG:     // BeginDragDropSource() flags
    // DEBUG:     ImGuiDragDropFlags_SourceNoPreviewTooltip       = 1 << 0,   // Disable preview tooltip. By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disables this behavior.
    // DEBUG:     ImGuiDragDropFlags_SourceNoDisableHover         = 1 << 1,   // By default, when dragging we clear data so that IsItemHovered() will return false, to avoid subsequent user code submitting tooltips. This flag disables this behavior so you can still call IsItemHovered() on the source item.
    // DEBUG:     ImGuiDragDropFlags_SourceNoHoldToOpenOthers     = 1 << 2,   // Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.
    // DEBUG:     ImGuiDragDropFlags_SourceAllowNullID            = 1 << 3,   // Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.
    // DEBUG:     ImGuiDragDropFlags_SourceExtern                 = 1 << 4,   // External source (from outside of dear imgui), won't attempt to read current item/window info. Will always return true. Only one Extern source can be active simultaneously.
    // DEBUG:     ImGuiDragDropFlags_SourceAutoExpirePayload      = 1 << 5,   // Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)
    // DEBUG:     // AcceptDragDropPayload() flags
    // DEBUG:     ImGuiDragDropFlags_AcceptBeforeDelivery         = 1 << 10,  // AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.
    // DEBUG:     ImGuiDragDropFlags_AcceptNoDrawDefaultRect      = 1 << 11,  // Do not draw the default highlight rectangle when hovering over target.
    // DEBUG:     ImGuiDragDropFlags_AcceptNoPreviewTooltip       = 1 << 12,  // Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.
    // DEBUG:     ImGuiDragDropFlags_AcceptPeekOnly               = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect, // For peeking ahead and inspecting the payload before delivery.
    // DEBUG: }
    [Flags]
    public enum ImGuiDragDropFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1409"/></summary>
        None = 0,
        /// <summary>Disable preview tooltip. By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disables this behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1411"/></summary>
        SourceNoPreviewTooltip = 1,
        /// <summary>By default, when dragging we clear data so that IsItemHovered() will return false, to avoid subsequent user code submitting tooltips. This flag disables this behavior so you can still call IsItemHovered() on the source item.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1412"/></summary>
        SourceNoDisableHover = 2,
        /// <summary>Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1413"/></summary>
        SourceNoHoldToOpenOthers = 4,
        /// <summary>Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1414"/></summary>
        SourceAllowNullID = 8,
        /// <summary>External source (from outside of dear imgui), won't attempt to read current item/window info. Will always return true. Only one Extern source can be active simultaneously.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1415"/></summary>
        SourceExtern = 16,
        /// <summary>Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1416"/></summary>
        SourceAutoExpirePayload = 32,
        /// <summary>AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1418"/></summary>
        AcceptBeforeDelivery = 1024,
        /// <summary>Do not draw the default highlight rectangle when hovering over target.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1419"/></summary>
        AcceptNoDrawDefaultRect = 2048,
        /// <summary>Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1420"/></summary>
        AcceptNoPreviewTooltip = 4096,
        /// <summary>For peeking ahead and inspecting the payload before delivery.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1421"/></summary>
        AcceptPeekOnly = 3072
    }

    /// <summary>A primary data type.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1429"/></summary>
    // DEBUG: enum ImGuiDataType_
    // DEBUG: {
    // DEBUG:     ImGuiDataType_S8,       // signed char / char (with sensible compilers)
    // DEBUG:     ImGuiDataType_U8,       // unsigned char
    // DEBUG:     ImGuiDataType_S16,      // short
    // DEBUG:     ImGuiDataType_U16,      // unsigned short
    // DEBUG:     ImGuiDataType_S32,      // int
    // DEBUG:     ImGuiDataType_U32,      // unsigned int
    // DEBUG:     ImGuiDataType_S64,      // long long / __int64
    // DEBUG:     ImGuiDataType_U64,      // unsigned long long / unsigned __int64
    // DEBUG:     ImGuiDataType_Float,    // float
    // DEBUG:     ImGuiDataType_Double,   // double
    // DEBUG:     ImGuiDataType_COUNT
    // DEBUG: }
    public enum ImGuiDataType
    {
        /// <summary>Signed char / char (with sensible compilers).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1431"/></summary>
        S8 = 0,
        /// <summary>Unsigned char.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1432"/></summary>
        U8 = 1,
        /// <summary>Short.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1433"/></summary>
        S16 = 2,
        /// <summary>Unsigned short.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1434"/></summary>
        U16 = 3,
        /// <summary>Int.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1435"/></summary>
        S32 = 4,
        /// <summary>Unsigned int.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1436"/></summary>
        U32 = 5,
        /// <summary>Long long / __int64.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1437"/></summary>
        S64 = 6,
        /// <summary>Unsigned long long / unsigned __int64.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1438"/></summary>
        U64 = 7,
        /// <summary>Float.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1439"/></summary>
        Float = 8,
        /// <summary>Double.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1440"/></summary>
        Double = 9,
    }

    /// <summary>A cardinal direction.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1445"/></summary>
    // DEBUG: enum ImGuiDir_
    // DEBUG: {
    // DEBUG:     ImGuiDir_None    = -1,
    // DEBUG:     ImGuiDir_Left    = 0,
    // DEBUG:     ImGuiDir_Right   = 1,
    // DEBUG:     ImGuiDir_Up      = 2,
    // DEBUG:     ImGuiDir_Down    = 3,
    // DEBUG:     ImGuiDir_COUNT
    // DEBUG: }
    public enum ImGuiDir
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1447"/></summary>
        None = -1,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1448"/></summary>
        Left = 0,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1449"/></summary>
        Right = 1,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1450"/></summary>
        Up = 2,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1451"/></summary>
        Down = 3,
    }

    /// <summary>A sorting direction.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1456"/></summary>
    // DEBUG: enum ImGuiSortDirection_
    // DEBUG: {
    // DEBUG:     ImGuiSortDirection_None         = 0,
    // DEBUG:     ImGuiSortDirection_Ascending    = 1,    // Ascending = 0->9, A->Z etc.
    // DEBUG:     ImGuiSortDirection_Descending   = 2     // Descending = 9->0, Z->A etc.
    // DEBUG: }
    public enum ImGuiSortDirection
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1458"/></summary>
        None = 0,
        /// <summary>Ascending = 0-&gt;9, A-&gt;Z etc.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1459"/></summary>
        Ascending = 1,
        /// <summary>Descending = 9-&gt;0, Z-&gt;A etc.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1460"/></summary>
        Descending = 2
    }

    /// <summary>Configuration flags stored in io.ConfigFlags. Set by user/application.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1610"/></summary>
    // DEBUG: enum ImGuiConfigFlags_
    // DEBUG: {
    // DEBUG:     ImGuiConfigFlags_None                   = 0,
    // DEBUG:     ImGuiConfigFlags_NavEnableKeyboard      = 1 << 0,   // Master keyboard navigation enable flag. Enable full Tabbing + directional arrows + space/enter to activate.
    // DEBUG:     ImGuiConfigFlags_NavEnableGamepad       = 1 << 1,   // Master gamepad navigation enable flag. Backend also needs to set ImGuiBackendFlags_HasGamepad.
    // DEBUG:     ImGuiConfigFlags_NavEnableSetMousePos   = 1 << 2,   // Instruct navigation to move the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=true. If enabled you MUST honor io.WantSetMousePos requests in your backend, otherwise ImGui will react as if the mouse is jumping around back and forth.
    // DEBUG:     ImGuiConfigFlags_NavNoCaptureKeyboard   = 1 << 3,   // Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set.
    // DEBUG:     ImGuiConfigFlags_NoMouse                = 1 << 4,   // Instruct imgui to clear mouse position/buttons in NewFrame(). This allows ignoring the mouse information set by the backend.
    // DEBUG:     ImGuiConfigFlags_NoMouseCursorChange    = 1 << 5,   // Instruct backend to not alter mouse cursor shape and visibility. Use if the backend cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.
    // DEBUG: 
    // DEBUG:     // [BETA] Docking
    // DEBUG:     ImGuiConfigFlags_DockingEnable          = 1 << 6,   // Docking enable flags.
    // DEBUG: 
    // DEBUG:     // [BETA] Viewports
    // DEBUG:     // When using viewports it is recommended that your default value for ImGuiCol_WindowBg is opaque (Alpha=1.0) so transition to a viewport won't be noticeable.
    // DEBUG:     ImGuiConfigFlags_ViewportsEnable        = 1 << 10,  // Viewport enable flags (require both ImGuiBackendFlags_PlatformHasViewports + ImGuiBackendFlags_RendererHasViewports set by the respective backends)
    // DEBUG:     ImGuiConfigFlags_DpiEnableScaleViewports= 1 << 14,  // [BETA: Don't use] FIXME-DPI: Reposition and resize imgui windows when the DpiScale of a viewport changed (mostly useful for the main viewport hosting other window). Note that resizing the main window itself is up to your application.
    // DEBUG:     ImGuiConfigFlags_DpiEnableScaleFonts    = 1 << 15,  // [BETA: Don't use] FIXME-DPI: Request bitmap-scaled fonts to match DpiScale. This is a very low-quality workaround. The correct way to handle DPI is _currently_ to replace the atlas and/or fonts in the Platform_OnChangedViewport callback, but this is all early work in progress.
    // DEBUG: 
    // DEBUG:     // User storage (to allow your backend/engine to communicate to code that may be shared between multiple projects. Those flags are NOT used by core Dear ImGui)
    // DEBUG:     ImGuiConfigFlags_IsSRGB                 = 1 << 20,  // Application is SRGB-aware.
    // DEBUG:     ImGuiConfigFlags_IsTouchScreen          = 1 << 21,  // Application is using a touch screen instead of a mouse.
    // DEBUG: }
    [Flags]
    public enum ImGuiConfigFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1612"/></summary>
        None = 0,
        /// <summary>Master keyboard navigation enable flag. Enable full Tabbing + directional arrows + space/enter to activate.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1613"/></summary>
        NavEnableKeyboard = 1,
        /// <summary>Master gamepad navigation enable flag. Backend also needs to set ImGuiBackendFlags_HasGamepad.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1614"/></summary>
        NavEnableGamepad = 2,
        /// <summary>Instruct navigation to move the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=true. If enabled you MUST honor io.WantSetMousePos requests in your backend, otherwise ImGui will react as if the mouse is jumping around back and forth.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1615"/></summary>
        NavEnableSetMousePos = 4,
        /// <summary>Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1616"/></summary>
        NavNoCaptureKeyboard = 8,
        /// <summary>Instruct imgui to clear mouse position/buttons in NewFrame(). This allows ignoring the mouse information set by the backend.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1617"/></summary>
        NoMouse = 16,
        /// <summary>Instruct backend to not alter mouse cursor shape and visibility. Use if the backend cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1618"/></summary>
        NoMouseCursorChange = 32,
        /// <summary>Docking enable flags.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1621"/></summary>
        DockingEnable = 64,
        /// <summary>Viewport enable flags (require both ImGuiBackendFlags_PlatformHasViewports + ImGuiBackendFlags_RendererHasViewports set by the respective backends).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1625"/></summary>
        ViewportsEnable = 1024,
        /// <summary>[BETA: Don't use] FIXME-DPI: Reposition and resize imgui windows when the DpiScale of a viewport changed (mostly useful for the main viewport hosting other window). Note that resizing the main window itself is up to your application.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1626"/></summary>
        DpiEnableScaleViewports = 16384,
        /// <summary>[BETA: Don't use] FIXME-DPI: Request bitmap-scaled fonts to match DpiScale. This is a very low-quality workaround. The correct way to handle DPI is _currently_ to replace the atlas and/or fonts in the Platform_OnChangedViewport callback, but this is all early work in progress.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1627"/></summary>
        DpiEnableScaleFonts = 32768,
        /// <summary>Application is SRGB-aware.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1630"/></summary>
        IsSRGB = 1048576,
        /// <summary>Application is using a touch screen instead of a mouse.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1631"/></summary>
        IsTouchScreen = 2097152
    }

    /// <summary>Backend capabilities flags stored in io.BackendFlags. Set by imgui_impl_xxx or custom backend.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1635"/></summary>
    // DEBUG: enum ImGuiBackendFlags_
    // DEBUG: {
    // DEBUG:     ImGuiBackendFlags_None                  = 0,
    // DEBUG:     ImGuiBackendFlags_HasGamepad            = 1 << 0,   // Backend Platform supports gamepad and currently has one connected.
    // DEBUG:     ImGuiBackendFlags_HasMouseCursors       = 1 << 1,   // Backend Platform supports honoring GetMouseCursor() value to change the OS cursor shape.
    // DEBUG:     ImGuiBackendFlags_HasSetMousePos        = 1 << 2,   // Backend Platform supports io.WantSetMousePos requests to reposition the OS mouse position (only used if ImGuiConfigFlags_NavEnableSetMousePos is set).
    // DEBUG:     ImGuiBackendFlags_RendererHasVtxOffset  = 1 << 3,   // Backend Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bit indices.
    // DEBUG: 
    // DEBUG:     // [BETA] Viewports
    // DEBUG:     ImGuiBackendFlags_PlatformHasViewports  = 1 << 10,  // Backend Platform supports multiple viewports.
    // DEBUG:     ImGuiBackendFlags_HasMouseHoveredViewport=1 << 11,  // Backend Platform supports calling io.AddMouseViewportEvent() with the viewport under the mouse. IF POSSIBLE, ignore viewports with the ImGuiViewportFlags_NoInputs flag (Win32 backend, GLFW 3.30+ backend can do this, SDL backend cannot). If this cannot be done, Dear ImGui needs to use a flawed heuristic to find the viewport under.
    // DEBUG:     ImGuiBackendFlags_RendererHasViewports  = 1 << 12,  // Backend Renderer supports multiple viewports.
    // DEBUG: }
    [Flags]
    public enum ImGuiBackendFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1637"/></summary>
        None = 0,
        /// <summary>Backend Platform supports gamepad and currently has one connected.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1638"/></summary>
        HasGamepad = 1,
        /// <summary>Backend Platform supports honoring GetMouseCursor() value to change the OS cursor shape.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1639"/></summary>
        HasMouseCursors = 2,
        /// <summary>Backend Platform supports io.WantSetMousePos requests to reposition the OS mouse position (only used if ImGuiConfigFlags_NavEnableSetMousePos is set).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1640"/></summary>
        HasSetMousePos = 4,
        /// <summary>Backend Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bit indices.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1641"/></summary>
        RendererHasVtxOffset = 8,
        /// <summary>Backend Platform supports multiple viewports.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1644"/></summary>
        PlatformHasViewports = 1024,
        /// <summary>Backend Platform supports calling io.AddMouseViewportEvent() with the viewport under the mouse. IF POSSIBLE, ignore viewports with the ImGuiViewportFlags_NoInputs flag (Win32 backend, GLFW 3.30+ backend can do this, SDL backend cannot). If this cannot be done, Dear ImGui needs to use a flawed heuristic to find the viewport under.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1645"/></summary>
        HasMouseHoveredViewport = 2048,
        /// <summary>Backend Renderer supports multiple viewports.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1646"/></summary>
        RendererHasViewports = 4096
    }

    /// <summary>Enumeration for PushStyleColor() / PopStyleColor().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1650"/></summary>
    // DEBUG: enum ImGuiCol_
    // DEBUG: {
    // DEBUG:     ImGuiCol_Text,
    // DEBUG:     ImGuiCol_TextDisabled,
    // DEBUG:     ImGuiCol_WindowBg,              // Background of normal windows
    // DEBUG:     ImGuiCol_ChildBg,               // Background of child windows
    // DEBUG:     ImGuiCol_PopupBg,               // Background of popups, menus, tooltips windows
    // DEBUG:     ImGuiCol_Border,
    // DEBUG:     ImGuiCol_BorderShadow,
    // DEBUG:     ImGuiCol_FrameBg,               // Background of checkbox, radio button, plot, slider, text input
    // DEBUG:     ImGuiCol_FrameBgHovered,
    // DEBUG:     ImGuiCol_FrameBgActive,
    // DEBUG:     ImGuiCol_TitleBg,
    // DEBUG:     ImGuiCol_TitleBgActive,
    // DEBUG:     ImGuiCol_TitleBgCollapsed,
    // DEBUG:     ImGuiCol_MenuBarBg,
    // DEBUG:     ImGuiCol_ScrollbarBg,
    // DEBUG:     ImGuiCol_ScrollbarGrab,
    // DEBUG:     ImGuiCol_ScrollbarGrabHovered,
    // DEBUG:     ImGuiCol_ScrollbarGrabActive,
    // DEBUG:     ImGuiCol_CheckMark,
    // DEBUG:     ImGuiCol_SliderGrab,
    // DEBUG:     ImGuiCol_SliderGrabActive,
    // DEBUG:     ImGuiCol_Button,
    // DEBUG:     ImGuiCol_ButtonHovered,
    // DEBUG:     ImGuiCol_ButtonActive,
    // DEBUG:     ImGuiCol_Header,                // Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem
    // DEBUG:     ImGuiCol_HeaderHovered,
    // DEBUG:     ImGuiCol_HeaderActive,
    // DEBUG:     ImGuiCol_Separator,
    // DEBUG:     ImGuiCol_SeparatorHovered,
    // DEBUG:     ImGuiCol_SeparatorActive,
    // DEBUG:     ImGuiCol_ResizeGrip,            // Resize grip in lower-right and lower-left corners of windows.
    // DEBUG:     ImGuiCol_ResizeGripHovered,
    // DEBUG:     ImGuiCol_ResizeGripActive,
    // DEBUG:     ImGuiCol_Tab,                   // TabItem in a TabBar
    // DEBUG:     ImGuiCol_TabHovered,
    // DEBUG:     ImGuiCol_TabActive,
    // DEBUG:     ImGuiCol_TabUnfocused,
    // DEBUG:     ImGuiCol_TabUnfocusedActive,
    // DEBUG:     ImGuiCol_DockingPreview,        // Preview overlay color when about to docking something
    // DEBUG:     ImGuiCol_DockingEmptyBg,        // Background color for empty node (e.g. CentralNode with no window docked into it)
    // DEBUG:     ImGuiCol_PlotLines,
    // DEBUG:     ImGuiCol_PlotLinesHovered,
    // DEBUG:     ImGuiCol_PlotHistogram,
    // DEBUG:     ImGuiCol_PlotHistogramHovered,
    // DEBUG:     ImGuiCol_TableHeaderBg,         // Table header background
    // DEBUG:     ImGuiCol_TableBorderStrong,     // Table outer and header borders (prefer using Alpha=1.0 here)
    // DEBUG:     ImGuiCol_TableBorderLight,      // Table inner borders (prefer using Alpha=1.0 here)
    // DEBUG:     ImGuiCol_TableRowBg,            // Table row background (even rows)
    // DEBUG:     ImGuiCol_TableRowBgAlt,         // Table row background (odd rows)
    // DEBUG:     ImGuiCol_TextSelectedBg,
    // DEBUG:     ImGuiCol_DragDropTarget,        // Rectangle highlighting a drop target
    // DEBUG:     ImGuiCol_NavHighlight,          // Gamepad/keyboard: current highlighted item
    // DEBUG:     ImGuiCol_NavWindowingHighlight, // Highlight window when using CTRL+TAB
    // DEBUG:     ImGuiCol_NavWindowingDimBg,     // Darken/colorize entire screen behind the CTRL+TAB window list, when active
    // DEBUG:     ImGuiCol_ModalWindowDimBg,      // Darken/colorize entire screen behind a modal window, when one is active
    // DEBUG:     ImGuiCol_COUNT
    // DEBUG: }
    public enum ImGuiCol
    {
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1652"/></summary>
        Text = 0,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1653"/></summary>
        TextDisabled = 1,
        /// <summary>Background of normal windows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1654"/></summary>
        WindowBg = 2,
        /// <summary>Background of child windows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1655"/></summary>
        ChildBg = 3,
        /// <summary>Background of popups, menus, tooltips windows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1656"/></summary>
        PopupBg = 4,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1657"/></summary>
        Border = 5,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1658"/></summary>
        BorderShadow = 6,
        /// <summary>Background of checkbox, radio button, plot, slider, text input.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1659"/></summary>
        FrameBg = 7,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1660"/></summary>
        FrameBgHovered = 8,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1661"/></summary>
        FrameBgActive = 9,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1662"/></summary>
        TitleBg = 10,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1663"/></summary>
        TitleBgActive = 11,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1664"/></summary>
        TitleBgCollapsed = 12,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1665"/></summary>
        MenuBarBg = 13,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1666"/></summary>
        ScrollbarBg = 14,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1667"/></summary>
        ScrollbarGrab = 15,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1668"/></summary>
        ScrollbarGrabHovered = 16,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1669"/></summary>
        ScrollbarGrabActive = 17,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1670"/></summary>
        CheckMark = 18,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1671"/></summary>
        SliderGrab = 19,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1672"/></summary>
        SliderGrabActive = 20,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1673"/></summary>
        Button = 21,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1674"/></summary>
        ButtonHovered = 22,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1675"/></summary>
        ButtonActive = 23,
        /// <summary>Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1676"/></summary>
        Header = 24,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1677"/></summary>
        HeaderHovered = 25,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1678"/></summary>
        HeaderActive = 26,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1679"/></summary>
        Separator = 27,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1680"/></summary>
        SeparatorHovered = 28,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1681"/></summary>
        SeparatorActive = 29,
        /// <summary>Resize grip in lower-right and lower-left corners of windows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1682"/></summary>
        ResizeGrip = 30,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1683"/></summary>
        ResizeGripHovered = 31,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1684"/></summary>
        ResizeGripActive = 32,
        /// <summary>TabItem in a TabBar.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1685"/></summary>
        Tab = 33,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1686"/></summary>
        TabHovered = 34,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1687"/></summary>
        TabActive = 35,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1688"/></summary>
        TabUnfocused = 36,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1689"/></summary>
        TabUnfocusedActive = 37,
        /// <summary>Preview overlay color when about to docking something.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1690"/></summary>
        DockingPreview = 38,
        /// <summary>Background color for empty node (e.g. CentralNode with no window docked into it).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1691"/></summary>
        DockingEmptyBg = 39,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1692"/></summary>
        PlotLines = 40,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1693"/></summary>
        PlotLinesHovered = 41,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1694"/></summary>
        PlotHistogram = 42,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1695"/></summary>
        PlotHistogramHovered = 43,
        /// <summary>Table header background.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1696"/></summary>
        TableHeaderBg = 44,
        /// <summary>Table outer and header borders (prefer using Alpha=1.0 here).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1697"/></summary>
        TableBorderStrong = 45,
        /// <summary>Table inner borders (prefer using Alpha=1.0 here).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1698"/></summary>
        TableBorderLight = 46,
        /// <summary>Table row background (even rows).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1699"/></summary>
        TableRowBg = 47,
        /// <summary>Table row background (odd rows).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1700"/></summary>
        TableRowBgAlt = 48,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1701"/></summary>
        TextSelectedBg = 49,
        /// <summary>Rectangle highlighting a drop target.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1702"/></summary>
        DragDropTarget = 50,
        /// <summary>Gamepad/keyboard: current highlighted item.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1703"/></summary>
        NavHighlight = 51,
        /// <summary>Highlight window when using CTRL+TAB.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1704"/></summary>
        NavWindowingHighlight = 52,
        /// <summary>Darken/colorize entire screen behind the CTRL+TAB window list, when active.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1705"/></summary>
        NavWindowingDimBg = 53,
        /// <summary>Darken/colorize entire screen behind a modal window, when one is active.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1706"/></summary>
        ModalWindowDimBg = 54,
    }

    /// <summary>Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure.<br/>- The enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code.<br/>During initialization or between frames, feel free to just poke into ImGuiStyle directly.<br/>- Tip: Use your programming IDE navigation facilities on the names in the _second column_ below to find the actual members and their description.<br/>In Visual Studio IDE: CTRL+comma ("Edit.GoToAll") can follow symbols in comments, whereas CTRL+F12 ("Edit.GoToImplementation") cannot.<br/>With Visual Assist installed: ALT+G ("VAssistX.GoToImplementation") can also follow symbols in comments.<br/>- When changing this enum, you need to update the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1717"/></summary>
    // DEBUG: enum ImGuiStyleVar_
    // DEBUG: {
    // DEBUG:     // Enum name --------------------- // Member in ImGuiStyle structure (see ImGuiStyle for descriptions)
    // DEBUG:     ImGuiStyleVar_Alpha,               // float     Alpha
    // DEBUG:     ImGuiStyleVar_DisabledAlpha,       // float     DisabledAlpha
    // DEBUG:     ImGuiStyleVar_WindowPadding,       // ImVec2    WindowPadding
    // DEBUG:     ImGuiStyleVar_WindowRounding,      // float     WindowRounding
    // DEBUG:     ImGuiStyleVar_WindowBorderSize,    // float     WindowBorderSize
    // DEBUG:     ImGuiStyleVar_WindowMinSize,       // ImVec2    WindowMinSize
    // DEBUG:     ImGuiStyleVar_WindowTitleAlign,    // ImVec2    WindowTitleAlign
    // DEBUG:     ImGuiStyleVar_ChildRounding,       // float     ChildRounding
    // DEBUG:     ImGuiStyleVar_ChildBorderSize,     // float     ChildBorderSize
    // DEBUG:     ImGuiStyleVar_PopupRounding,       // float     PopupRounding
    // DEBUG:     ImGuiStyleVar_PopupBorderSize,     // float     PopupBorderSize
    // DEBUG:     ImGuiStyleVar_FramePadding,        // ImVec2    FramePadding
    // DEBUG:     ImGuiStyleVar_FrameRounding,       // float     FrameRounding
    // DEBUG:     ImGuiStyleVar_FrameBorderSize,     // float     FrameBorderSize
    // DEBUG:     ImGuiStyleVar_ItemSpacing,         // ImVec2    ItemSpacing
    // DEBUG:     ImGuiStyleVar_ItemInnerSpacing,    // ImVec2    ItemInnerSpacing
    // DEBUG:     ImGuiStyleVar_IndentSpacing,       // float     IndentSpacing
    // DEBUG:     ImGuiStyleVar_CellPadding,         // ImVec2    CellPadding
    // DEBUG:     ImGuiStyleVar_ScrollbarSize,       // float     ScrollbarSize
    // DEBUG:     ImGuiStyleVar_ScrollbarRounding,   // float     ScrollbarRounding
    // DEBUG:     ImGuiStyleVar_GrabMinSize,         // float     GrabMinSize
    // DEBUG:     ImGuiStyleVar_GrabRounding,        // float     GrabRounding
    // DEBUG:     ImGuiStyleVar_TabRounding,         // float     TabRounding
    // DEBUG:     ImGuiStyleVar_TabBarBorderSize,    // float     TabBarBorderSize
    // DEBUG:     ImGuiStyleVar_ButtonTextAlign,     // ImVec2    ButtonTextAlign
    // DEBUG:     ImGuiStyleVar_SelectableTextAlign, // ImVec2    SelectableTextAlign
    // DEBUG:     ImGuiStyleVar_SeparatorTextBorderSize,// float  SeparatorTextBorderSize
    // DEBUG:     ImGuiStyleVar_SeparatorTextAlign,  // ImVec2    SeparatorTextAlign
    // DEBUG:     ImGuiStyleVar_SeparatorTextPadding,// ImVec2    SeparatorTextPadding
    // DEBUG:     ImGuiStyleVar_DockingSeparatorSize,// float     DockingSeparatorSize
    // DEBUG:     ImGuiStyleVar_COUNT
    // DEBUG: }
    public enum ImGuiStyleVar
    {
        /// <summary>Float.<br/>Alpha.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1720"/></summary>
        Alpha = 0,
        /// <summary>Float.<br/>DisabledAlpha.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1721"/></summary>
        DisabledAlpha = 1,
        /// <summary>ImVec2.<br/>WindowPadding.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1722"/></summary>
        WindowPadding = 2,
        /// <summary>Float.<br/>WindowRounding.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1723"/></summary>
        WindowRounding = 3,
        /// <summary>Float.<br/>WindowBorderSize.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1724"/></summary>
        WindowBorderSize = 4,
        /// <summary>ImVec2.<br/>WindowMinSize.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1725"/></summary>
        WindowMinSize = 5,
        /// <summary>ImVec2.<br/>WindowTitleAlign.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1726"/></summary>
        WindowTitleAlign = 6,
        /// <summary>Float.<br/>ChildRounding.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1727"/></summary>
        ChildRounding = 7,
        /// <summary>Float.<br/>ChildBorderSize.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1728"/></summary>
        ChildBorderSize = 8,
        /// <summary>Float.<br/>PopupRounding.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1729"/></summary>
        PopupRounding = 9,
        /// <summary>Float.<br/>PopupBorderSize.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1730"/></summary>
        PopupBorderSize = 10,
        /// <summary>ImVec2.<br/>FramePadding.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1731"/></summary>
        FramePadding = 11,
        /// <summary>Float.<br/>FrameRounding.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1732"/></summary>
        FrameRounding = 12,
        /// <summary>Float.<br/>FrameBorderSize.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1733"/></summary>
        FrameBorderSize = 13,
        /// <summary>ImVec2.<br/>ItemSpacing.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1734"/></summary>
        ItemSpacing = 14,
        /// <summary>ImVec2.<br/>ItemInnerSpacing.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1735"/></summary>
        ItemInnerSpacing = 15,
        /// <summary>Float.<br/>IndentSpacing.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1736"/></summary>
        IndentSpacing = 16,
        /// <summary>ImVec2.<br/>CellPadding.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1737"/></summary>
        CellPadding = 17,
        /// <summary>Float.<br/>ScrollbarSize.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1738"/></summary>
        ScrollbarSize = 18,
        /// <summary>Float.<br/>ScrollbarRounding.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1739"/></summary>
        ScrollbarRounding = 19,
        /// <summary>Float.<br/>GrabMinSize.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1740"/></summary>
        GrabMinSize = 20,
        /// <summary>Float.<br/>GrabRounding.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1741"/></summary>
        GrabRounding = 21,
        /// <summary>Float.<br/>TabRounding.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1742"/></summary>
        TabRounding = 22,
        /// <summary>Float.<br/>TabBarBorderSize.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1743"/></summary>
        TabBarBorderSize = 23,
        /// <summary>ImVec2.<br/>ButtonTextAlign.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1744"/></summary>
        ButtonTextAlign = 24,
        /// <summary>ImVec2.<br/>SelectableTextAlign.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1745"/></summary>
        SelectableTextAlign = 25,
        /// <summary>Float.<br/>SeparatorTextBorderSize.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1746"/></summary>
        SeparatorTextBorderSize = 26,
        /// <summary>ImVec2.<br/>SeparatorTextAlign.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1747"/></summary>
        SeparatorTextAlign = 27,
        /// <summary>ImVec2.<br/>SeparatorTextPadding.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1748"/></summary>
        SeparatorTextPadding = 28,
        /// <summary>Float.<br/>DockingSeparatorSize.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1749"/></summary>
        DockingSeparatorSize = 29,
    }

    /// <summary>Flags for InvisibleButton() [extended in imgui_internal.h].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1754"/></summary>
    // DEBUG: enum ImGuiButtonFlags_
    // DEBUG: {
    // DEBUG:     ImGuiButtonFlags_None                   = 0,
    // DEBUG:     ImGuiButtonFlags_MouseButtonLeft        = 1 << 0,   // React on left mouse button (default)
    // DEBUG:     ImGuiButtonFlags_MouseButtonRight       = 1 << 1,   // React on right mouse button
    // DEBUG:     ImGuiButtonFlags_MouseButtonMiddle      = 1 << 2,   // React on center mouse button
    // DEBUG: 
    // DEBUG:     // [Internal]
    // DEBUG:     ImGuiButtonFlags_MouseButtonMask_       = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlags_MouseButtonRight | ImGuiButtonFlags_MouseButtonMiddle,
    // DEBUG:     ImGuiButtonFlags_MouseButtonDefault_    = ImGuiButtonFlags_MouseButtonLeft,
    // DEBUG: }
    [Flags]
    public enum ImGuiButtonFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1756"/></summary>
        None = 0,
        /// <summary>React on left mouse button (default).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1757"/></summary>
        MouseButtonLeft = 1,
        /// <summary>React on right mouse button.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1758"/></summary>
        MouseButtonRight = 2,
        /// <summary>React on center mouse button.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1759"/></summary>
        MouseButtonMiddle = 4,
        /// <summary>[Internal].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1762"/></summary>
        MouseButtonMask = 7,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1763"/></summary>
        MouseButtonDefault = 1
    }

    /// <summary>Flags for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1767"/></summary>
    // DEBUG: enum ImGuiColorEditFlags_
    // DEBUG: {
    // DEBUG:     ImGuiColorEditFlags_None            = 0,
    // DEBUG:     ImGuiColorEditFlags_NoAlpha         = 1 << 1,   //              // ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).
    // DEBUG:     ImGuiColorEditFlags_NoPicker        = 1 << 2,   //              // ColorEdit: disable picker when clicking on color square.
    // DEBUG:     ImGuiColorEditFlags_NoOptions       = 1 << 3,   //              // ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.
    // DEBUG:     ImGuiColorEditFlags_NoSmallPreview  = 1 << 4,   //              // ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs)
    // DEBUG:     ImGuiColorEditFlags_NoInputs        = 1 << 5,   //              // ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square).
    // DEBUG:     ImGuiColorEditFlags_NoTooltip       = 1 << 6,   //              // ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.
    // DEBUG:     ImGuiColorEditFlags_NoLabel         = 1 << 7,   //              // ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).
    // DEBUG:     ImGuiColorEditFlags_NoSidePreview   = 1 << 8,   //              // ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead.
    // DEBUG:     ImGuiColorEditFlags_NoDragDrop      = 1 << 9,   //              // ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.
    // DEBUG:     ImGuiColorEditFlags_NoBorder        = 1 << 10,  //              // ColorButton: disable border (which is enforced by default)
    // DEBUG: 
    // DEBUG:     // User Options (right-click on widget to change some of them).
    // DEBUG:     ImGuiColorEditFlags_AlphaBar        = 1 << 16,  //              // ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.
    // DEBUG:     ImGuiColorEditFlags_AlphaPreview    = 1 << 17,  //              // ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.
    // DEBUG:     ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 18,  //              // ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque.
    // DEBUG:     ImGuiColorEditFlags_HDR             = 1 << 19,  //              // (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).
    // DEBUG:     ImGuiColorEditFlags_DisplayRGB      = 1 << 20,  // [Display]    // ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex.
    // DEBUG:     ImGuiColorEditFlags_DisplayHSV      = 1 << 21,  // [Display]    // "
    // DEBUG:     ImGuiColorEditFlags_DisplayHex      = 1 << 22,  // [Display]    // "
    // DEBUG:     ImGuiColorEditFlags_Uint8           = 1 << 23,  // [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.
    // DEBUG:     ImGuiColorEditFlags_Float           = 1 << 24,  // [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.
    // DEBUG:     ImGuiColorEditFlags_PickerHueBar    = 1 << 25,  // [Picker]     // ColorPicker: bar for Hue, rectangle for Sat/Value.
    // DEBUG:     ImGuiColorEditFlags_PickerHueWheel  = 1 << 26,  // [Picker]     // ColorPicker: wheel for Hue, triangle for Sat/Value.
    // DEBUG:     ImGuiColorEditFlags_InputRGB        = 1 << 27,  // [Input]      // ColorEdit, ColorPicker: input and output data in RGB format.
    // DEBUG:     ImGuiColorEditFlags_InputHSV        = 1 << 28,  // [Input]      // ColorEdit, ColorPicker: input and output data in HSV format.
    // DEBUG: 
    // DEBUG:     // Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to
    // DEBUG:     // override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.
    // DEBUG:     ImGuiColorEditFlags_DefaultOptions_ = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_PickerHueBar,
    // DEBUG: 
    // DEBUG:     // [Internal] Masks
    // DEBUG:     ImGuiColorEditFlags_DisplayMask_    = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_DisplayHex,
    // DEBUG:     ImGuiColorEditFlags_DataTypeMask_   = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,
    // DEBUG:     ImGuiColorEditFlags_PickerMask_     = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_PickerHueBar,
    // DEBUG:     ImGuiColorEditFlags_InputMask_      = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_InputHSV,
    // DEBUG: 
    // DEBUG:     // Obsolete names
    // DEBUG:     //ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiColorEditFlags_DisplayHSV, ImGuiColorEditFlags_HEX = ImGuiColorEditFlags_DisplayHex  // [renamed in 1.69]
    // DEBUG: }
    [Flags]
    public enum ImGuiColorEditFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1769"/></summary>
        None = 0,
        /// <summary>ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1770"/></summary>
        NoAlpha = 2,
        /// <summary>ColorEdit: disable picker when clicking on color square.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1771"/></summary>
        NoPicker = 4,
        /// <summary>ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1772"/></summary>
        NoOptions = 8,
        /// <summary>ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1773"/></summary>
        NoSmallPreview = 16,
        /// <summary>ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1774"/></summary>
        NoInputs = 32,
        /// <summary>ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1775"/></summary>
        NoTooltip = 64,
        /// <summary>ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1776"/></summary>
        NoLabel = 128,
        /// <summary>ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1777"/></summary>
        NoSidePreview = 256,
        /// <summary>ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1778"/></summary>
        NoDragDrop = 512,
        /// <summary>ColorButton: disable border (which is enforced by default).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1779"/></summary>
        NoBorder = 1024,
        /// <summary>ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1782"/></summary>
        AlphaBar = 65536,
        /// <summary>ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1783"/></summary>
        AlphaPreview = 131072,
        /// <summary>ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1784"/></summary>
        AlphaPreviewHalf = 262144,
        /// <summary>(WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1785"/></summary>
        HDR = 524288,
        /// <summary>[Display].<br/>ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1786"/></summary>
        DisplayRGB = 1048576,
        /// <summary>[Display].<br/>".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1787"/></summary>
        DisplayHSV = 2097152,
        /// <summary>[Display].<br/>".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1788"/></summary>
        DisplayHex = 4194304,
        /// <summary>[DataType].<br/>ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1789"/></summary>
        Uint8 = 8388608,
        /// <summary>[DataType].<br/>ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1790"/></summary>
        Float = 16777216,
        /// <summary>[Picker].<br/>ColorPicker: bar for Hue, rectangle for Sat/Value.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1791"/></summary>
        PickerHueBar = 33554432,
        /// <summary>[Picker].<br/>ColorPicker: wheel for Hue, triangle for Sat/Value.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1792"/></summary>
        PickerHueWheel = 67108864,
        /// <summary>[Input].<br/>ColorEdit, ColorPicker: input and output data in RGB format.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1793"/></summary>
        InputRGB = 134217728,
        /// <summary>[Input].<br/>ColorEdit, ColorPicker: input and output data in HSV format.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1794"/></summary>
        InputHSV = 268435456,
        /// <summary>Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to.<br/>Override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1798"/></summary>
        DefaultOptions = 177209344,
        /// <summary>[Internal] Masks.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1801"/></summary>
        DisplayMask = 7340032,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1802"/></summary>
        DataTypeMask = 25165824,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1803"/></summary>
        PickerMask = 100663296,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1804"/></summary>
        InputMask = 402653184
    }

    /// <summary>Flags for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.<br/>We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.<br/>(Those are per-item flags. There are shared flags in ImGuiIO: io.ConfigDragClickToInputText).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1813"/></summary>
    // DEBUG: enum ImGuiSliderFlags_
    // DEBUG: {
    // DEBUG:     ImGuiSliderFlags_None                   = 0,
    // DEBUG:     ImGuiSliderFlags_AlwaysClamp            = 1 << 4,       // Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.
    // DEBUG:     ImGuiSliderFlags_Logarithmic            = 1 << 5,       // Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits.
    // DEBUG:     ImGuiSliderFlags_NoRoundToFormat        = 1 << 6,       // Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits)
    // DEBUG:     ImGuiSliderFlags_NoInput                = 1 << 7,       // Disable CTRL+Click or Enter key allowing to input text directly into the widget
    // DEBUG:     ImGuiSliderFlags_InvalidMask_           = 0x7000000F,   // [Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.
    // DEBUG: 
    // DEBUG:     // Obsolete names
    // DEBUG:     //ImGuiSliderFlags_ClampOnInput = ImGuiSliderFlags_AlwaysClamp, // [renamed in 1.79]
    // DEBUG: }
    [Flags]
    public enum ImGuiSliderFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1815"/></summary>
        None = 0,
        /// <summary>Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1816"/></summary>
        AlwaysClamp = 16,
        /// <summary>Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1817"/></summary>
        Logarithmic = 32,
        /// <summary>Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1818"/></summary>
        NoRoundToFormat = 64,
        /// <summary>Disable CTRL+Click or Enter key allowing to input text directly into the widget.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1819"/></summary>
        NoInput = 128,
        /// <summary>[Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1820"/></summary>
        InvalidMask = 1879048207
    }

    /// <summary>Identify a mouse button.<br/>Those values are guaranteed to be stable and we frequently use 0/1 directly. Named enums provided for convenience.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1828"/></summary>
    // DEBUG: enum ImGuiMouseButton_
    // DEBUG: {
    // DEBUG:     ImGuiMouseButton_Left = 0,
    // DEBUG:     ImGuiMouseButton_Right = 1,
    // DEBUG:     ImGuiMouseButton_Middle = 2,
    // DEBUG:     ImGuiMouseButton_COUNT = 5
    // DEBUG: }
    public enum ImGuiMouseButton
    {
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1830"/></summary>
        Left = 0,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1831"/></summary>
        Right = 1,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1832"/></summary>
        Middle = 2,
    }

    /// <summary>Enumeration for GetMouseCursor().<br/>User code may request backend to display given cursor by calling SetMouseCursor(), which is why we have some cursors that are marked unused here.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1838"/></summary>
    // DEBUG: enum ImGuiMouseCursor_
    // DEBUG: {
    // DEBUG:     ImGuiMouseCursor_None = -1,
    // DEBUG:     ImGuiMouseCursor_Arrow = 0,
    // DEBUG:     ImGuiMouseCursor_TextInput,         // When hovering over InputText, etc.
    // DEBUG:     ImGuiMouseCursor_ResizeAll,         // (Unused by Dear ImGui functions)
    // DEBUG:     ImGuiMouseCursor_ResizeNS,          // When hovering over a horizontal border
    // DEBUG:     ImGuiMouseCursor_ResizeEW,          // When hovering over a vertical border or a column
    // DEBUG:     ImGuiMouseCursor_ResizeNESW,        // When hovering over the bottom-left corner of a window
    // DEBUG:     ImGuiMouseCursor_ResizeNWSE,        // When hovering over the bottom-right corner of a window
    // DEBUG:     ImGuiMouseCursor_Hand,              // (Unused by Dear ImGui functions. Use for e.g. hyperlinks)
    // DEBUG:     ImGuiMouseCursor_NotAllowed,        // When hovering something with disallowed interaction. Usually a crossed circle.
    // DEBUG:     ImGuiMouseCursor_COUNT
    // DEBUG: }
    public enum ImGuiMouseCursor
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1840"/></summary>
        None = -1,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1841"/></summary>
        Arrow = 0,
        /// <summary>When hovering over InputText, etc.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1842"/></summary>
        TextInput = 1,
        /// <summary>(Unused by Dear ImGui functions).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1843"/></summary>
        ResizeAll = 2,
        /// <summary>When hovering over a horizontal border.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1844"/></summary>
        ResizeNS = 3,
        /// <summary>When hovering over a vertical border or a column.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1845"/></summary>
        ResizeEW = 4,
        /// <summary>When hovering over the bottom-left corner of a window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1846"/></summary>
        ResizeNESW = 5,
        /// <summary>When hovering over the bottom-right corner of a window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1847"/></summary>
        ResizeNWSE = 6,
        /// <summary>(Unused by Dear ImGui functions. Use for e.g. hyperlinks).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1848"/></summary>
        Hand = 7,
        /// <summary>When hovering something with disallowed interaction. Usually a crossed circle.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1849"/></summary>
        NotAllowed = 8,
    }

    /// <summary>Enumeration for ImGui::SetWindow***(), SetNextWindow***(), SetNextItem***() functions.<br/>Represent a condition.<br/>Important: Treat as a regular enum! Do NOT combine multiple values using binary operators! All the functions above treat 0 as a shortcut to ImGuiCond_Always.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1868"/></summary>
    // DEBUG: enum ImGuiCond_
    // DEBUG: {
    // DEBUG:     ImGuiCond_None          = 0,        // No condition (always set the variable), same as _Always
    // DEBUG:     ImGuiCond_Always        = 1 << 0,   // No condition (always set the variable), same as _None
    // DEBUG:     ImGuiCond_Once          = 1 << 1,   // Set the variable once per runtime session (only the first call will succeed)
    // DEBUG:     ImGuiCond_FirstUseEver  = 1 << 2,   // Set the variable if the object/window has no persistently saved data (no entry in .ini file)
    // DEBUG:     ImGuiCond_Appearing     = 1 << 3,   // Set the variable if the object/window is appearing after being hidden/inactive (or the first time)
    // DEBUG: }
    public enum ImGuiCond
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1870"/></summary>
        None = 0,
        /// <summary>No condition (always set the variable), same as _None.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1871"/></summary>
        Always = 1,
        /// <summary>Set the variable once per runtime session (only the first call will succeed).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1872"/></summary>
        Once = 2,
        /// <summary>Set the variable if the object/window has no persistently saved data (no entry in .ini file).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1873"/></summary>
        FirstUseEver = 4,
        /// <summary>Set the variable if the object/window is appearing after being hidden/inactive (or the first time).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1874"/></summary>
        Appearing = 8
    }

    /// <summary>Flags for ImDrawList functions.<br/>(Legacy: bit 0 must always correspond to ImDrawFlags_Closed to be backward compatible with old API using a bool. Bits 1..3 must be unused).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2722"/></summary>
    // DEBUG: enum ImDrawFlags_
    // DEBUG: {
    // DEBUG:     ImDrawFlags_None                        = 0,
    // DEBUG:     ImDrawFlags_Closed                      = 1 << 0, // PathStroke(), AddPolyline(): specify that shape should be closed (Important: this is always == 1 for legacy reason)
    // DEBUG:     ImDrawFlags_RoundCornersTopLeft         = 1 << 4, // AddRect(), AddRectFilled(), PathRect(): enable rounding top-left corner only (when rounding > 0.0f, we default to all corners). Was 0x01.
    // DEBUG:     ImDrawFlags_RoundCornersTopRight        = 1 << 5, // AddRect(), AddRectFilled(), PathRect(): enable rounding top-right corner only (when rounding > 0.0f, we default to all corners). Was 0x02.
    // DEBUG:     ImDrawFlags_RoundCornersBottomLeft      = 1 << 6, // AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-left corner only (when rounding > 0.0f, we default to all corners). Was 0x04.
    // DEBUG:     ImDrawFlags_RoundCornersBottomRight     = 1 << 7, // AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-right corner only (when rounding > 0.0f, we default to all corners). Wax 0x08.
    // DEBUG:     ImDrawFlags_RoundCornersNone            = 1 << 8, // AddRect(), AddRectFilled(), PathRect(): disable rounding on all corners (when rounding > 0.0f). This is NOT zero, NOT an implicit flag!
    // DEBUG:     ImDrawFlags_RoundCornersTop             = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight,
    // DEBUG:     ImDrawFlags_RoundCornersBottom          = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight,
    // DEBUG:     ImDrawFlags_RoundCornersLeft            = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersTopLeft,
    // DEBUG:     ImDrawFlags_RoundCornersRight           = ImDrawFlags_RoundCornersBottomRight | ImDrawFlags_RoundCornersTopRight,
    // DEBUG:     ImDrawFlags_RoundCornersAll             = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight | ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight,
    // DEBUG:     ImDrawFlags_RoundCornersDefault_        = ImDrawFlags_RoundCornersAll, // Default to ALL corners if none of the _RoundCornersXX flags are specified.
    // DEBUG:     ImDrawFlags_RoundCornersMask_           = ImDrawFlags_RoundCornersAll | ImDrawFlags_RoundCornersNone,
    // DEBUG: }
    [Flags]
    public enum ImDrawFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2724"/></summary>
        None = 0,
        /// <summary>PathStroke(), AddPolyline(): specify that shape should be closed (Important: this is always == 1 for legacy reason).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2725"/></summary>
        Closed = 1,
        /// <summary>AddRect(), AddRectFilled(), PathRect(): enable rounding top-left corner only (when rounding &gt; 0.0f, we default to all corners). Was 0x01.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2726"/></summary>
        RoundCornersTopLeft = 16,
        /// <summary>AddRect(), AddRectFilled(), PathRect(): enable rounding top-right corner only (when rounding &gt; 0.0f, we default to all corners). Was 0x02.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2727"/></summary>
        RoundCornersTopRight = 32,
        /// <summary>AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-left corner only (when rounding &gt; 0.0f, we default to all corners). Was 0x04.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2728"/></summary>
        RoundCornersBottomLeft = 64,
        /// <summary>AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-right corner only (when rounding &gt; 0.0f, we default to all corners). Wax 0x08.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2729"/></summary>
        RoundCornersBottomRight = 128,
        /// <summary>AddRect(), AddRectFilled(), PathRect(): disable rounding on all corners (when rounding &gt; 0.0f). This is NOT zero, NOT an implicit flag!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2730"/></summary>
        RoundCornersNone = 256,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2731"/></summary>
        RoundCornersTop = 48,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2732"/></summary>
        RoundCornersBottom = 192,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2733"/></summary>
        RoundCornersLeft = 80,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2734"/></summary>
        RoundCornersRight = 160,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2735"/></summary>
        RoundCornersAll = 240,
        /// <summary>Default to ALL corners if none of the _RoundCornersXX flags are specified.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2736"/></summary>
        RoundCornersDefault = 240,
        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2737"/></summary>
        RoundCornersMask = 496
    }

    /// <summary>Flags for ImDrawList instance. Those are set automatically by ImGui:: functions from ImGuiIO settings, and generally not manipulated directly.<br/>It is however possible to temporarily alter flags between calls to ImDrawList:: functions.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2742"/></summary>
    // DEBUG: enum ImDrawListFlags_
    // DEBUG: {
    // DEBUG:     ImDrawListFlags_None                    = 0,
    // DEBUG:     ImDrawListFlags_AntiAliasedLines        = 1 << 0,  // Enable anti-aliased lines/borders (*2 the number of triangles for 1.0f wide line or lines thin enough to be drawn using textures, otherwise *3 the number of triangles)
    // DEBUG:     ImDrawListFlags_AntiAliasedLinesUseTex  = 1 << 1,  // Enable anti-aliased lines/borders using textures when possible. Require backend to render with bilinear filtering (NOT point/nearest filtering).
    // DEBUG:     ImDrawListFlags_AntiAliasedFill         = 1 << 2,  // Enable anti-aliased edge around filled shapes (rounded rectangles, circles).
    // DEBUG:     ImDrawListFlags_AllowVtxOffset          = 1 << 3,  // Can emit 'VtxOffset > 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled.
    // DEBUG: }
    [Flags]
    public enum ImDrawListFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2744"/></summary>
        None = 0,
        /// <summary>Enable anti-aliased lines/borders (*2 the number of triangles for 1.0f wide line or lines thin enough to be drawn using textures, otherwise *3 the number of triangles).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2745"/></summary>
        AntiAliasedLines = 1,
        /// <summary>Enable anti-aliased lines/borders using textures when possible. Require backend to render with bilinear filtering (NOT point/nearest filtering).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2746"/></summary>
        AntiAliasedLinesUseTex = 2,
        /// <summary>Enable anti-aliased edge around filled shapes (rounded rectangles, circles).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2747"/></summary>
        AntiAliasedFill = 4,
        /// <summary>Can emit 'VtxOffset &gt; 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2748"/></summary>
        AllowVtxOffset = 8
    }

    /// <summary>Flags for ImFontAtlas build.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2983"/></summary>
    // DEBUG: enum ImFontAtlasFlags_
    // DEBUG: {
    // DEBUG:     ImFontAtlasFlags_None               = 0,
    // DEBUG:     ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,   // Don't round the height to next power of two
    // DEBUG:     ImFontAtlasFlags_NoMouseCursors     = 1 << 1,   // Don't build software mouse cursors into the atlas (save a little texture memory)
    // DEBUG:     ImFontAtlasFlags_NoBakedLines       = 1 << 2,   // Don't build thick line textures into the atlas (save a little texture memory, allow support for point/nearest filtering). The AntiAliasedLinesUseTex features uses them, otherwise they will be rendered using polygons (more expensive for CPU/GPU).
    // DEBUG: }
    [Flags]
    public enum ImFontAtlasFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2985"/></summary>
        None = 0,
        /// <summary>Don't round the height to next power of two.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2986"/></summary>
        NoPowerOfTwoHeight = 1,
        /// <summary>Don't build software mouse cursors into the atlas (save a little texture memory).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2987"/></summary>
        NoMouseCursors = 2,
        /// <summary>Don't build thick line textures into the atlas (save a little texture memory, allow support for point/nearest filtering). The AntiAliasedLinesUseTex features uses them, otherwise they will be rendered using polygons (more expensive for CPU/GPU).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2988"/></summary>
        NoBakedLines = 4
    }

    /// <summary>Flags stored in ImGuiViewport::Flags, giving indications to the platform backends.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3170"/></summary>
    // DEBUG: enum ImGuiViewportFlags_
    // DEBUG: {
    // DEBUG:     ImGuiViewportFlags_None                     = 0,
    // DEBUG:     ImGuiViewportFlags_IsPlatformWindow         = 1 << 0,   // Represent a Platform Window
    // DEBUG:     ImGuiViewportFlags_IsPlatformMonitor        = 1 << 1,   // Represent a Platform Monitor (unused yet)
    // DEBUG:     ImGuiViewportFlags_OwnedByApp               = 1 << 2,   // Platform Window: Was created/managed by the user application? (rather than our backend)
    // DEBUG:     ImGuiViewportFlags_NoDecoration             = 1 << 3,   // Platform Window: Disable platform decorations: title bar, borders, etc. (generally set all windows, but if ImGuiConfigFlags_ViewportsDecoration is set we only set this on popups/tooltips)
    // DEBUG:     ImGuiViewportFlags_NoTaskBarIcon            = 1 << 4,   // Platform Window: Disable platform task bar icon (generally set on popups/tooltips, or all windows if ImGuiConfigFlags_ViewportsNoTaskBarIcon is set)
    // DEBUG:     ImGuiViewportFlags_NoFocusOnAppearing       = 1 << 5,   // Platform Window: Don't take focus when created.
    // DEBUG:     ImGuiViewportFlags_NoFocusOnClick           = 1 << 6,   // Platform Window: Don't take focus when clicked on.
    // DEBUG:     ImGuiViewportFlags_NoInputs                 = 1 << 7,   // Platform Window: Make mouse pass through so we can drag this window while peaking behind it.
    // DEBUG:     ImGuiViewportFlags_NoRendererClear          = 1 << 8,   // Platform Window: Renderer doesn't need to clear the framebuffer ahead (because we will fill it entirely).
    // DEBUG:     ImGuiViewportFlags_NoAutoMerge              = 1 << 9,   // Platform Window: Avoid merging this window into another host window. This can only be set via ImGuiWindowClass viewport flags override (because we need to now ahead if we are going to create a viewport in the first place!).
    // DEBUG:     ImGuiViewportFlags_TopMost                  = 1 << 10,  // Platform Window: Display on top (for tooltips only).
    // DEBUG:     ImGuiViewportFlags_CanHostOtherWindows      = 1 << 11,  // Viewport can host multiple imgui windows (secondary viewports are associated to a single window). // FIXME: In practice there's still probably code making the assumption that this is always and only on the MainViewport. Will fix once we add support for "no main viewport".
    // DEBUG: 
    // DEBUG:     // Output status flags (from Platform)
    // DEBUG:     ImGuiViewportFlags_IsMinimized              = 1 << 12,  // Platform Window: Window is minimized, can skip render. When minimized we tend to avoid using the viewport pos/size for clipping window or testing if they are contained in the viewport.
    // DEBUG:     ImGuiViewportFlags_IsFocused                = 1 << 13,  // Platform Window: Window is focused (last call to Platform_GetWindowFocus() returned true)
    // DEBUG: }
    [Flags]
    public enum ImGuiViewportFlags
    {
        /// <summary>Use the default behavior.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3172"/></summary>
        None = 0,
        /// <summary>Represent a Platform Window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3173"/></summary>
        IsPlatformWindow = 1,
        /// <summary>Represent a Platform Monitor (unused yet).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3174"/></summary>
        IsPlatformMonitor = 2,
        /// <summary>Platform Window: Was created/managed by the user application? (rather than our backend).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3175"/></summary>
        OwnedByApp = 4,
        /// <summary>Platform Window: Disable platform decorations: title bar, borders, etc. (generally set all windows, but if ImGuiConfigFlags_ViewportsDecoration is set we only set this on popups/tooltips).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3176"/></summary>
        NoDecoration = 8,
        /// <summary>Platform Window: Disable platform task bar icon (generally set on popups/tooltips, or all windows if ImGuiConfigFlags_ViewportsNoTaskBarIcon is set).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3177"/></summary>
        NoTaskBarIcon = 16,
        /// <summary>Platform Window: Don't take focus when created.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3178"/></summary>
        NoFocusOnAppearing = 32,
        /// <summary>Platform Window: Don't take focus when clicked on.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3179"/></summary>
        NoFocusOnClick = 64,
        /// <summary>Platform Window: Make mouse pass through so we can drag this window while peaking behind it.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3180"/></summary>
        NoInputs = 128,
        /// <summary>Platform Window: Renderer doesn't need to clear the framebuffer ahead (because we will fill it entirely).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3181"/></summary>
        NoRendererClear = 256,
        /// <summary>Platform Window: Avoid merging this window into another host window. This can only be set via ImGuiWindowClass viewport flags override (because we need to now ahead if we are going to create a viewport in the first place!).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3182"/></summary>
        NoAutoMerge = 512,
        /// <summary>Platform Window: Display on top (for tooltips only).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3183"/></summary>
        TopMost = 1024,
        /// <summary>Viewport can host multiple imgui windows (secondary viewports are associated to a single window).<br/>FIXME: In practice there's still probably code making the assumption that this is always and only on the MainViewport. Will fix once we add support for "no main viewport".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3184"/></summary>
        CanHostOtherWindows = 2048,
        /// <summary>Platform Window: Window is minimized, can skip render. When minimized we tend to avoid using the viewport pos/size for clipping window or testing if they are contained in the viewport.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3187"/></summary>
        IsMinimized = 4096,
        /// <summary>Platform Window: Window is focused (last call to Platform_GetWindowFocus() returned true).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3188"/></summary>
        IsFocused = 8192
    }

    // DEBUG: typedef void* ImTextureID
    // DEBUG: typedef unsigned short ImDrawIdx
    // DEBUG: typedef unsigned int        ImU32
    // DEBUG: typedef int ImDrawListFlags
    // DEBUG: typedef int ImDrawFlags
    // DEBUG: typedef unsigned short ImWchar16
    // DEBUG: typedef ImWchar16 ImWchar
    // DEBUG: typedef int ImFontAtlasFlags
    // DEBUG: typedef int ImGuiMouseCursor
    // DEBUG: typedef unsigned char       ImU8
    /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2641"/></summary>
    // DEBUG: typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd)
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate void ImDrawCallback(IntPtr parent_list, IntPtr cmd);
    // DEBUG: typedef unsigned int        ImGuiID
    // DEBUG: typedef int ImGuiViewportFlags
    // DEBUG: typedef int ImGuiConfigFlags
    // DEBUG: typedef int ImGuiBackendFlags
    // DEBUG: typedef int ImGuiKeyChord
    // DEBUG: typedef unsigned short      ImU16
    // DEBUG: typedef signed char         ImS8
    // DEBUG: typedef int ImGuiInputTextFlags
    // DEBUG: typedef unsigned long long  ImU64
    // DEBUG: typedef int ImGuiDir
    // DEBUG: typedef int ImGuiHoveredFlags
    // DEBUG: typedef signed short        ImS16
    // DEBUG: typedef int ImGuiSortDirection
    // DEBUG: typedef int ImGuiTabItemFlags
    // DEBUG: typedef int ImGuiDockNodeFlags
    // DEBUG: typedef int ImGuiCol
    // DEBUG: typedef int ImGuiCond
    // DEBUG: typedef int ImGuiDataType
    // DEBUG: typedef int ImGuiMouseButton
    // DEBUG: typedef int ImGuiStyleVar
    // DEBUG: typedef int ImGuiTableBgTarget
    // DEBUG: typedef int ImGuiButtonFlags
    // DEBUG: typedef int ImGuiColorEditFlags
    // DEBUG: typedef int ImGuiComboFlags
    // DEBUG: typedef int ImGuiDragDropFlags
    // DEBUG: typedef int ImGuiFocusedFlags
    // DEBUG: typedef int ImGuiPopupFlags
    // DEBUG: typedef int ImGuiSelectableFlags
    // DEBUG: typedef int ImGuiSliderFlags
    // DEBUG: typedef int ImGuiTabBarFlags
    // DEBUG: typedef int ImGuiTableFlags
    // DEBUG: typedef int ImGuiTableColumnFlags
    // DEBUG: typedef int ImGuiTableRowFlags
    // DEBUG: typedef int ImGuiTreeNodeFlags
    // DEBUG: typedef int ImGuiWindowFlags
    // DEBUG: typedef signed int          ImS32
    // DEBUG: typedef signed   long long  ImS64
    // DEBUG: typedef unsigned int ImWchar32
    /// <summary>Callback function for ImGui::InputText().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L256"/></summary>
    // DEBUG: typedef int     (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data)
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate int ImGuiInputTextCallback(IntPtr data);

    /// <summary>Callback function for ImGui::SetNextWindowSizeConstraints().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L257"/></summary>
    // DEBUG: typedef void    (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data)
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate void ImGuiSizeCallback(IntPtr data);

    /// <summary>Function signature for ImGui::SetAllocatorFunctions().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L258"/></summary>
    // DEBUG: typedef void*   (*ImGuiMemAllocFunc)(size_t sz, void* user_data)
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate IntPtr ImGuiMemAllocFunc(UIntPtr sz, IntPtr user_data);

    /// <summary>Function signature for ImGui::SetAllocatorFunctions().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L259"/></summary>
    // DEBUG: typedef void    (*ImGuiMemFreeFunc)(void* ptr, void* user_data)
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate void ImGuiMemFreeFunc(IntPtr ptr, IntPtr user_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate IntPtr ImGetClipboardTextHandler(IntPtr user_data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate void ImSetClipboardTextHandler(IntPtr user_data, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate void ImSetPlatformImeDataHandler(IntPtr viewport, IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate void Action_IntPtr(IntPtr vp);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate void Action_IntPtr_Numerics_Vector2(IntPtr vp, Vector2 pos);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate Vector2 Func_Numerics_Vector2_IntPtr(IntPtr vp);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    [return: MarshalAs(UnmanagedType.I1)]
    public unsafe delegate bool Func_bool_IntPtr(IntPtr vp);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate void Action_IntPtr_float(IntPtr vp, float alpha);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate float Func_float_IntPtr(IntPtr vp);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate int Func_int_IntPtr_ulong_IntPtr_ulongPtr(IntPtr vp, ulong vk_inst, IntPtr vk_allocators, ulong* out_vk_surface);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate IntPtr Func_IntPtr_IntPtr_int(IntPtr user_data, int idx);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public unsafe delegate float ImValuesGetterHandler(IntPtr data, int idx);

    internal static partial class ImVector
    {
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe partial struct __Internal
        {
            internal int Size;
            internal int Capacity;
            internal IntPtr Data;
        }
    }

    /// <summary>Data shared among multiple draw lists (typically owned by parent ImGui context, but you may create one yourself).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L143"/></summary>
    // DEBUG: struct ImDrawListSharedData
    public unsafe partial class ImDrawListSharedData
    {
        internal partial struct __Internal
        {
        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImDrawListSharedData>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImDrawListSharedData>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImDrawListSharedData managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImDrawListSharedData>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImDrawListSharedData managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImDrawListSharedData __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImDrawListSharedData(native.ToPointer(), skipVTables);
        }

        internal static ImDrawListSharedData __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImDrawListSharedData)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImDrawListSharedData __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImDrawListSharedData(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImDrawListSharedData(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImDrawListSharedData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }
    }

    /// <summary>Opaque interface to a font builder (stb_truetype or FreeType).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L148"/></summary>
    // DEBUG: struct ImFontBuilderIO
    public unsafe partial class ImFontBuilderIO
    {
        internal partial struct __Internal
        {
        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImFontBuilderIO>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImFontBuilderIO>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImFontBuilderIO managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImFontBuilderIO>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImFontBuilderIO managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImFontBuilderIO __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImFontBuilderIO(native.ToPointer(), skipVTables);
        }

        internal static ImFontBuilderIO __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImFontBuilderIO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImFontBuilderIO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImFontBuilderIO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImFontBuilderIO(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImFontBuilderIO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }
    }

    /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1981"/></summary>
    // DEBUG: struct ImGuiStyle
    // DEBUG: {
    // DEBUG:     float       Alpha;                      // Global alpha applies to everything in Dear ImGui.
    // DEBUG:     float       DisabledAlpha;              // Additional alpha multiplier applied by BeginDisabled(). Multiply over current value of Alpha.
    // DEBUG:     ImVec2      WindowPadding;              // Padding within a window.
    // DEBUG:     float       WindowRounding;             // Radius of window corners rounding. Set to 0.0f to have rectangular windows. Large values tend to lead to variety of artifacts and are not recommended.
    // DEBUG:     float       WindowBorderSize;           // Thickness of border around windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    // DEBUG:     ImVec2      WindowMinSize;              // Minimum window size. This is a global setting. If you want to constrain individual windows, use SetNextWindowSizeConstraints().
    // DEBUG:     ImVec2      WindowTitleAlign;           // Alignment for title bar text. Defaults to (0.0f,0.5f) for left-aligned,vertically centered.
    // DEBUG:     ImGuiDir    WindowMenuButtonPosition;   // Side of the collapsing/docking button in the title bar (None/Left/Right). Defaults to ImGuiDir_Left.
    // DEBUG:     float       ChildRounding;              // Radius of child window corners rounding. Set to 0.0f to have rectangular windows.
    // DEBUG:     float       ChildBorderSize;            // Thickness of border around child windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    // DEBUG:     float       PopupRounding;              // Radius of popup window corners rounding. (Note that tooltip windows use WindowRounding)
    // DEBUG:     float       PopupBorderSize;            // Thickness of border around popup/tooltip windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    // DEBUG:     ImVec2      FramePadding;               // Padding within a framed rectangle (used by most widgets).
    // DEBUG:     float       FrameRounding;              // Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets).
    // DEBUG:     float       FrameBorderSize;            // Thickness of border around frames. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    // DEBUG:     ImVec2      ItemSpacing;                // Horizontal and vertical spacing between widgets/lines.
    // DEBUG:     ImVec2      ItemInnerSpacing;           // Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label).
    // DEBUG:     ImVec2      CellPadding;                // Padding within a table cell. CellPadding.y may be altered between different rows.
    // DEBUG:     ImVec2      TouchExtraPadding;          // Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!
    // DEBUG:     float       IndentSpacing;              // Horizontal indentation when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).
    // DEBUG:     float       ColumnsMinSpacing;          // Minimum horizontal spacing between two columns. Preferably > (FramePadding.x + 1).
    // DEBUG:     float       ScrollbarSize;              // Width of the vertical scrollbar, Height of the horizontal scrollbar.
    // DEBUG:     float       ScrollbarRounding;          // Radius of grab corners for scrollbar.
    // DEBUG:     float       GrabMinSize;                // Minimum width/height of a grab box for slider/scrollbar.
    // DEBUG:     float       GrabRounding;               // Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
    // DEBUG:     float       LogSliderDeadzone;          // The size in pixels of the dead-zone around zero on logarithmic sliders that cross zero.
    // DEBUG:     float       TabRounding;                // Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.
    // DEBUG:     float       TabBorderSize;              // Thickness of border around tabs.
    // DEBUG:     float       TabMinWidthForCloseButton;  // Minimum width for close button to appear on an unselected tab when hovered. Set to 0.0f to always show when hovering, set to FLT_MAX to never show close button unless selected.
    // DEBUG:     float       TabBarBorderSize;           // Thickness of tab-bar separator, which takes on the tab active color to denote focus.
    // DEBUG:     float       TableAngledHeadersAngle;    // Angle of angled headers (supported values range from -50.0f degrees to +50.0f degrees).
    // DEBUG:     ImGuiDir    ColorButtonPosition;        // Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right.
    // DEBUG:     ImVec2      ButtonTextAlign;            // Alignment of button text when button is larger than text. Defaults to (0.5f, 0.5f) (centered).
    // DEBUG:     ImVec2      SelectableTextAlign;        // Alignment of selectable text. Defaults to (0.0f, 0.0f) (top-left aligned). It's generally important to keep this left-aligned if you want to lay multiple items on a same line.
    // DEBUG:     float       SeparatorTextBorderSize;    // Thickkness of border in SeparatorText()
    // DEBUG:     ImVec2      SeparatorTextAlign;         // Alignment of text within the separator. Defaults to (0.0f, 0.5f) (left aligned, center).
    // DEBUG:     ImVec2      SeparatorTextPadding;       // Horizontal offset of text from each edge of the separator + spacing on other axis. Generally small values. .y is recommended to be == FramePadding.y.
    // DEBUG:     ImVec2      DisplayWindowPadding;       // Window position are clamped to be visible within the display area or monitors by at least this amount. Only applies to regular windows.
    // DEBUG:     ImVec2      DisplaySafeAreaPadding;     // If you cannot see the edges of your screen (e.g. on a TV) increase the safe area padding. Apply to popups/tooltips as well regular windows. NB: Prefer configuring your TV sets correctly!
    // DEBUG:     float       DockingSeparatorSize;       // Thickness of resizing border between docked windows
    // DEBUG:     float       MouseCursorScale;           // Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). We apply per-monitor DPI scaling over this scale. May be removed later.
    // DEBUG:     bool        AntiAliasedLines;           // Enable anti-aliased lines/borders. Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).
    // DEBUG:     bool        AntiAliasedLinesUseTex;     // Enable anti-aliased lines/borders using textures where possible. Require backend to render with bilinear filtering (NOT point/nearest filtering). Latched at the beginning of the frame (copied to ImDrawList).
    // DEBUG:     bool        AntiAliasedFill;            // Enable anti-aliased edges around filled shapes (rounded rectangles, circles, etc.). Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).
    // DEBUG:     float       CurveTessellationTol;       // Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.
    // DEBUG:     float       CircleTessellationMaxError; // Maximum error (in pixels) allowed when using AddCircle()/AddCircleFilled() or drawing rounded corner rectangles with no explicit segment count specified. Decrease for higher quality but more geometry.
    // DEBUG:     ImVec4      Colors[ImGuiCol_COUNT];
    // DEBUG: 
    // DEBUG:     // Behaviors
    // DEBUG:     // (It is possible to modify those fields mid-frame if specific behavior need it, unlike e.g. configuration fields in ImGuiIO)
    // DEBUG:     float             HoverStationaryDelay;     // Delay for IsItemHovered(ImGuiHoveredFlags_Stationary). Time required to consider mouse stationary.
    // DEBUG:     float             HoverDelayShort;          // Delay for IsItemHovered(ImGuiHoveredFlags_DelayShort). Usually used along with HoverStationaryDelay.
    // DEBUG:     float             HoverDelayNormal;         // Delay for IsItemHovered(ImGuiHoveredFlags_DelayNormal). "
    // DEBUG:     ImGuiHoveredFlags HoverFlagsForTooltipMouse;// Default flags when using IsItemHovered(ImGuiHoveredFlags_ForTooltip) or BeginItemTooltip()/SetItemTooltip() while using mouse.
    // DEBUG:     ImGuiHoveredFlags HoverFlagsForTooltipNav;  // Default flags when using IsItemHovered(ImGuiHoveredFlags_ForTooltip) or BeginItemTooltip()/SetItemTooltip() while using keyboard/gamepad.
    // DEBUG: 
    // DEBUG:     IMGUI_API ImGuiStyle();
    // DEBUG:     IMGUI_API void ScaleAllSizes(float scale_factor);
    // DEBUG: }
    public unsafe partial class ImGuiStyle : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal float Alpha;
            internal float DisabledAlpha;
            internal Vector2 WindowPadding;
            internal float WindowRounding;
            internal float WindowBorderSize;
            internal Vector2 WindowMinSize;
            internal Vector2 WindowTitleAlign;
            internal ImGuiDir WindowMenuButtonPosition;
            internal float ChildRounding;
            internal float ChildBorderSize;
            internal float PopupRounding;
            internal float PopupBorderSize;
            internal Vector2 FramePadding;
            internal float FrameRounding;
            internal float FrameBorderSize;
            internal Vector2 ItemSpacing;
            internal Vector2 ItemInnerSpacing;
            internal Vector2 CellPadding;
            internal Vector2 TouchExtraPadding;
            internal float IndentSpacing;
            internal float ColumnsMinSpacing;
            internal float ScrollbarSize;
            internal float ScrollbarRounding;
            internal float GrabMinSize;
            internal float GrabRounding;
            internal float LogSliderDeadzone;
            internal float TabRounding;
            internal float TabBorderSize;
            internal float TabMinWidthForCloseButton;
            internal float TabBarBorderSize;
            internal float TableAngledHeadersAngle;
            internal ImGuiDir ColorButtonPosition;
            internal Vector2 ButtonTextAlign;
            internal Vector2 SelectableTextAlign;
            internal float SeparatorTextBorderSize;
            internal Vector2 SeparatorTextAlign;
            internal Vector2 SeparatorTextPadding;
            internal Vector2 DisplayWindowPadding;
            internal Vector2 DisplaySafeAreaPadding;
            internal float DockingSeparatorSize;
            internal float MouseCursorScale;
            internal byte AntiAliasedLines;
            internal byte AntiAliasedLinesUseTex;
            internal byte AntiAliasedFill;
            internal float CurveTessellationTol;
            internal float CircleTessellationMaxError;
            internal fixed byte Colors[880];
            internal float HoverStationaryDelay;
            internal float HoverDelayShort;
            internal float HoverDelayNormal;
            internal ImGuiHoveredFlags HoverFlagsForTooltipMouse;
            internal ImGuiHoveredFlags HoverFlagsForTooltipNav;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStyle@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStyle@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ScaleAllSizes@ImGuiStyle@@QAEXM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void ScaleAllSizes(IntPtr __instance, float scale_factor);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStyle@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStyle@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ScaleAllSizes@ImGuiStyle@@QEAAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ScaleAllSizes(IntPtr __instance, float scale_factor);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiStyle>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiStyle>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiStyle managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiStyle>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiStyle managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiStyle __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiStyle(native.ToPointer(), skipVTables);
        }

        internal static ImGuiStyle __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiStyle)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiStyle __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiStyle(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiStyle(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiStyle(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2039"/></summary>
        // DEBUG: ImGuiStyle()
        public ImGuiStyle()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiStyle.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1981"/></summary>
        // DEBUG: ImGuiStyle
        public ImGuiStyle(ImGuiStyle _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiStyle.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImGuiStyle()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2040"/></summary>
        // DEBUG: void ScaleAllSizes(float scale_factor)
        public void ScaleAllSizes(float scale_factor)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.ScaleAllSizes(__Instance, scale_factor);
            }
            else
            {
                __Internal32.ScaleAllSizes(__Instance, scale_factor);
            }
        }

        /// <summary>Global alpha applies to everything in Dear ImGui.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1983"/></summary>
        public float Alpha
        {
            get
            {
                return ((__Internal*)__Instance)->Alpha;
            }

            set
            {
                ((__Internal*)__Instance)->Alpha = value;
            }
        }

        /// <summary>Additional alpha multiplier applied by BeginDisabled(). Multiply over current value of Alpha.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1984"/></summary>
        public float DisabledAlpha
        {
            get
            {
                return ((__Internal*)__Instance)->DisabledAlpha;
            }

            set
            {
                ((__Internal*)__Instance)->DisabledAlpha = value;
            }
        }

        /// <summary>Padding within a window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1985"/></summary>
        public Vector2 WindowPadding
        {
            get
            {
                return ((__Internal*)__Instance)->WindowPadding
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->WindowPadding = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Radius of window corners rounding. Set to 0.0f to have rectangular windows. Large values tend to lead to variety of artifacts and are not recommended.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1986"/></summary>
        public float WindowRounding
        {
            get
            {
                return ((__Internal*)__Instance)->WindowRounding;
            }

            set
            {
                ((__Internal*)__Instance)->WindowRounding = value;
            }
        }

        /// <summary>Thickness of border around windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1987"/></summary>
        public float WindowBorderSize
        {
            get
            {
                return ((__Internal*)__Instance)->WindowBorderSize;
            }

            set
            {
                ((__Internal*)__Instance)->WindowBorderSize = value;
            }
        }

        /// <summary>Minimum window size. This is a global setting. If you want to constrain individual windows, use SetNextWindowSizeConstraints().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1988"/></summary>
        public Vector2 WindowMinSize
        {
            get
            {
                return ((__Internal*)__Instance)->WindowMinSize
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->WindowMinSize = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Alignment for title bar text. Defaults to (0.0f,0.5f) for left-aligned,vertically centered.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1989"/></summary>
        public Vector2 WindowTitleAlign
        {
            get
            {
                return ((__Internal*)__Instance)->WindowTitleAlign
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->WindowTitleAlign = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Side of the collapsing/docking button in the title bar (None/Left/Right). Defaults to ImGuiDir_Left.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1990"/></summary>
        public ImGuiDir WindowMenuButtonPosition
        {
            get
            {
                return ((__Internal*)__Instance)->WindowMenuButtonPosition;
            }

            set
            {
                ((__Internal*)__Instance)->WindowMenuButtonPosition = value;
            }
        }

        /// <summary>Radius of child window corners rounding. Set to 0.0f to have rectangular windows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1991"/></summary>
        public float ChildRounding
        {
            get
            {
                return ((__Internal*)__Instance)->ChildRounding;
            }

            set
            {
                ((__Internal*)__Instance)->ChildRounding = value;
            }
        }

        /// <summary>Thickness of border around child windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1992"/></summary>
        public float ChildBorderSize
        {
            get
            {
                return ((__Internal*)__Instance)->ChildBorderSize;
            }

            set
            {
                ((__Internal*)__Instance)->ChildBorderSize = value;
            }
        }

        /// <summary>Radius of popup window corners rounding. (Note that tooltip windows use WindowRounding).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1993"/></summary>
        public float PopupRounding
        {
            get
            {
                return ((__Internal*)__Instance)->PopupRounding;
            }

            set
            {
                ((__Internal*)__Instance)->PopupRounding = value;
            }
        }

        /// <summary>Thickness of border around popup/tooltip windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1994"/></summary>
        public float PopupBorderSize
        {
            get
            {
                return ((__Internal*)__Instance)->PopupBorderSize;
            }

            set
            {
                ((__Internal*)__Instance)->PopupBorderSize = value;
            }
        }

        /// <summary>Padding within a framed rectangle (used by most widgets).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1995"/></summary>
        public Vector2 FramePadding
        {
            get
            {
                return ((__Internal*)__Instance)->FramePadding
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->FramePadding = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1996"/></summary>
        public float FrameRounding
        {
            get
            {
                return ((__Internal*)__Instance)->FrameRounding;
            }

            set
            {
                ((__Internal*)__Instance)->FrameRounding = value;
            }
        }

        /// <summary>Thickness of border around frames. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1997"/></summary>
        public float FrameBorderSize
        {
            get
            {
                return ((__Internal*)__Instance)->FrameBorderSize;
            }

            set
            {
                ((__Internal*)__Instance)->FrameBorderSize = value;
            }
        }

        /// <summary>Horizontal and vertical spacing between widgets/lines.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1998"/></summary>
        public Vector2 ItemSpacing
        {
            get
            {
                return ((__Internal*)__Instance)->ItemSpacing
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->ItemSpacing = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1999"/></summary>
        public Vector2 ItemInnerSpacing
        {
            get
            {
                return ((__Internal*)__Instance)->ItemInnerSpacing
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->ItemInnerSpacing = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Padding within a table cell. CellPadding.y may be altered between different rows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2000"/></summary>
        public Vector2 CellPadding
        {
            get
            {
                return ((__Internal*)__Instance)->CellPadding
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->CellPadding = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2001"/></summary>
        public Vector2 TouchExtraPadding
        {
            get
            {
                return ((__Internal*)__Instance)->TouchExtraPadding
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->TouchExtraPadding = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Horizontal indentation when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2002"/></summary>
        public float IndentSpacing
        {
            get
            {
                return ((__Internal*)__Instance)->IndentSpacing;
            }

            set
            {
                ((__Internal*)__Instance)->IndentSpacing = value;
            }
        }

        /// <summary>Minimum horizontal spacing between two columns. Preferably &gt; (FramePadding.x + 1).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2003"/></summary>
        public float ColumnsMinSpacing
        {
            get
            {
                return ((__Internal*)__Instance)->ColumnsMinSpacing;
            }

            set
            {
                ((__Internal*)__Instance)->ColumnsMinSpacing = value;
            }
        }

        /// <summary>Width of the vertical scrollbar, Height of the horizontal scrollbar.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2004"/></summary>
        public float ScrollbarSize
        {
            get
            {
                return ((__Internal*)__Instance)->ScrollbarSize;
            }

            set
            {
                ((__Internal*)__Instance)->ScrollbarSize = value;
            }
        }

        /// <summary>Radius of grab corners for scrollbar.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2005"/></summary>
        public float ScrollbarRounding
        {
            get
            {
                return ((__Internal*)__Instance)->ScrollbarRounding;
            }

            set
            {
                ((__Internal*)__Instance)->ScrollbarRounding = value;
            }
        }

        /// <summary>Minimum width/height of a grab box for slider/scrollbar.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2006"/></summary>
        public float GrabMinSize
        {
            get
            {
                return ((__Internal*)__Instance)->GrabMinSize;
            }

            set
            {
                ((__Internal*)__Instance)->GrabMinSize = value;
            }
        }

        /// <summary>Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2007"/></summary>
        public float GrabRounding
        {
            get
            {
                return ((__Internal*)__Instance)->GrabRounding;
            }

            set
            {
                ((__Internal*)__Instance)->GrabRounding = value;
            }
        }

        /// <summary>The size in pixels of the dead-zone around zero on logarithmic sliders that cross zero.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2008"/></summary>
        public float LogSliderDeadzone
        {
            get
            {
                return ((__Internal*)__Instance)->LogSliderDeadzone;
            }

            set
            {
                ((__Internal*)__Instance)->LogSliderDeadzone = value;
            }
        }

        /// <summary>Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2009"/></summary>
        public float TabRounding
        {
            get
            {
                return ((__Internal*)__Instance)->TabRounding;
            }

            set
            {
                ((__Internal*)__Instance)->TabRounding = value;
            }
        }

        /// <summary>Thickness of border around tabs.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2010"/></summary>
        public float TabBorderSize
        {
            get
            {
                return ((__Internal*)__Instance)->TabBorderSize;
            }

            set
            {
                ((__Internal*)__Instance)->TabBorderSize = value;
            }
        }

        /// <summary>Minimum width for close button to appear on an unselected tab when hovered. Set to 0.0f to always show when hovering, set to FLT_MAX to never show close button unless selected.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2011"/></summary>
        public float TabMinWidthForCloseButton
        {
            get
            {
                return ((__Internal*)__Instance)->TabMinWidthForCloseButton;
            }

            set
            {
                ((__Internal*)__Instance)->TabMinWidthForCloseButton = value;
            }
        }

        /// <summary>Thickness of tab-bar separator, which takes on the tab active color to denote focus.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2012"/></summary>
        public float TabBarBorderSize
        {
            get
            {
                return ((__Internal*)__Instance)->TabBarBorderSize;
            }

            set
            {
                ((__Internal*)__Instance)->TabBarBorderSize = value;
            }
        }

        /// <summary>Angle of angled headers (supported values range from -50.0f degrees to +50.0f degrees).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2013"/></summary>
        public float TableAngledHeadersAngle
        {
            get
            {
                return ((__Internal*)__Instance)->TableAngledHeadersAngle;
            }

            set
            {
                ((__Internal*)__Instance)->TableAngledHeadersAngle = value;
            }
        }

        /// <summary>Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2014"/></summary>
        public ImGuiDir ColorButtonPosition
        {
            get
            {
                return ((__Internal*)__Instance)->ColorButtonPosition;
            }

            set
            {
                ((__Internal*)__Instance)->ColorButtonPosition = value;
            }
        }

        /// <summary>Alignment of button text when button is larger than text. Defaults to (0.5f, 0.5f) (centered).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2015"/></summary>
        public Vector2 ButtonTextAlign
        {
            get
            {
                return ((__Internal*)__Instance)->ButtonTextAlign
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->ButtonTextAlign = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Alignment of selectable text. Defaults to (0.0f, 0.0f) (top-left aligned). It's generally important to keep this left-aligned if you want to lay multiple items on a same line.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2016"/></summary>
        public Vector2 SelectableTextAlign
        {
            get
            {
                return ((__Internal*)__Instance)->SelectableTextAlign
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->SelectableTextAlign = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Thickkness of border in SeparatorText().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2017"/></summary>
        public float SeparatorTextBorderSize
        {
            get
            {
                return ((__Internal*)__Instance)->SeparatorTextBorderSize;
            }

            set
            {
                ((__Internal*)__Instance)->SeparatorTextBorderSize = value;
            }
        }

        /// <summary>Alignment of text within the separator. Defaults to (0.0f, 0.5f) (left aligned, center).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2018"/></summary>
        public Vector2 SeparatorTextAlign
        {
            get
            {
                return ((__Internal*)__Instance)->SeparatorTextAlign
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->SeparatorTextAlign = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Horizontal offset of text from each edge of the separator + spacing on other axis. Generally small values. .y is recommended to be == FramePadding.y.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2019"/></summary>
        public Vector2 SeparatorTextPadding
        {
            get
            {
                return ((__Internal*)__Instance)->SeparatorTextPadding
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->SeparatorTextPadding = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Window position are clamped to be visible within the display area or monitors by at least this amount. Only applies to regular windows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2020"/></summary>
        public Vector2 DisplayWindowPadding
        {
            get
            {
                return ((__Internal*)__Instance)->DisplayWindowPadding
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->DisplayWindowPadding = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>If you cannot see the edges of your screen (e.g. on a TV) increase the safe area padding. Apply to popups/tooltips as well regular windows. NB: Prefer configuring your TV sets correctly!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2021"/></summary>
        public Vector2 DisplaySafeAreaPadding
        {
            get
            {
                return ((__Internal*)__Instance)->DisplaySafeAreaPadding
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->DisplaySafeAreaPadding = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Thickness of resizing border between docked windows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2022"/></summary>
        public float DockingSeparatorSize
        {
            get
            {
                return ((__Internal*)__Instance)->DockingSeparatorSize;
            }

            set
            {
                ((__Internal*)__Instance)->DockingSeparatorSize = value;
            }
        }

        /// <summary>Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). We apply per-monitor DPI scaling over this scale. May be removed later.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2023"/></summary>
        public float MouseCursorScale
        {
            get
            {
                return ((__Internal*)__Instance)->MouseCursorScale;
            }

            set
            {
                ((__Internal*)__Instance)->MouseCursorScale = value;
            }
        }

        /// <summary>Enable anti-aliased lines/borders. Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2024"/></summary>
        public bool AntiAliasedLines
        {
            get
            {
                return ((__Internal*)__Instance)->AntiAliasedLines != 0;
            }

            set
            {
                ((__Internal*)__Instance)->AntiAliasedLines = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Enable anti-aliased lines/borders using textures where possible. Require backend to render with bilinear filtering (NOT point/nearest filtering). Latched at the beginning of the frame (copied to ImDrawList).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2025"/></summary>
        public bool AntiAliasedLinesUseTex
        {
            get
            {
                return ((__Internal*)__Instance)->AntiAliasedLinesUseTex != 0;
            }

            set
            {
                ((__Internal*)__Instance)->AntiAliasedLinesUseTex = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Enable anti-aliased edges around filled shapes (rounded rectangles, circles, etc.). Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2026"/></summary>
        public bool AntiAliasedFill
        {
            get
            {
                return ((__Internal*)__Instance)->AntiAliasedFill != 0;
            }

            set
            {
                ((__Internal*)__Instance)->AntiAliasedFill = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2027"/></summary>
        public float CurveTessellationTol
        {
            get
            {
                return ((__Internal*)__Instance)->CurveTessellationTol;
            }

            set
            {
                ((__Internal*)__Instance)->CurveTessellationTol = value;
            }
        }

        /// <summary>Maximum error (in pixels) allowed when using AddCircle()/AddCircleFilled() or drawing rounded corner rectangles with no explicit segment count specified. Decrease for higher quality but more geometry.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2028"/></summary>
        public float CircleTessellationMaxError
        {
            get
            {
                return ((__Internal*)__Instance)->CircleTessellationMaxError;
            }

            set
            {
                ((__Internal*)__Instance)->CircleTessellationMaxError = value;
            }
        }

        /// <summary>Delay for IsItemHovered(ImGuiHoveredFlags_Stationary). Time required to consider mouse stationary.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2033"/></summary>
        public float HoverStationaryDelay
        {
            get
            {
                return ((__Internal*)__Instance)->HoverStationaryDelay;
            }

            set
            {
                ((__Internal*)__Instance)->HoverStationaryDelay = value;
            }
        }

        /// <summary>Delay for IsItemHovered(ImGuiHoveredFlags_DelayShort). Usually used along with HoverStationaryDelay.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2034"/></summary>
        public float HoverDelayShort
        {
            get
            {
                return ((__Internal*)__Instance)->HoverDelayShort;
            }

            set
            {
                ((__Internal*)__Instance)->HoverDelayShort = value;
            }
        }

        /// <summary>Delay for IsItemHovered(ImGuiHoveredFlags_DelayNormal). ".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2035"/></summary>
        public float HoverDelayNormal
        {
            get
            {
                return ((__Internal*)__Instance)->HoverDelayNormal;
            }

            set
            {
                ((__Internal*)__Instance)->HoverDelayNormal = value;
            }
        }

        /// <summary>Default flags when using IsItemHovered(ImGuiHoveredFlags_ForTooltip) or BeginItemTooltip()/SetItemTooltip() while using mouse.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2036"/></summary>
        public ImGuiHoveredFlags HoverFlagsForTooltipMouse
        {
            get
            {
                return ((__Internal*)__Instance)->HoverFlagsForTooltipMouse;
            }

            set
            {
                ((__Internal*)__Instance)->HoverFlagsForTooltipMouse = value;
            }
        }

        /// <summary>Default flags when using IsItemHovered(ImGuiHoveredFlags_ForTooltip) or BeginItemTooltip()/SetItemTooltip() while using keyboard/gamepad.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2037"/></summary>
        public ImGuiHoveredFlags HoverFlagsForTooltipNav
        {
            get
            {
                return ((__Internal*)__Instance)->HoverFlagsForTooltipNav;
            }

            set
            {
                ((__Internal*)__Instance)->HoverFlagsForTooltipNav = value;
            }
        }
    }

    /// <summary>[Internal] Storage used by IsKeyDown(), IsKeyPressed() etc functions.<br/>If prior to 1.87 you used io.KeysDownDuration[] (which was marked as internal), you should use GetKeyData(key)-&gt;DownDuration and *NOT* io.KeysData[key]-&gt;DownDuration.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2052"/></summary>
    // DEBUG: struct ImGuiKeyData
    // DEBUG: {
    // DEBUG:     bool        Down;               // True for if key is down
    // DEBUG:     float       DownDuration;       // Duration the key has been down (<0.0f: not pressed, 0.0f: just pressed, >0.0f: time held)
    // DEBUG:     float       DownDurationPrev;   // Last frame duration the key has been down
    // DEBUG:     float       AnalogValue;        // 0.0f..1.0f for gamepad values
    // DEBUG: }
    public unsafe partial class ImGuiKeyData : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal byte Down;
            internal float DownDuration;
            internal float DownDurationPrev;
            internal float AnalogValue;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiKeyData@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiKeyData@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiKeyData>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiKeyData>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiKeyData managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiKeyData>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiKeyData managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiKeyData __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiKeyData(native.ToPointer(), skipVTables);
        }

        internal static ImGuiKeyData __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiKeyData)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiKeyData __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiKeyData(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiKeyData(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiKeyData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary>[Internal] Storage used by IsKeyDown(), IsKeyPressed() etc functions.<br/>If prior to 1.87 you used io.KeysDownDuration[] (which was marked as internal), you should use GetKeyData(key)-&gt;DownDuration and *NOT* io.KeysData[key]-&gt;DownDuration.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2052"/></summary>
        // DEBUG: ImGuiKeyData
        public ImGuiKeyData(ImGuiKeyData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiKeyData.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <summary>[Internal] Storage used by IsKeyDown(), IsKeyPressed() etc functions.<br/>If prior to 1.87 you used io.KeysDownDuration[] (which was marked as internal), you should use GetKeyData(key)-&gt;DownDuration and *NOT* io.KeysData[key]-&gt;DownDuration.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2052"/></summary>
        // DEBUG: ImGuiKeyData
        public ImGuiKeyData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiKeyData.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        /// <inheritdoc/>
        ~ImGuiKeyData()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>True for if key is down.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2054"/></summary>
        public bool Down
        {
            get
            {
                return ((__Internal*)__Instance)->Down != 0;
            }

            set
            {
                ((__Internal*)__Instance)->Down = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Duration the key has been down (&lt;0.0f: not pressed, 0.0f: just pressed, &gt;0.0f: time held).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2055"/></summary>
        public float DownDuration
        {
            get
            {
                return ((__Internal*)__Instance)->DownDuration;
            }

            set
            {
                ((__Internal*)__Instance)->DownDuration = value;
            }
        }

        /// <summary>Last frame duration the key has been down.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2056"/></summary>
        public float DownDurationPrev
        {
            get
            {
                return ((__Internal*)__Instance)->DownDurationPrev;
            }

            set
            {
                ((__Internal*)__Instance)->DownDurationPrev = value;
            }
        }

        /// <summary>0.0f..1.0f for gamepad values.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2057"/></summary>
        public float AnalogValue
        {
            get
            {
                return ((__Internal*)__Instance)->AnalogValue;
            }

            set
            {
                ((__Internal*)__Instance)->AnalogValue = value;
            }
        }
    }

    /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2060"/></summary>
    // DEBUG: struct ImGuiIO
    // DEBUG: {
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG:     // Configuration                            // Default value
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG: 
    // DEBUG:     ImGuiConfigFlags   ConfigFlags;             // = 0              // See ImGuiConfigFlags_ enum. Set by user/application. Gamepad/keyboard navigation options, etc.
    // DEBUG:     ImGuiBackendFlags  BackendFlags;            // = 0              // See ImGuiBackendFlags_ enum. Set by backend (imgui_impl_xxx files or custom backend) to communicate features supported by the backend.
    // DEBUG:     ImVec2      DisplaySize;                    // <unset>          // Main display size, in pixels (generally == GetMainViewport()->Size). May change every frame.
    // DEBUG:     float       DeltaTime;                      // = 1.0f/60.0f     // Time elapsed since last frame, in seconds. May change every frame.
    // DEBUG:     float       IniSavingRate;                  // = 5.0f           // Minimum time between saving positions/sizes to .ini file, in seconds.
    // DEBUG:     const char* IniFilename;                    // = "imgui.ini"    // Path to .ini file (important: default "imgui.ini" is relative to current working dir!). Set NULL to disable automatic .ini loading/saving or if you want to manually call LoadIniSettingsXXX() / SaveIniSettingsXXX() functions.
    // DEBUG:     const char* LogFilename;                    // = "imgui_log.txt"// Path to .log file (default parameter to ImGui::LogToFile when no file is specified).
    // DEBUG:     void*       UserData;                       // = NULL           // Store your own data.
    // DEBUG: 
    // DEBUG:     ImFontAtlas*Fonts;                          // <auto>           // Font atlas: load, rasterize and pack one or more fonts into a single texture.
    // DEBUG:     float       FontGlobalScale;                // = 1.0f           // Global scale all fonts
    // DEBUG:     bool        FontAllowUserScaling;           // = false          // Allow user scaling text of individual window with CTRL+Wheel.
    // DEBUG:     ImFont*     FontDefault;                    // = NULL           // Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0].
    // DEBUG:     ImVec2      DisplayFramebufferScale;        // = (1, 1)         // For retina display or other situations where window coordinates are different from framebuffer coordinates. This generally ends up in ImDrawData::FramebufferScale.
    // DEBUG: 
    // DEBUG:     // Docking options (when ImGuiConfigFlags_DockingEnable is set)
    // DEBUG:     bool        ConfigDockingNoSplit;           // = false          // Simplified docking mode: disable window splitting, so docking is limited to merging multiple windows together into tab-bars.
    // DEBUG:     bool        ConfigDockingWithShift;         // = false          // Enable docking with holding Shift key (reduce visual noise, allows dropping in wider space)
    // DEBUG:     bool        ConfigDockingAlwaysTabBar;      // = false          // [BETA] [FIXME: This currently creates regression with auto-sizing and general overhead] Make every single floating window display within a docking node.
    // DEBUG:     bool        ConfigDockingTransparentPayload;// = false          // [BETA] Make window or viewport transparent when docking and only display docking boxes on the target viewport. Useful if rendering of multiple viewport cannot be synced. Best used with ConfigViewportsNoAutoMerge.
    // DEBUG: 
    // DEBUG:     // Viewport options (when ImGuiConfigFlags_ViewportsEnable is set)
    // DEBUG:     bool        ConfigViewportsNoAutoMerge;     // = false;         // Set to make all floating imgui windows always create their own viewport. Otherwise, they are merged into the main host viewports when overlapping it. May also set ImGuiViewportFlags_NoAutoMerge on individual viewport.
    // DEBUG:     bool        ConfigViewportsNoTaskBarIcon;   // = false          // Disable default OS task bar icon flag for secondary viewports. When a viewport doesn't want a task bar icon, ImGuiViewportFlags_NoTaskBarIcon will be set on it.
    // DEBUG:     bool        ConfigViewportsNoDecoration;    // = true           // Disable default OS window decoration flag for secondary viewports. When a viewport doesn't want window decorations, ImGuiViewportFlags_NoDecoration will be set on it. Enabling decoration can create subsequent issues at OS levels (e.g. minimum window size).
    // DEBUG:     bool        ConfigViewportsNoDefaultParent; // = false          // Disable default OS parenting to main viewport for secondary viewports. By default, viewports are marked with ParentViewportId = <main_viewport>, expecting the platform backend to setup a parent/child relationship between the OS windows (some backend may ignore this). Set to true if you want the default to be 0, then all viewports will be top-level OS windows.
    // DEBUG: 
    // DEBUG:     // Miscellaneous options
    // DEBUG:     bool        MouseDrawCursor;                // = false          // Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor). Cannot be easily renamed to 'io.ConfigXXX' because this is frequently used by backend implementations.
    // DEBUG:     bool        ConfigMacOSXBehaviors;          // = defined(__APPLE__) // OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd/Super instead of Ctrl.
    // DEBUG:     bool        ConfigInputTrickleEventQueue;   // = true           // Enable input queue trickling: some types of events submitted during the same frame (e.g. button down + up) will be spread over multiple frames, improving interactions with low framerates.
    // DEBUG:     bool        ConfigInputTextCursorBlink;     // = true           // Enable blinking cursor (optional as some users consider it to be distracting).
    // DEBUG:     bool        ConfigInputTextEnterKeepActive; // = false          // [BETA] Pressing Enter will keep item active and select contents (single-line only).
    // DEBUG:     bool        ConfigDragClickToInputText;     // = false          // [BETA] Enable turning DragXXX widgets into text input with a simple mouse click-release (without moving). Not desirable on devices without a keyboard.
    // DEBUG:     bool        ConfigWindowsResizeFromEdges;   // = true           // Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be a per-window ImGuiWindowFlags_ResizeFromAnySide flag)
    // DEBUG:     bool        ConfigWindowsMoveFromTitleBarOnly; // = false       // Enable allowing to move windows only when clicking on their title bar. Does not apply to windows without a title bar.
    // DEBUG:     float       ConfigMemoryCompactTimer;       // = 60.0f          // Timer (in seconds) to free transient windows/tables memory buffers when unused. Set to -1.0f to disable.
    // DEBUG: 
    // DEBUG:     // Inputs Behaviors
    // DEBUG:     // (other variables, ones which are expected to be tweaked within UI code, are exposed in ImGuiStyle)
    // DEBUG:     float       MouseDoubleClickTime;           // = 0.30f          // Time for a double-click, in seconds.
    // DEBUG:     float       MouseDoubleClickMaxDist;        // = 6.0f           // Distance threshold to stay in to validate a double-click, in pixels.
    // DEBUG:     float       MouseDragThreshold;             // = 6.0f           // Distance threshold before considering we are dragging.
    // DEBUG:     float       KeyRepeatDelay;                 // = 0.275f         // When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).
    // DEBUG:     float       KeyRepeatRate;                  // = 0.050f         // When holding a key/button, rate at which it repeats, in seconds.
    // DEBUG: 
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG:     // Debug options
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG: 
    // DEBUG:     // Tools to test correct Begin/End and BeginChild/EndChild behaviors.
    // DEBUG:     // Presently Begin()/End() and BeginChild()/EndChild() needs to ALWAYS be called in tandem, regardless of return value of BeginXXX()
    // DEBUG:     // This is inconsistent with other BeginXXX functions and create confusion for many users.
    // DEBUG:     // We expect to update the API eventually. In the meanwhile we provide tools to facilitate checking user-code behavior.
    // DEBUG:     bool        ConfigDebugBeginReturnValueOnce;// = false          // First-time calls to Begin()/BeginChild() will return false. NEEDS TO BE SET AT APPLICATION BOOT TIME if you don't want to miss windows.
    // DEBUG:     bool        ConfigDebugBeginReturnValueLoop;// = false          // Some calls to Begin()/BeginChild() will return false. Will cycle through window depths then repeat. Suggested use: add "io.ConfigDebugBeginReturnValue = io.KeyShift" in your main loop then occasionally press SHIFT. Windows should be flickering while running.
    // DEBUG: 
    // DEBUG:     // Option to deactivate io.AddFocusEvent(false) handling. May facilitate interactions with a debugger when focus loss leads to clearing inputs data.
    // DEBUG:     // Backends may have other side-effects on focus loss, so this will reduce side-effects but not necessary remove all of them.
    // DEBUG:     // Consider using e.g. Win32's IsDebuggerPresent() as an additional filter (or see ImOsIsDebuggerPresent() in imgui_test_engine/imgui_te_utils.cpp for a Unix compatible version).
    // DEBUG:     bool        ConfigDebugIgnoreFocusLoss;     // = false          // Ignore io.AddFocusEvent(false), consequently not calling io.ClearInputKeys() in input processing.
    // DEBUG: 
    // DEBUG:     // Option to audit .ini data
    // DEBUG:     bool        ConfigDebugIniSettings;         // = false          // Save .ini data with extra comments (particularly helpful for Docking, but makes saving slower)
    // DEBUG: 
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG:     // Platform Functions
    // DEBUG:     // (the imgui_impl_xxxx backend files are setting those up for you)
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG: 
    // DEBUG:     // Optional: Platform/Renderer backend name (informational only! will be displayed in About Window) + User data for backend/wrappers to store their own stuff.
    // DEBUG:     const char* BackendPlatformName;            // = NULL
    // DEBUG:     const char* BackendRendererName;            // = NULL
    // DEBUG:     void*       BackendPlatformUserData;        // = NULL           // User data for platform backend
    // DEBUG:     void*       BackendRendererUserData;        // = NULL           // User data for renderer backend
    // DEBUG:     void*       BackendLanguageUserData;        // = NULL           // User data for non C++ programming language backend
    // DEBUG: 
    // DEBUG:     // Optional: Access OS clipboard
    // DEBUG:     // (default to use native Win32 clipboard on Windows, otherwise uses a private clipboard. Override to access OS clipboard on other architectures)
    // DEBUG:     const char* (*GetClipboardTextFn)(void* user_data);
    // DEBUG:     void        (*SetClipboardTextFn)(void* user_data, const char* text);
    // DEBUG:     void*       ClipboardUserData;
    // DEBUG: 
    // DEBUG:     // Optional: Notify OS Input Method Editor of the screen position of your cursor for text input position (e.g. when using Japanese/Chinese IME on Windows)
    // DEBUG:     // (default to use native imm32 api on Windows)
    // DEBUG:     void        (*SetPlatformImeDataFn)(ImGuiViewport* viewport, ImGuiPlatformImeData* data);
    // DEBUG: 
    // DEBUG:     // Optional: Platform locale
    // DEBUG:     ImWchar     PlatformLocaleDecimalPoint;     // '.'              // [Experimental] Configure decimal point e.g. '.' or ',' useful for some languages (e.g. German), generally pulled from *localeconv()->decimal_point
    // DEBUG: 
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG:     // Input - Call before calling NewFrame()
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG: 
    // DEBUG:     // Input Functions
    // DEBUG:     IMGUI_API void  AddKeyEvent(ImGuiKey key, bool down);                   // Queue a new key down/up event. Key should be "translated" (as in, generally ImGuiKey_A matches the key end-user would use to emit an 'A' character)
    // DEBUG:     IMGUI_API void  AddKeyAnalogEvent(ImGuiKey key, bool down, float v);    // Queue a new key down/up event for analog values (e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend.
    // DEBUG:     IMGUI_API void  AddMousePosEvent(float x, float y);                     // Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered)
    // DEBUG:     IMGUI_API void  AddMouseButtonEvent(int button, bool down);             // Queue a mouse button change
    // DEBUG:     IMGUI_API void  AddMouseWheelEvent(float wheel_x, float wheel_y);       // Queue a mouse wheel update. wheel_y<0: scroll down, wheel_y>0: scroll up, wheel_x<0: scroll right, wheel_x>0: scroll left.
    // DEBUG:     IMGUI_API void  AddMouseSourceEvent(ImGuiMouseSource source);           // Queue a mouse source change (Mouse/TouchScreen/Pen)
    // DEBUG:     IMGUI_API void  AddMouseViewportEvent(ImGuiID id);                      // Queue a mouse hovered viewport. Requires backend to set ImGuiBackendFlags_HasMouseHoveredViewport to call this (for multi-viewport support).
    // DEBUG:     IMGUI_API void  AddFocusEvent(bool focused);                            // Queue a gain/loss of focus for the application (generally based on OS/platform focus of your window)
    // DEBUG:     IMGUI_API void  AddInputCharacter(unsigned int c);                      // Queue a new character input
    // DEBUG:     IMGUI_API void  AddInputCharacterUTF16(ImWchar16 c);                    // Queue a new character input from a UTF-16 character, it can be a surrogate
    // DEBUG:     IMGUI_API void  AddInputCharactersUTF8(const char* str);                // Queue a new characters input from a UTF-8 string
    // DEBUG: 
    // DEBUG:     IMGUI_API void  SetKeyEventNativeData(ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index = -1); // [Optional] Specify index for legacy <1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.
    // DEBUG:     IMGUI_API void  SetAppAcceptingEvents(bool accepting_events);           // Set master flag for accepting key/mouse/text events (default to true). Useful if you have native dialog boxes that are interrupting your application loop/refresh, and you want to disable events being queued while your app is frozen.
    // DEBUG:     IMGUI_API void  ClearEventsQueue();                                     // Clear all incoming events.
    // DEBUG:     IMGUI_API void  ClearInputKeys();                                       // Clear current keyboard/mouse/gamepad state + current frame text input buffer. Equivalent to releasing all keys/buttons.
    // DEBUG: #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    // DEBUG:     IMGUI_API void  ClearInputCharacters();                                 // [Obsolete] Clear the current frame text input buffer. Now included within ClearInputKeys().
    // DEBUG: #endif
    // DEBUG: 
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG:     // Output - Updated by NewFrame() or EndFrame()/Render()
    // DEBUG:     // (when reading from the io.WantCaptureMouse, io.WantCaptureKeyboard flags to dispatch your inputs, it is
    // DEBUG:     //  generally easier and more correct to use their state BEFORE calling NewFrame(). See FAQ for details!)
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG: 
    // DEBUG:     bool        WantCaptureMouse;                   // Set when Dear ImGui will use mouse inputs, in this case do not dispatch them to your main game/application (either way, always pass on mouse inputs to imgui). (e.g. unclicked mouse is hovering over an imgui window, widget is active, mouse was clicked over an imgui window, etc.).
    // DEBUG:     bool        WantCaptureKeyboard;                // Set when Dear ImGui will use keyboard inputs, in this case do not dispatch them to your main game/application (either way, always pass keyboard inputs to imgui). (e.g. InputText active, or an imgui window is focused and navigation is enabled, etc.).
    // DEBUG:     bool        WantTextInput;                      // Mobile/console: when set, you may display an on-screen keyboard. This is set by Dear ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).
    // DEBUG:     bool        WantSetMousePos;                    // MousePos has been altered, backend should reposition mouse on next frame. Rarely used! Set only when ImGuiConfigFlags_NavEnableSetMousePos flag is enabled.
    // DEBUG:     bool        WantSaveIniSettings;                // When manual .ini load/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. Important: clear io.WantSaveIniSettings yourself after saving!
    // DEBUG:     bool        NavActive;                          // Keyboard/Gamepad navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.
    // DEBUG:     bool        NavVisible;                         // Keyboard/Gamepad navigation is visible and allowed (will handle ImGuiKey_NavXXX events).
    // DEBUG:     float       Framerate;                          // Estimate of application framerate (rolling average over 60 frames, based on io.DeltaTime), in frame per second. Solely for convenience. Slow applications may not want to use a moving average or may want to reset underlying buffers occasionally.
    // DEBUG:     int         MetricsRenderVertices;              // Vertices output during last call to Render()
    // DEBUG:     int         MetricsRenderIndices;               // Indices output during last call to Render() = number of triangles * 3
    // DEBUG:     int         MetricsRenderWindows;               // Number of visible windows
    // DEBUG:     int         MetricsActiveWindows;               // Number of active windows
    // DEBUG:     ImVec2      MouseDelta;                         // Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have a huge delta.
    // DEBUG: 
    // DEBUG:     // Legacy: before 1.87, we required backend to fill io.KeyMap[] (imgui->native map) during initialization and io.KeysDown[] (native indices) every frame.
    // DEBUG:     // This is still temporarily supported as a legacy feature. However the new preferred scheme is for backend to call io.AddKeyEvent().
    // DEBUG:     //   Old (<1.87):  ImGui::IsKeyPressed(ImGui::GetIO().KeyMap[ImGuiKey_Space]) --> New (1.87+) ImGui::IsKeyPressed(ImGuiKey_Space)
    // DEBUG: #ifndef IMGUI_DISABLE_OBSOLETE_KEYIO
    // DEBUG:     int         KeyMap[ImGuiKey_COUNT];             // [LEGACY] Input: map of indices into the KeysDown[512] entries array which represent your "native" keyboard state. The first 512 are now unused and should be kept zero. Legacy backend will write into KeyMap[] using ImGuiKey_ indices which are always >512.
    // DEBUG:     bool        KeysDown[ImGuiKey_COUNT];           // [LEGACY] Input: Keyboard keys that are pressed (ideally left in the "native" order your engine has access to keyboard keys, so you can use your own defines/enums for keys). This used to be [512] sized. It is now ImGuiKey_COUNT to allow legacy io.KeysDown[GetKeyIndex(...)] to work without an overflow.
    // DEBUG:     float       NavInputs[ImGuiNavInput_COUNT];     // [LEGACY] Since 1.88, NavInputs[] was removed. Backends from 1.60 to 1.86 won't build. Feed gamepad inputs via io.AddKeyEvent() and ImGuiKey_GamepadXXX enums.
    // DEBUG: #endif
    // DEBUG: #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    // DEBUG:     void*       ImeWindowHandle;                    // = NULL   // [Obsoleted in 1.87] Set ImGuiViewport::PlatformHandleRaw instead. Set this to your HWND to get automatic IME cursor positioning.
    // DEBUG: #else
    // DEBUG:     void*       _UnusedPadding;
    // DEBUG: #endif
    // DEBUG: 
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG:     // [Internal] Dear ImGui will maintain those fields. Forward compatibility not guaranteed!
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG: 
    // DEBUG:     ImGuiContext* Ctx;                              // Parent UI context (needs to be set explicitly by parent).
    // DEBUG: 
    // DEBUG:     // Main Input State
    // DEBUG:     // (this block used to be written by backend, since 1.87 it is best to NOT write to those directly, call the AddXXX functions above instead)
    // DEBUG:     // (reading from those variables is fair game, as they are extremely unlikely to be moving anywhere)
    // DEBUG:     ImVec2      MousePos;                           // Mouse position, in pixels. Set to ImVec2(-FLT_MAX, -FLT_MAX) if mouse is unavailable (on another screen, etc.)
    // DEBUG:     bool        MouseDown[5];                       // Mouse buttons: 0=left, 1=right, 2=middle + extras (ImGuiMouseButton_COUNT == 5). Dear ImGui mostly uses left and right buttons. Other buttons allow us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.
    // DEBUG:     float       MouseWheel;                         // Mouse wheel Vertical: 1 unit scrolls about 5 lines text. >0 scrolls Up, <0 scrolls Down. Hold SHIFT to turn vertical scroll into horizontal scroll.
    // DEBUG:     float       MouseWheelH;                        // Mouse wheel Horizontal. >0 scrolls Left, <0 scrolls Right. Most users don't have a mouse with a horizontal wheel, may not be filled by all backends.
    // DEBUG:     ImGuiMouseSource MouseSource;                   // Mouse actual input peripheral (Mouse/TouchScreen/Pen).
    // DEBUG:     ImGuiID     MouseHoveredViewport;               // (Optional) Modify using io.AddMouseViewportEvent(). With multi-viewports: viewport the OS mouse is hovering. If possible _IGNORING_ viewports with the ImGuiViewportFlags_NoInputs flag is much better (few backends can handle that). Set io.BackendFlags |= ImGuiBackendFlags_HasMouseHoveredViewport if you can provide this info. If you don't imgui will infer the value using the rectangles and last focused time of the viewports it knows about (ignoring other OS windows).
    // DEBUG:     bool        KeyCtrl;                            // Keyboard modifier down: Control
    // DEBUG:     bool        KeyShift;                           // Keyboard modifier down: Shift
    // DEBUG:     bool        KeyAlt;                             // Keyboard modifier down: Alt
    // DEBUG:     bool        KeySuper;                           // Keyboard modifier down: Cmd/Super/Windows
    // DEBUG: 
    // DEBUG:     // Other state maintained from data above + IO function calls
    // DEBUG:     ImGuiKeyChord KeyMods;                          // Key mods flags (any of ImGuiMod_Ctrl/ImGuiMod_Shift/ImGuiMod_Alt/ImGuiMod_Super flags, same as io.KeyCtrl/KeyShift/KeyAlt/KeySuper but merged into flags. DOES NOT CONTAINS ImGuiMod_Shortcut which is pretranslated). Read-only, updated by NewFrame()
    // DEBUG:     ImGuiKeyData  KeysData[ImGuiKey_KeysData_SIZE]; // Key state for all known keys. Use IsKeyXXX() functions to access this.
    // DEBUG:     bool        WantCaptureMouseUnlessPopupClose;   // Alternative to WantCaptureMouse: (WantCaptureMouse == true && WantCaptureMouseUnlessPopupClose == false) when a click over void is expected to close a popup.
    // DEBUG:     ImVec2      MousePosPrev;                       // Previous mouse position (note that MouseDelta is not necessary == MousePos-MousePosPrev, in case either position is invalid)
    // DEBUG:     ImVec2      MouseClickedPos[5];                 // Position at time of clicking
    // DEBUG:     double      MouseClickedTime[5];                // Time of last click (used to figure out double-click)
    // DEBUG:     bool        MouseClicked[5];                    // Mouse button went from !Down to Down (same as MouseClickedCount[x] != 0)
    // DEBUG:     bool        MouseDoubleClicked[5];              // Has mouse button been double-clicked? (same as MouseClickedCount[x] == 2)
    // DEBUG:     ImU16       MouseClickedCount[5];               // == 0 (not clicked), == 1 (same as MouseClicked[]), == 2 (double-clicked), == 3 (triple-clicked) etc. when going from !Down to Down
    // DEBUG:     ImU16       MouseClickedLastCount[5];           // Count successive number of clicks. Stays valid after mouse release. Reset after another click is done.
    // DEBUG:     bool        MouseReleased[5];                   // Mouse button went from Down to !Down
    // DEBUG:     bool        MouseDownOwned[5];                  // Track if button was clicked inside a dear imgui window or over void blocked by a popup. We don't request mouse capture from the application if click started outside ImGui bounds.
    // DEBUG:     bool        MouseDownOwnedUnlessPopupClose[5];  // Track if button was clicked inside a dear imgui window.
    // DEBUG:     bool        MouseWheelRequestAxisSwap;          // On a non-Mac system, holding SHIFT requests WheelY to perform the equivalent of a WheelX event. On a Mac system this is already enforced by the system.
    // DEBUG:     float       MouseDownDuration[5];               // Duration the mouse button has been down (0.0f == just clicked)
    // DEBUG:     float       MouseDownDurationPrev[5];           // Previous time the mouse button has been down
    // DEBUG:     ImVec2      MouseDragMaxDistanceAbs[5];         // Maximum distance, absolute, on each axis, of how much mouse has traveled from the clicking point
    // DEBUG:     float       MouseDragMaxDistanceSqr[5];         // Squared maximum distance of how much mouse has traveled from the clicking point (used for moving thresholds)
    // DEBUG:     float       PenPressure;                        // Touch/Pen pressure (0.0f to 1.0f, should be >0.0f only when MouseDown[0] == true). Helper storage currently unused by Dear ImGui.
    // DEBUG:     bool        AppFocusLost;                       // Only modify via AddFocusEvent()
    // DEBUG:     bool        AppAcceptingEvents;                 // Only modify via SetAppAcceptingEvents()
    // DEBUG:     ImS8        BackendUsingLegacyKeyArrays;        // -1: unknown, 0: using AddKeyEvent(), 1: using legacy io.KeysDown[]
    // DEBUG:     bool        BackendUsingLegacyNavInputArray;    // 0: using AddKeyAnalogEvent(), 1: writing to legacy io.NavInputs[] directly
    // DEBUG:     ImWchar16   InputQueueSurrogate;                // For AddInputCharacterUTF16()
    // DEBUG:     ImVector<ImWchar> InputQueueCharacters;         // Queue of _characters_ input (obtained by platform backend). Fill using AddInputCharacter() helper.
    // DEBUG: 
    // DEBUG:     IMGUI_API   ImGuiIO();
    // DEBUG: }
    public unsafe partial class ImGuiIO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal ImGuiConfigFlags ConfigFlags;
            internal ImGuiBackendFlags BackendFlags;
            internal Vector2 DisplaySize;
            internal float DeltaTime;
            internal float IniSavingRate;
            internal IntPtr IniFilename;
            internal IntPtr LogFilename;
            internal IntPtr UserData;
            internal IntPtr Fonts;
            internal float FontGlobalScale;
            internal byte FontAllowUserScaling;
            internal IntPtr FontDefault;
            internal Vector2 DisplayFramebufferScale;
            internal byte ConfigDockingNoSplit;
            internal byte ConfigDockingWithShift;
            internal byte ConfigDockingAlwaysTabBar;
            internal byte ConfigDockingTransparentPayload;
            internal byte ConfigViewportsNoAutoMerge;
            internal byte ConfigViewportsNoTaskBarIcon;
            internal byte ConfigViewportsNoDecoration;
            internal byte ConfigViewportsNoDefaultParent;
            internal byte MouseDrawCursor;
            internal byte ConfigMacOSXBehaviors;
            internal byte ConfigInputTrickleEventQueue;
            internal byte ConfigInputTextCursorBlink;
            internal byte ConfigInputTextEnterKeepActive;
            internal byte ConfigDragClickToInputText;
            internal byte ConfigWindowsResizeFromEdges;
            internal byte ConfigWindowsMoveFromTitleBarOnly;
            internal float ConfigMemoryCompactTimer;
            internal float MouseDoubleClickTime;
            internal float MouseDoubleClickMaxDist;
            internal float MouseDragThreshold;
            internal float KeyRepeatDelay;
            internal float KeyRepeatRate;
            internal byte ConfigDebugBeginReturnValueOnce;
            internal byte ConfigDebugBeginReturnValueLoop;
            internal byte ConfigDebugIgnoreFocusLoss;
            internal byte ConfigDebugIniSettings;
            internal IntPtr BackendPlatformName;
            internal IntPtr BackendRendererName;
            internal IntPtr BackendPlatformUserData;
            internal IntPtr BackendRendererUserData;
            internal IntPtr BackendLanguageUserData;
            internal IntPtr GetClipboardTextFn;
            internal IntPtr SetClipboardTextFn;
            internal IntPtr ClipboardUserData;
            internal IntPtr SetPlatformImeDataFn;
            internal ushort PlatformLocaleDecimalPoint;
            internal byte WantCaptureMouse;
            internal byte WantCaptureKeyboard;
            internal byte WantTextInput;
            internal byte WantSetMousePos;
            internal byte WantSaveIniSettings;
            internal byte NavActive;
            internal byte NavVisible;
            internal float Framerate;
            internal int MetricsRenderVertices;
            internal int MetricsRenderIndices;
            internal int MetricsRenderWindows;
            internal int MetricsActiveWindows;
            internal Vector2 MouseDelta;
            internal IntPtr _UnusedPadding;
            internal IntPtr Ctx;
            internal Vector2 MousePos;
            internal fixed byte MouseDown[5];
            internal float MouseWheel;
            internal float MouseWheelH;
            internal ImGuiMouseSource MouseSource;
            internal uint MouseHoveredViewport;
            internal byte KeyCtrl;
            internal byte KeyShift;
            internal byte KeyAlt;
            internal byte KeySuper;
            internal int KeyMods;
            internal fixed byte KeysData[2464];
            internal byte WantCaptureMouseUnlessPopupClose;
            internal Vector2 MousePosPrev;
            internal fixed byte MouseClickedPos[40];
            internal fixed double MouseClickedTime[5];
            internal fixed byte MouseClicked[5];
            internal fixed byte MouseDoubleClicked[5];
            internal fixed ushort MouseClickedCount[5];
            internal fixed ushort MouseClickedLastCount[5];
            internal fixed byte MouseReleased[5];
            internal fixed byte MouseDownOwned[5];
            internal fixed byte MouseDownOwnedUnlessPopupClose[5];
            internal byte MouseWheelRequestAxisSwap;
            internal fixed float MouseDownDuration[5];
            internal fixed float MouseDownDurationPrev[5];
            internal fixed byte MouseDragMaxDistanceAbs[40];
            internal fixed float MouseDragMaxDistanceSqr[5];
            internal float PenPressure;
            internal byte AppFocusLost;
            internal byte AppAcceptingEvents;
            internal sbyte BackendUsingLegacyKeyArrays;
            internal byte BackendUsingLegacyNavInputArray;
            internal ushort InputQueueSurrogate;
            internal ImVector.__Internal InputQueueCharacters;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiIO@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiIO@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImGuiIO@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddKeyEvent@ImGuiIO@@QAEXW4ImGuiKey@@_N@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddKeyEvent(IntPtr __instance, ImGuiKey key, bool down);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddKeyAnalogEvent@ImGuiIO@@QAEXW4ImGuiKey@@_NM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddKeyAnalogEvent(IntPtr __instance, ImGuiKey key, bool down, float v);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddMousePosEvent@ImGuiIO@@QAEXMM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddMousePosEvent(IntPtr __instance, float x, float y);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddMouseButtonEvent@ImGuiIO@@QAEXH_N@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddMouseButtonEvent(IntPtr __instance, int button, bool down);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddMouseWheelEvent@ImGuiIO@@QAEXMM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddMouseWheelEvent(IntPtr __instance, float wheel_x, float wheel_y);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddMouseSourceEvent@ImGuiIO@@QAEXW4ImGuiMouseSource@@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddMouseSourceEvent(IntPtr __instance, ImGuiMouseSource source);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddMouseViewportEvent@ImGuiIO@@QAEXI@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddMouseViewportEvent(IntPtr __instance, uint id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddFocusEvent@ImGuiIO@@QAEX_N@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddFocusEvent(IntPtr __instance, bool focused);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddInputCharacter@ImGuiIO@@QAEXI@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddInputCharacter(IntPtr __instance, uint c);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddInputCharacterUTF16@ImGuiIO@@QAEXG@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddInputCharacterUTF16(IntPtr __instance, ushort c);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddInputCharactersUTF8@ImGuiIO@@QAEXPBD@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddInputCharactersUTF8(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetKeyEventNativeData@ImGuiIO@@QAEXW4ImGuiKey@@HHH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void SetKeyEventNativeData(IntPtr __instance, ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetAppAcceptingEvents@ImGuiIO@@QAEX_N@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void SetAppAcceptingEvents(IntPtr __instance, bool accepting_events);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearEventsQueue@ImGuiIO@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void ClearEventsQueue(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearInputKeys@ImGuiIO@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void ClearInputKeys(IntPtr __instance);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiIO@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiIO@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImGuiIO@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddKeyEvent(IntPtr __instance, ImGuiKey key, bool down);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddKeyAnalogEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_NM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddKeyAnalogEvent(IntPtr __instance, ImGuiKey key, bool down, float v);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddMousePosEvent@ImGuiIO@@QEAAXMM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddMousePosEvent(IntPtr __instance, float x, float y);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddMouseButtonEvent@ImGuiIO@@QEAAXH_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddMouseButtonEvent(IntPtr __instance, int button, bool down);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddMouseWheelEvent@ImGuiIO@@QEAAXMM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddMouseWheelEvent(IntPtr __instance, float wheel_x, float wheel_y);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddMouseSourceEvent@ImGuiIO@@QEAAXW4ImGuiMouseSource@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddMouseSourceEvent(IntPtr __instance, ImGuiMouseSource source);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddMouseViewportEvent@ImGuiIO@@QEAAXI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddMouseViewportEvent(IntPtr __instance, uint id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddFocusEvent@ImGuiIO@@QEAAX_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddFocusEvent(IntPtr __instance, bool focused);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddInputCharacter@ImGuiIO@@QEAAXI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddInputCharacter(IntPtr __instance, uint c);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddInputCharacterUTF16@ImGuiIO@@QEAAXG@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddInputCharacterUTF16(IntPtr __instance, ushort c);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddInputCharactersUTF8@ImGuiIO@@QEAAXPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddInputCharactersUTF8(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetKeyEventNativeData@ImGuiIO@@QEAAXW4ImGuiKey@@HHH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetKeyEventNativeData(IntPtr __instance, ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetAppAcceptingEvents@ImGuiIO@@QEAAX_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetAppAcceptingEvents(IntPtr __instance, bool accepting_events);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearEventsQueue@ImGuiIO@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ClearEventsQueue(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearInputKeys@ImGuiIO@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ClearInputKeys(IntPtr __instance);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiIO>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiIO>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiIO managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiIO>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiIO managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private bool __IniFilename_OwnsNativeMemory = false;
        private bool __LogFilename_OwnsNativeMemory = false;
        private bool __BackendPlatformName_OwnsNativeMemory = false;
        private bool __BackendRendererName_OwnsNativeMemory = false;
        private protected bool __ownsNativeInstance;
        internal static ImGuiIO __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiIO(native.ToPointer(), skipVTables);
        }

        internal static ImGuiIO __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiIO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiIO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiIO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiIO(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiIO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2262"/></summary>
        // DEBUG: ImGuiIO()
        public ImGuiIO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiIO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2060"/></summary>
        // DEBUG: ImGuiIO
        public ImGuiIO(ImGuiIO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiIO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImGuiIO()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                if (Environment.Is64BitProcess)
                {
                    __Internal64.dtor(__Instance);
                }
                else
                {
                    __Internal32.dtor(__Instance);
                }

            if (__IniFilename_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->IniFilename);
            if (__LogFilename_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->LogFilename);
            if (__BackendPlatformName_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->BackendPlatformName);
            if (__BackendRendererName_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->BackendRendererName);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Queue a new key down/up event. Key should be "translated" (as in, generally ImGuiKey_A matches the key end-user would use to emit an 'A' character).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2161"/></summary>
        // DEBUG: void  AddKeyEvent(ImGuiKey key, bool down)
        public void AddKeyEvent(ImGuiKey key, bool down)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.AddKeyEvent(__Instance, key, down);
            }
            else
            {
                __Internal32.AddKeyEvent(__Instance, key, down);
            }
        }

        /// <summary>Queue a new key down/up event for analog values (e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2162"/></summary>
        // DEBUG: void  AddKeyAnalogEvent(ImGuiKey key, bool down, float v)
        public void AddKeyAnalogEvent(ImGuiKey key, bool down, float v)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.AddKeyAnalogEvent(__Instance, key, down, v);
            }
            else
            {
                __Internal32.AddKeyAnalogEvent(__Instance, key, down, v);
            }
        }

        /// <summary>Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2163"/></summary>
        // DEBUG: void  AddMousePosEvent(float x, float y)
        public void AddMousePosEvent(float x, float y)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.AddMousePosEvent(__Instance, x, y);
            }
            else
            {
                __Internal32.AddMousePosEvent(__Instance, x, y);
            }
        }

        /// <summary>Queue a mouse button change.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2164"/></summary>
        // DEBUG: void  AddMouseButtonEvent(int button, bool down)
        public void AddMouseButtonEvent(int button, bool down)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.AddMouseButtonEvent(__Instance, button, down);
            }
            else
            {
                __Internal32.AddMouseButtonEvent(__Instance, button, down);
            }
        }

        /// <summary>Queue a mouse wheel update. wheel_y&lt;0: scroll down, wheel_y&gt;0: scroll up, wheel_x&lt;0: scroll right, wheel_x&gt;0: scroll left.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2165"/></summary>
        // DEBUG: void  AddMouseWheelEvent(float wheel_x, float wheel_y)
        public void AddMouseWheelEvent(float wheel_x, float wheel_y)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.AddMouseWheelEvent(__Instance, wheel_x, wheel_y);
            }
            else
            {
                __Internal32.AddMouseWheelEvent(__Instance, wheel_x, wheel_y);
            }
        }

        /// <summary>Queue a mouse source change (Mouse/TouchScreen/Pen).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2166"/></summary>
        // DEBUG: void  AddMouseSourceEvent(ImGuiMouseSource source)
        public void AddMouseSourceEvent(ImGuiMouseSource source)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.AddMouseSourceEvent(__Instance, source);
            }
            else
            {
                __Internal32.AddMouseSourceEvent(__Instance, source);
            }
        }

        /// <summary>Queue a mouse hovered viewport. Requires backend to set ImGuiBackendFlags_HasMouseHoveredViewport to call this (for multi-viewport support).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2167"/></summary>
        // DEBUG: void  AddMouseViewportEvent(ImGuiID id)
        public void AddMouseViewportEvent(uint id)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.AddMouseViewportEvent(__Instance, id);
            }
            else
            {
                __Internal32.AddMouseViewportEvent(__Instance, id);
            }
        }

        /// <summary>Queue a gain/loss of focus for the application (generally based on OS/platform focus of your window).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2168"/></summary>
        // DEBUG: void  AddFocusEvent(bool focused)
        public void AddFocusEvent(bool focused)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.AddFocusEvent(__Instance, focused);
            }
            else
            {
                __Internal32.AddFocusEvent(__Instance, focused);
            }
        }

        /// <summary>Queue a new character input.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2169"/></summary>
        // DEBUG: void  AddInputCharacter(unsigned int c)
        public void AddInputCharacter(uint c)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.AddInputCharacter(__Instance, c);
            }
            else
            {
                __Internal32.AddInputCharacter(__Instance, c);
            }
        }

        /// <summary>Queue a new character input from a UTF-16 character, it can be a surrogate.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2170"/></summary>
        // DEBUG: void  AddInputCharacterUTF16(ImWchar16 c)
        public void AddInputCharacterUTF16(ushort c)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.AddInputCharacterUTF16(__Instance, c);
            }
            else
            {
                __Internal32.AddInputCharacterUTF16(__Instance, c);
            }
        }

        /// <summary>Queue a new characters input from a UTF-8 string.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2171"/></summary>
        // DEBUG: void  AddInputCharactersUTF8(const char* str)
        public void AddInputCharactersUTF8(string str)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.AddInputCharactersUTF8(__Instance, str);
            }
            else
            {
                __Internal32.AddInputCharactersUTF8(__Instance, str);
            }
        }

        /// <summary>[Optional] Specify index for legacy &lt;1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2173"/></summary>
        // DEBUG: void  SetKeyEventNativeData(ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index = -1)
        public void SetKeyEventNativeData(ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index = (int)(-1))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetKeyEventNativeData(__Instance, key, native_keycode, native_scancode, native_legacy_index);
            }
            else
            {
                __Internal32.SetKeyEventNativeData(__Instance, key, native_keycode, native_scancode, native_legacy_index);
            }
        }

        /// <summary>Set master flag for accepting key/mouse/text events (default to true). Useful if you have native dialog boxes that are interrupting your application loop/refresh, and you want to disable events being queued while your app is frozen.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2174"/></summary>
        // DEBUG: void  SetAppAcceptingEvents(bool accepting_events)
        public void SetAppAcceptingEvents(bool accepting_events)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetAppAcceptingEvents(__Instance, accepting_events);
            }
            else
            {
                __Internal32.SetAppAcceptingEvents(__Instance, accepting_events);
            }
        }

        /// <summary>Clear all incoming events.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2175"/></summary>
        // DEBUG: void  ClearEventsQueue()
        public void ClearEventsQueue()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.ClearEventsQueue(__Instance);
            }
            else
            {
                __Internal32.ClearEventsQueue(__Instance);
            }
        }

        /// <summary>Clear current keyboard/mouse/gamepad state + current frame text input buffer. Equivalent to releasing all keys/buttons.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2176"/></summary>
        // DEBUG: void  ClearInputKeys()
        public void ClearInputKeys()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.ClearInputKeys(__Instance);
            }
            else
            {
                __Internal32.ClearInputKeys(__Instance);
            }
        }

        /// <summary>= 0.<br/>See ImGuiConfigFlags_ enum. Set by user/application. Gamepad/keyboard navigation options, etc.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2066"/></summary>
        public ImGuiConfigFlags ConfigFlags
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigFlags;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigFlags = value;
            }
        }

        /// <summary>= 0.<br/>See ImGuiBackendFlags_ enum. Set by backend (imgui_impl_xxx files or custom backend) to communicate features supported by the backend.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2067"/></summary>
        public ImGuiBackendFlags BackendFlags
        {
            get
            {
                return ((__Internal*)__Instance)->BackendFlags;
            }

            set
            {
                ((__Internal*)__Instance)->BackendFlags = value;
            }
        }

        /// <summary>&lt;unset&gt;.<br/>Main display size, in pixels (generally == GetMainViewport()-&gt;Size). May change every frame.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2068"/></summary>
        public Vector2 DisplaySize
        {
            get
            {
                return ((__Internal*)__Instance)->DisplaySize
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->DisplaySize = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>= 1.0f/60.0f.<br/>Time elapsed since last frame, in seconds. May change every frame.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2069"/></summary>
        public float DeltaTime
        {
            get
            {
                return ((__Internal*)__Instance)->DeltaTime;
            }

            set
            {
                ((__Internal*)__Instance)->DeltaTime = value;
            }
        }

        /// <summary>= 5.0f.<br/>Minimum time between saving positions/sizes to .ini file, in seconds.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2070"/></summary>
        public float IniSavingRate
        {
            get
            {
                return ((__Internal*)__Instance)->IniSavingRate;
            }

            set
            {
                ((__Internal*)__Instance)->IniSavingRate = value;
            }
        }

        /// <summary>= "imgui.ini".<br/>Path to .ini file (important: default "imgui.ini" is relative to current working dir!). Set NULL to disable automatic .ini loading/saving or if you want to manually call LoadIniSettingsXXX() / SaveIniSettingsXXX() functions.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2071"/></summary>
        public string IniFilename
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ((__Internal*)__Instance)->IniFilename);
            }

            set
            {
                if (__IniFilename_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->IniFilename);
                __IniFilename_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->IniFilename = IntPtr.Zero;
                    return;
                }

                var __bytes0 = Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->IniFilename = (IntPtr)__bytePtr0;
            }
        }

        /// <summary>= "imgui_log.txt".<br/>Path to .log file (default parameter to ImGui::LogToFile when no file is specified).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2072"/></summary>
        public string LogFilename
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ((__Internal*)__Instance)->LogFilename);
            }

            set
            {
                if (__LogFilename_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->LogFilename);
                __LogFilename_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->LogFilename = IntPtr.Zero;
                    return;
                }

                var __bytes0 = Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->LogFilename = (IntPtr)__bytePtr0;
            }
        }

        /// <summary>= NULL.<br/>Store your own data.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2073"/></summary>
        public IntPtr UserData
        {
            get
            {
                return ((__Internal*)__Instance)->UserData;
            }

            set
            {
                ((__Internal*)__Instance)->UserData = (IntPtr)value;
            }
        }

        /// <summary>&lt;auto&gt;.<br/>Font atlas: load, rasterize and pack one or more fonts into a single texture.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2075"/></summary>
        public ImFontAtlas Fonts
        {
            get
            {
                var __result0 = ImFontAtlas.__GetOrCreateInstance(((__Internal*)__Instance)->Fonts, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->Fonts = value is null ? IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>= 1.0f.<br/>Global scale all fonts.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2076"/></summary>
        public float FontGlobalScale
        {
            get
            {
                return ((__Internal*)__Instance)->FontGlobalScale;
            }

            set
            {
                ((__Internal*)__Instance)->FontGlobalScale = value;
            }
        }

        /// <summary>= false.<br/>Allow user scaling text of individual window with CTRL+Wheel.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2077"/></summary>
        public bool FontAllowUserScaling
        {
            get
            {
                return ((__Internal*)__Instance)->FontAllowUserScaling != 0;
            }

            set
            {
                ((__Internal*)__Instance)->FontAllowUserScaling = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= NULL.<br/>Font to use on NewFrame(). Use NULL to uses Fonts-&gt;Fonts[0].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2078"/></summary>
        public ImFont FontDefault
        {
            get
            {
                var __result0 = ImFont.__GetOrCreateInstance(((__Internal*)__Instance)->FontDefault, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->FontDefault = value is null ? IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>= (1, 1).<br/>For retina display or other situations where window coordinates are different from framebuffer coordinates. This generally ends up in ImDrawData::FramebufferScale.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2079"/></summary>
        public Vector2 DisplayFramebufferScale
        {
            get
            {
                return ((__Internal*)__Instance)->DisplayFramebufferScale
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->DisplayFramebufferScale = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>= false.<br/>Simplified docking mode: disable window splitting, so docking is limited to merging multiple windows together into tab-bars.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2082"/></summary>
        public bool ConfigDockingNoSplit
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigDockingNoSplit != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigDockingNoSplit = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= false.<br/>Enable docking with holding Shift key (reduce visual noise, allows dropping in wider space).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2083"/></summary>
        public bool ConfigDockingWithShift
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigDockingWithShift != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigDockingWithShift = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= false.<br/>[BETA] [FIXME: This currently creates regression with auto-sizing and general overhead] Make every single floating window display within a docking node.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2084"/></summary>
        public bool ConfigDockingAlwaysTabBar
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigDockingAlwaysTabBar != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigDockingAlwaysTabBar = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= false.<br/>[BETA] Make window or viewport transparent when docking and only display docking boxes on the target viewport. Useful if rendering of multiple viewport cannot be synced. Best used with ConfigViewportsNoAutoMerge.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2085"/></summary>
        public bool ConfigDockingTransparentPayload
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigDockingTransparentPayload != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigDockingTransparentPayload = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= false;.<br/>Set to make all floating imgui windows always create their own viewport. Otherwise, they are merged into the main host viewports when overlapping it. May also set ImGuiViewportFlags_NoAutoMerge on individual viewport.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2088"/></summary>
        public bool ConfigViewportsNoAutoMerge
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigViewportsNoAutoMerge != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigViewportsNoAutoMerge = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= false.<br/>Disable default OS task bar icon flag for secondary viewports. When a viewport doesn't want a task bar icon, ImGuiViewportFlags_NoTaskBarIcon will be set on it.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2089"/></summary>
        public bool ConfigViewportsNoTaskBarIcon
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigViewportsNoTaskBarIcon != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigViewportsNoTaskBarIcon = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= true.<br/>Disable default OS window decoration flag for secondary viewports. When a viewport doesn't want window decorations, ImGuiViewportFlags_NoDecoration will be set on it. Enabling decoration can create subsequent issues at OS levels (e.g. minimum window size).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2090"/></summary>
        public bool ConfigViewportsNoDecoration
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigViewportsNoDecoration != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigViewportsNoDecoration = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= false.<br/>Disable default OS parenting to main viewport for secondary viewports. By default, viewports are marked with ParentViewportId = &lt;main_viewport&gt;, expecting the platform backend to setup a parent/child relationship between the OS windows (some backend may ignore this). Set to true if you want the default to be 0, then all viewports will be top-level OS windows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2091"/></summary>
        public bool ConfigViewportsNoDefaultParent
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigViewportsNoDefaultParent != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigViewportsNoDefaultParent = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= false.<br/>Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor). Cannot be easily renamed to 'io.ConfigXXX' because this is frequently used by backend implementations.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2094"/></summary>
        public bool MouseDrawCursor
        {
            get
            {
                return ((__Internal*)__Instance)->MouseDrawCursor != 0;
            }

            set
            {
                ((__Internal*)__Instance)->MouseDrawCursor = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= defined(__APPLE__).<br/>OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd/Super instead of Ctrl.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2095"/></summary>
        public bool ConfigMacOSXBehaviors
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigMacOSXBehaviors != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigMacOSXBehaviors = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= true.<br/>Enable input queue trickling: some types of events submitted during the same frame (e.g. button down + up) will be spread over multiple frames, improving interactions with low framerates.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2096"/></summary>
        public bool ConfigInputTrickleEventQueue
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigInputTrickleEventQueue != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigInputTrickleEventQueue = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= true.<br/>Enable blinking cursor (optional as some users consider it to be distracting).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2097"/></summary>
        public bool ConfigInputTextCursorBlink
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigInputTextCursorBlink != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigInputTextCursorBlink = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= false.<br/>[BETA] Pressing Enter will keep item active and select contents (single-line only).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2098"/></summary>
        public bool ConfigInputTextEnterKeepActive
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigInputTextEnterKeepActive != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigInputTextEnterKeepActive = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= false.<br/>[BETA] Enable turning DragXXX widgets into text input with a simple mouse click-release (without moving). Not desirable on devices without a keyboard.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2099"/></summary>
        public bool ConfigDragClickToInputText
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigDragClickToInputText != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigDragClickToInputText = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= true.<br/>Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags &amp; ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be a per-window ImGuiWindowFlags_ResizeFromAnySide flag).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2100"/></summary>
        public bool ConfigWindowsResizeFromEdges
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigWindowsResizeFromEdges != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigWindowsResizeFromEdges = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= false.<br/>Enable allowing to move windows only when clicking on their title bar. Does not apply to windows without a title bar.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2101"/></summary>
        public bool ConfigWindowsMoveFromTitleBarOnly
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigWindowsMoveFromTitleBarOnly != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigWindowsMoveFromTitleBarOnly = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= 60.0f.<br/>Timer (in seconds) to free transient windows/tables memory buffers when unused. Set to -1.0f to disable.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2102"/></summary>
        public float ConfigMemoryCompactTimer
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigMemoryCompactTimer;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigMemoryCompactTimer = value;
            }
        }

        /// <summary>= 0.30f.<br/>Time for a double-click, in seconds.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2106"/></summary>
        public float MouseDoubleClickTime
        {
            get
            {
                return ((__Internal*)__Instance)->MouseDoubleClickTime;
            }

            set
            {
                ((__Internal*)__Instance)->MouseDoubleClickTime = value;
            }
        }

        /// <summary>= 6.0f.<br/>Distance threshold to stay in to validate a double-click, in pixels.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2107"/></summary>
        public float MouseDoubleClickMaxDist
        {
            get
            {
                return ((__Internal*)__Instance)->MouseDoubleClickMaxDist;
            }

            set
            {
                ((__Internal*)__Instance)->MouseDoubleClickMaxDist = value;
            }
        }

        /// <summary>= 6.0f.<br/>Distance threshold before considering we are dragging.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2108"/></summary>
        public float MouseDragThreshold
        {
            get
            {
                return ((__Internal*)__Instance)->MouseDragThreshold;
            }

            set
            {
                ((__Internal*)__Instance)->MouseDragThreshold = value;
            }
        }

        /// <summary>= 0.275f.<br/>When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2109"/></summary>
        public float KeyRepeatDelay
        {
            get
            {
                return ((__Internal*)__Instance)->KeyRepeatDelay;
            }

            set
            {
                ((__Internal*)__Instance)->KeyRepeatDelay = value;
            }
        }

        /// <summary>= 0.050f.<br/>When holding a key/button, rate at which it repeats, in seconds.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2110"/></summary>
        public float KeyRepeatRate
        {
            get
            {
                return ((__Internal*)__Instance)->KeyRepeatRate;
            }

            set
            {
                ((__Internal*)__Instance)->KeyRepeatRate = value;
            }
        }

        /// <summary>= false.<br/>First-time calls to Begin()/BeginChild() will return false. NEEDS TO BE SET AT APPLICATION BOOT TIME if you don't want to miss windows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2120"/></summary>
        public bool ConfigDebugBeginReturnValueOnce
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigDebugBeginReturnValueOnce != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigDebugBeginReturnValueOnce = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= false.<br/>Some calls to Begin()/BeginChild() will return false. Will cycle through window depths then repeat. Suggested use: add "io.ConfigDebugBeginReturnValue = io.KeyShift" in your main loop then occasionally press SHIFT. Windows should be flickering while running.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2121"/></summary>
        public bool ConfigDebugBeginReturnValueLoop
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigDebugBeginReturnValueLoop != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigDebugBeginReturnValueLoop = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= false.<br/>Ignore io.AddFocusEvent(false), consequently not calling io.ClearInputKeys() in input processing.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2126"/></summary>
        public bool ConfigDebugIgnoreFocusLoss
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigDebugIgnoreFocusLoss != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigDebugIgnoreFocusLoss = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= false.<br/>Save .ini data with extra comments (particularly helpful for Docking, but makes saving slower).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2129"/></summary>
        public bool ConfigDebugIniSettings
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigDebugIniSettings != 0;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigDebugIniSettings = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>= NULL.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2137"/></summary>
        public string BackendPlatformName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ((__Internal*)__Instance)->BackendPlatformName);
            }

            set
            {
                if (__BackendPlatformName_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->BackendPlatformName);
                __BackendPlatformName_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->BackendPlatformName = IntPtr.Zero;
                    return;
                }

                var __bytes0 = Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->BackendPlatformName = (IntPtr)__bytePtr0;
            }
        }

        /// <summary>= NULL.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2138"/></summary>
        public string BackendRendererName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ((__Internal*)__Instance)->BackendRendererName);
            }

            set
            {
                if (__BackendRendererName_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->BackendRendererName);
                __BackendRendererName_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->BackendRendererName = IntPtr.Zero;
                    return;
                }

                var __bytes0 = Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->BackendRendererName = (IntPtr)__bytePtr0;
            }
        }

        /// <summary>= NULL.<br/>User data for platform backend.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2139"/></summary>
        public IntPtr BackendPlatformUserData
        {
            get
            {
                return ((__Internal*)__Instance)->BackendPlatformUserData;
            }

            set
            {
                ((__Internal*)__Instance)->BackendPlatformUserData = (IntPtr)value;
            }
        }

        /// <summary>= NULL.<br/>User data for renderer backend.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2140"/></summary>
        public IntPtr BackendRendererUserData
        {
            get
            {
                return ((__Internal*)__Instance)->BackendRendererUserData;
            }

            set
            {
                ((__Internal*)__Instance)->BackendRendererUserData = (IntPtr)value;
            }
        }

        /// <summary>= NULL.<br/>User data for non C++ programming language backend.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2141"/></summary>
        public IntPtr BackendLanguageUserData
        {
            get
            {
                return ((__Internal*)__Instance)->BackendLanguageUserData;
            }

            set
            {
                ((__Internal*)__Instance)->BackendLanguageUserData = (IntPtr)value;
            }
        }

        /// <summary>Optional: Access OS clipboard.<br/>(default to use native Win32 clipboard on Windows, otherwise uses a private clipboard. Override to access OS clipboard on other architectures).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2145"/></summary>
        public ImGetClipboardTextHandler GetClipboardTextFn
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->GetClipboardTextFn;
                return __ptr0 == IntPtr.Zero ? null : (ImGetClipboardTextHandler)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(ImGetClipboardTextHandler));
            }

            set
            {
                ((__Internal*)__Instance)->GetClipboardTextFn = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2146"/></summary>
        public ImSetClipboardTextHandler SetClipboardTextFn
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->SetClipboardTextFn;
                return __ptr0 == IntPtr.Zero ? null : (ImSetClipboardTextHandler)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(ImSetClipboardTextHandler));
            }

            set
            {
                ((__Internal*)__Instance)->SetClipboardTextFn = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2147"/></summary>
        public IntPtr ClipboardUserData
        {
            get
            {
                return ((__Internal*)__Instance)->ClipboardUserData;
            }

            set
            {
                ((__Internal*)__Instance)->ClipboardUserData = (IntPtr)value;
            }
        }

        /// <summary>Optional: Notify OS Input Method Editor of the screen position of your cursor for text input position (e.g. when using Japanese/Chinese IME on Windows).<br/>(default to use native imm32 api on Windows).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2151"/></summary>
        public ImSetPlatformImeDataHandler SetPlatformImeDataFn
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->SetPlatformImeDataFn;
                return __ptr0 == IntPtr.Zero ? null : (ImSetPlatformImeDataHandler)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(ImSetPlatformImeDataHandler));
            }

            set
            {
                ((__Internal*)__Instance)->SetPlatformImeDataFn = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>'.'.<br/>[Experimental] Configure decimal point e.g. '.' or ',' useful for some languages (e.g. German), generally pulled from *localeconv()-&gt;decimal_point.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2154"/></summary>
        public ushort PlatformLocaleDecimalPoint
        {
            get
            {
                return ((__Internal*)__Instance)->PlatformLocaleDecimalPoint;
            }

            set
            {
                ((__Internal*)__Instance)->PlatformLocaleDecimalPoint = value;
            }
        }

        /// <summary>Set when Dear ImGui will use mouse inputs, in this case do not dispatch them to your main game/application (either way, always pass on mouse inputs to imgui). (e.g. unclicked mouse is hovering over an imgui window, widget is active, mouse was clicked over an imgui window, etc.).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2187"/></summary>
        public bool WantCaptureMouse
        {
            get
            {
                return ((__Internal*)__Instance)->WantCaptureMouse != 0;
            }

            set
            {
                ((__Internal*)__Instance)->WantCaptureMouse = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Set when Dear ImGui will use keyboard inputs, in this case do not dispatch them to your main game/application (either way, always pass keyboard inputs to imgui). (e.g. InputText active, or an imgui window is focused and navigation is enabled, etc.).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2188"/></summary>
        public bool WantCaptureKeyboard
        {
            get
            {
                return ((__Internal*)__Instance)->WantCaptureKeyboard != 0;
            }

            set
            {
                ((__Internal*)__Instance)->WantCaptureKeyboard = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Mobile/console: when set, you may display an on-screen keyboard. This is set by Dear ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2189"/></summary>
        public bool WantTextInput
        {
            get
            {
                return ((__Internal*)__Instance)->WantTextInput != 0;
            }

            set
            {
                ((__Internal*)__Instance)->WantTextInput = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>MousePos has been altered, backend should reposition mouse on next frame. Rarely used! Set only when ImGuiConfigFlags_NavEnableSetMousePos flag is enabled.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2190"/></summary>
        public bool WantSetMousePos
        {
            get
            {
                return ((__Internal*)__Instance)->WantSetMousePos != 0;
            }

            set
            {
                ((__Internal*)__Instance)->WantSetMousePos = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>When manual .ini load/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. Important: clear io.WantSaveIniSettings yourself after saving!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2191"/></summary>
        public bool WantSaveIniSettings
        {
            get
            {
                return ((__Internal*)__Instance)->WantSaveIniSettings != 0;
            }

            set
            {
                ((__Internal*)__Instance)->WantSaveIniSettings = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Keyboard/Gamepad navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2192"/></summary>
        public bool NavActive
        {
            get
            {
                return ((__Internal*)__Instance)->NavActive != 0;
            }

            set
            {
                ((__Internal*)__Instance)->NavActive = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Keyboard/Gamepad navigation is visible and allowed (will handle ImGuiKey_NavXXX events).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2193"/></summary>
        public bool NavVisible
        {
            get
            {
                return ((__Internal*)__Instance)->NavVisible != 0;
            }

            set
            {
                ((__Internal*)__Instance)->NavVisible = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Estimate of application framerate (rolling average over 60 frames, based on io.DeltaTime), in frame per second. Solely for convenience. Slow applications may not want to use a moving average or may want to reset underlying buffers occasionally.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2194"/></summary>
        public float Framerate
        {
            get
            {
                return ((__Internal*)__Instance)->Framerate;
            }

            set
            {
                ((__Internal*)__Instance)->Framerate = value;
            }
        }

        /// <summary>Vertices output during last call to Render().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2195"/></summary>
        public int MetricsRenderVertices
        {
            get
            {
                return ((__Internal*)__Instance)->MetricsRenderVertices;
            }

            set
            {
                ((__Internal*)__Instance)->MetricsRenderVertices = value;
            }
        }

        /// <summary>Indices output during last call to Render() = number of triangles * 3.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2196"/></summary>
        public int MetricsRenderIndices
        {
            get
            {
                return ((__Internal*)__Instance)->MetricsRenderIndices;
            }

            set
            {
                ((__Internal*)__Instance)->MetricsRenderIndices = value;
            }
        }

        /// <summary>Number of visible windows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2197"/></summary>
        public int MetricsRenderWindows
        {
            get
            {
                return ((__Internal*)__Instance)->MetricsRenderWindows;
            }

            set
            {
                ((__Internal*)__Instance)->MetricsRenderWindows = value;
            }
        }

        /// <summary>Number of active windows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2198"/></summary>
        public int MetricsActiveWindows
        {
            get
            {
                return ((__Internal*)__Instance)->MetricsActiveWindows;
            }

            set
            {
                ((__Internal*)__Instance)->MetricsActiveWindows = value;
            }
        }

        /// <summary>Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have a huge delta.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2199"/></summary>
        public Vector2 MouseDelta
        {
            get
            {
                return ((__Internal*)__Instance)->MouseDelta
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->MouseDelta = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2212"/></summary>
        public IntPtr UnusedPadding
        {
            get
            {
                return ((__Internal*)__Instance)->_UnusedPadding;
            }

            set
            {
                ((__Internal*)__Instance)->_UnusedPadding = (IntPtr)value;
            }
        }

        /// <summary>Mouse position, in pixels. Set to ImVec2(-FLT_MAX, -FLT_MAX) if mouse is unavailable (on another screen, etc.).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2224"/></summary>
        public Vector2 MousePos
        {
            get
            {
                return ((__Internal*)__Instance)->MousePos
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->MousePos = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Mouse buttons: 0=left, 1=right, 2=middle + extras (ImGuiMouseButton_COUNT == 5). Dear ImGui mostly uses left and right buttons. Other buttons allow us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2225"/></summary>
        public Span<bool> MouseDown
        {
            get
            {
                return new Span<bool>(((__Internal*)__Instance)->MouseDown, 5);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((__Internal*)__Instance)->MouseDown[i] = (byte)(value[i] ? 1 : 0);
                }
            }
        }

        /// <summary>Mouse wheel Vertical: 1 unit scrolls about 5 lines text. &gt;0 scrolls Up, &lt;0 scrolls Down. Hold SHIFT to turn vertical scroll into horizontal scroll.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2226"/></summary>
        public float MouseWheel
        {
            get
            {
                return ((__Internal*)__Instance)->MouseWheel;
            }

            set
            {
                ((__Internal*)__Instance)->MouseWheel = value;
            }
        }

        /// <summary>Mouse wheel Horizontal. &gt;0 scrolls Left, &lt;0 scrolls Right. Most users don't have a mouse with a horizontal wheel, may not be filled by all backends.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2227"/></summary>
        public float MouseWheelH
        {
            get
            {
                return ((__Internal*)__Instance)->MouseWheelH;
            }

            set
            {
                ((__Internal*)__Instance)->MouseWheelH = value;
            }
        }

        /// <summary>Mouse actual input peripheral (Mouse/TouchScreen/Pen).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2228"/></summary>
        public ImGuiMouseSource MouseSource
        {
            get
            {
                return ((__Internal*)__Instance)->MouseSource;
            }

            set
            {
                ((__Internal*)__Instance)->MouseSource = value;
            }
        }

        /// <summary>(Optional) Modify using io.AddMouseViewportEvent(). With multi-viewports: viewport the OS mouse is hovering. If possible _IGNORING_ viewports with the ImGuiViewportFlags_NoInputs flag is much better (few backends can handle that). Set io.BackendFlags |= ImGuiBackendFlags_HasMouseHoveredViewport if you can provide this info. If you don't imgui will infer the value using the rectangles and last focused time of the viewports it knows about (ignoring other OS windows).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2229"/></summary>
        public uint MouseHoveredViewport
        {
            get
            {
                return ((__Internal*)__Instance)->MouseHoveredViewport;
            }

            set
            {
                ((__Internal*)__Instance)->MouseHoveredViewport = value;
            }
        }

        /// <summary>Keyboard modifier down: Control.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2230"/></summary>
        public bool KeyCtrl
        {
            get
            {
                return ((__Internal*)__Instance)->KeyCtrl != 0;
            }

            set
            {
                ((__Internal*)__Instance)->KeyCtrl = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Keyboard modifier down: Shift.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2231"/></summary>
        public bool KeyShift
        {
            get
            {
                return ((__Internal*)__Instance)->KeyShift != 0;
            }

            set
            {
                ((__Internal*)__Instance)->KeyShift = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Keyboard modifier down: Alt.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2232"/></summary>
        public bool KeyAlt
        {
            get
            {
                return ((__Internal*)__Instance)->KeyAlt != 0;
            }

            set
            {
                ((__Internal*)__Instance)->KeyAlt = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Keyboard modifier down: Cmd/Super/Windows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2233"/></summary>
        public bool KeySuper
        {
            get
            {
                return ((__Internal*)__Instance)->KeySuper != 0;
            }

            set
            {
                ((__Internal*)__Instance)->KeySuper = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Key mods flags (any of ImGuiMod_Ctrl/ImGuiMod_Shift/ImGuiMod_Alt/ImGuiMod_Super flags, same as io.KeyCtrl/KeyShift/KeyAlt/KeySuper but merged into flags. DOES NOT CONTAINS ImGuiMod_Shortcut which is pretranslated). Read-only, updated by NewFrame().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2236"/></summary>
        public int KeyMods
        {
            get
            {
                return ((__Internal*)__Instance)->KeyMods;
            }

            set
            {
                ((__Internal*)__Instance)->KeyMods = value;
            }
        }

        /// <summary>Key state for all known keys. Use IsKeyXXX() functions to access this.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2237"/></summary>
        public Span<ImGuiKeyData> KeysData
        {
            get
            {
                ImGuiKeyData[] __value = null;
                if (((__Internal*)__Instance)->KeysData != null)
                {
                    __value = new ImGuiKeyData[154];
                    for (int i = 0; i < 154; i++)
                        __value[i] = ImGuiKeyData.__GetOrCreateInstance((IntPtr)((ImGuiKeyData.__Internal*)&(((__Internal*)__Instance)->KeysData[i * sizeof(ImGuiKeyData.__Internal)])), true, true);
                }

                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 154)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 154; i++)
                        *(ImGuiKeyData.__Internal*)&((__Internal*)__Instance)->KeysData[i * sizeof(ImGuiKeyData.__Internal)] = *(ImGuiKeyData.__Internal*)value[i].__Instance;
                }
            }
        }

        /// <summary>Alternative to WantCaptureMouse: (WantCaptureMouse == true &amp; &amp; WantCaptureMouseUnlessPopupClose == false) when a click over void is expected to close a popup.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2238"/></summary>
        public bool WantCaptureMouseUnlessPopupClose
        {
            get
            {
                return ((__Internal*)__Instance)->WantCaptureMouseUnlessPopupClose != 0;
            }

            set
            {
                ((__Internal*)__Instance)->WantCaptureMouseUnlessPopupClose = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Previous mouse position (note that MouseDelta is not necessary == MousePos-MousePosPrev, in case either position is invalid).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2239"/></summary>
        public Vector2 MousePosPrev
        {
            get
            {
                return ((__Internal*)__Instance)->MousePosPrev
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->MousePosPrev = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Time of last click (used to figure out double-click).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2241"/></summary>
        public Span<double> MouseClickedTime
        {
            get
            {
                return new Span<double>(((__Internal*)__Instance)->MouseClickedTime, 5);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((__Internal*)__Instance)->MouseClickedTime[i] = value[i];
                }
            }
        }

        /// <summary>Mouse button went from !Down to Down (same as MouseClickedCount[x] != 0).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2242"/></summary>
        public Span<bool> MouseClicked
        {
            get
            {
                return new Span<bool>(((__Internal*)__Instance)->MouseClicked, 5);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((__Internal*)__Instance)->MouseClicked[i] = (byte)(value[i] ? 1 : 0);
                }
            }
        }

        /// <summary>Has mouse button been double-clicked? (same as MouseClickedCount[x] == 2).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2243"/></summary>
        public Span<bool> MouseDoubleClicked
        {
            get
            {
                return new Span<bool>(((__Internal*)__Instance)->MouseDoubleClicked, 5);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((__Internal*)__Instance)->MouseDoubleClicked[i] = (byte)(value[i] ? 1 : 0);
                }
            }
        }

        /// <summary>== 0 (not clicked), == 1 (same as MouseClicked[]), == 2 (double-clicked), == 3 (triple-clicked) etc. when going from !Down to Down.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2244"/></summary>
        public Span<ushort> MouseClickedCount
        {
            get
            {
                return new Span<ushort>(((__Internal*)__Instance)->MouseClickedCount, 5);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((__Internal*)__Instance)->MouseClickedCount[i] = value[i];
                }
            }
        }

        /// <summary>Count successive number of clicks. Stays valid after mouse release. Reset after another click is done.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2245"/></summary>
        public Span<ushort> MouseClickedLastCount
        {
            get
            {
                return new Span<ushort>(((__Internal*)__Instance)->MouseClickedLastCount, 5);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((__Internal*)__Instance)->MouseClickedLastCount[i] = value[i];
                }
            }
        }

        /// <summary>Mouse button went from Down to !Down.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2246"/></summary>
        public Span<bool> MouseReleased
        {
            get
            {
                return new Span<bool>(((__Internal*)__Instance)->MouseReleased, 5);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((__Internal*)__Instance)->MouseReleased[i] = (byte)(value[i] ? 1 : 0);
                }
            }
        }

        /// <summary>Track if button was clicked inside a dear imgui window or over void blocked by a popup. We don't request mouse capture from the application if click started outside ImGui bounds.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2247"/></summary>
        public Span<bool> MouseDownOwned
        {
            get
            {
                return new Span<bool>(((__Internal*)__Instance)->MouseDownOwned, 5);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((__Internal*)__Instance)->MouseDownOwned[i] = (byte)(value[i] ? 1 : 0);
                }
            }
        }

        /// <summary>Track if button was clicked inside a dear imgui window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2248"/></summary>
        public Span<bool> MouseDownOwnedUnlessPopupClose
        {
            get
            {
                return new Span<bool>(((__Internal*)__Instance)->MouseDownOwnedUnlessPopupClose, 5);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((__Internal*)__Instance)->MouseDownOwnedUnlessPopupClose[i] = (byte)(value[i] ? 1 : 0);
                }
            }
        }

        /// <summary>On a non-Mac system, holding SHIFT requests WheelY to perform the equivalent of a WheelX event. On a Mac system this is already enforced by the system.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2249"/></summary>
        public bool MouseWheelRequestAxisSwap
        {
            get
            {
                return ((__Internal*)__Instance)->MouseWheelRequestAxisSwap != 0;
            }

            set
            {
                ((__Internal*)__Instance)->MouseWheelRequestAxisSwap = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Duration the mouse button has been down (0.0f == just clicked).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2250"/></summary>
        public Span<float> MouseDownDuration
        {
            get
            {
                return new Span<float>(((__Internal*)__Instance)->MouseDownDuration, 5);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((__Internal*)__Instance)->MouseDownDuration[i] = value[i];
                }
            }
        }

        /// <summary>Previous time the mouse button has been down.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2251"/></summary>
        public Span<float> MouseDownDurationPrev
        {
            get
            {
                return new Span<float>(((__Internal*)__Instance)->MouseDownDurationPrev, 5);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((__Internal*)__Instance)->MouseDownDurationPrev[i] = value[i];
                }
            }
        }

        /// <summary>Squared maximum distance of how much mouse has traveled from the clicking point (used for moving thresholds).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2253"/></summary>
        public Span<float> MouseDragMaxDistanceSqr
        {
            get
            {
                return new Span<float>(((__Internal*)__Instance)->MouseDragMaxDistanceSqr, 5);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((__Internal*)__Instance)->MouseDragMaxDistanceSqr[i] = value[i];
                }
            }
        }

        /// <summary>Touch/Pen pressure (0.0f to 1.0f, should be &gt;0.0f only when MouseDown[0] == true). Helper storage currently unused by Dear ImGui.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2254"/></summary>
        public float PenPressure
        {
            get
            {
                return ((__Internal*)__Instance)->PenPressure;
            }

            set
            {
                ((__Internal*)__Instance)->PenPressure = value;
            }
        }

        /// <summary>Only modify via AddFocusEvent().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2255"/></summary>
        public bool AppFocusLost
        {
            get
            {
                return ((__Internal*)__Instance)->AppFocusLost != 0;
            }

            set
            {
                ((__Internal*)__Instance)->AppFocusLost = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Only modify via SetAppAcceptingEvents().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2256"/></summary>
        public bool AppAcceptingEvents
        {
            get
            {
                return ((__Internal*)__Instance)->AppAcceptingEvents != 0;
            }

            set
            {
                ((__Internal*)__Instance)->AppAcceptingEvents = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>-1: unknown, 0: using AddKeyEvent(), 1: using legacy io.KeysDown[].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2257"/></summary>
        public sbyte BackendUsingLegacyKeyArrays
        {
            get
            {
                return ((__Internal*)__Instance)->BackendUsingLegacyKeyArrays;
            }

            set
            {
                ((__Internal*)__Instance)->BackendUsingLegacyKeyArrays = value;
            }
        }

        /// <summary>0: using AddKeyAnalogEvent(), 1: writing to legacy io.NavInputs[] directly.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2258"/></summary>
        public bool BackendUsingLegacyNavInputArray
        {
            get
            {
                return ((__Internal*)__Instance)->BackendUsingLegacyNavInputArray != 0;
            }

            set
            {
                ((__Internal*)__Instance)->BackendUsingLegacyNavInputArray = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>For AddInputCharacterUTF16().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2259"/></summary>
        public ushort InputQueueSurrogate
        {
            get
            {
                return ((__Internal*)__Instance)->InputQueueSurrogate;
            }

            set
            {
                ((__Internal*)__Instance)->InputQueueSurrogate = value;
            }
        }

        /// <summary>Queue of _characters_ input (obtained by platform backend). Fill using AddInputCharacter() helper.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2260"/></summary>
        public ImVector<ushort> InputQueueCharacters
        {
            get
            {
                return new ImVector<ushort>(Unsafe.As<ImVector.__Internal, ImVector<ushort>.__Internal>(ref ((__Internal*)__Instance)->InputQueueCharacters))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }
    }

    /// <summary>Shared state of InputText(), passed as an argument to your callback when a ImGuiInputTextFlags_Callback* flag is used.<br/>The callback function should return 0 by default.<br/>Callbacks (follow a flag name and see comments in ImGuiInputTextFlags_ declarations for more details).<br/>- ImGuiInputTextFlags_CallbackEdit:, Callback on buffer edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active).<br/>- ImGuiInputTextFlags_CallbackAlways:, Callback on each iteration.<br/>- ImGuiInputTextFlags_CallbackCompletion:, Callback on pressing TAB.<br/>- ImGuiInputTextFlags_CallbackHistory:, Callback on pressing Up/Down arrows.<br/>- ImGuiInputTextFlags_CallbackCharFilter:, Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.<br/>- ImGuiInputTextFlags_CallbackResize:, Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2278"/></summary>
    // DEBUG: struct ImGuiInputTextCallbackData
    // DEBUG: {
    // DEBUG:     ImGuiContext*       Ctx;            // Parent UI context
    // DEBUG:     ImGuiInputTextFlags EventFlag;      // One ImGuiInputTextFlags_Callback*    // Read-only
    // DEBUG:     ImGuiInputTextFlags Flags;          // What user passed to InputText()      // Read-only
    // DEBUG:     void*               UserData;       // What user passed to InputText()      // Read-only
    // DEBUG: 
    // DEBUG:     // Arguments for the different callback events
    // DEBUG:     // - To modify the text buffer in a callback, prefer using the InsertChars() / DeleteChars() function. InsertChars() will take care of calling the resize callback if necessary.
    // DEBUG:     // - If you know your edits are not going to resize the underlying buffer allocation, you may modify the contents of 'Buf[]' directly. You need to update 'BufTextLen' accordingly (0 <= BufTextLen < BufSize) and set 'BufDirty'' to true so InputText can update its internal state.
    // DEBUG:     ImWchar             EventChar;      // Character input                      // Read-write   // [CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;
    // DEBUG:     ImGuiKey            EventKey;       // Key pressed (Up/Down/TAB)            // Read-only    // [Completion,History]
    // DEBUG:     char*               Buf;            // Text buffer                          // Read-write   // [Resize] Can replace pointer / [Completion,History,Always] Only write to pointed data, don't replace the actual pointer!
    // DEBUG:     int                 BufTextLen;     // Text length (in bytes)               // Read-write   // [Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length()
    // DEBUG:     int                 BufSize;        // Buffer size (in bytes) = capacity+1  // Read-only    // [Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1
    // DEBUG:     bool                BufDirty;       // Set if you modify Buf/BufTextLen!    // Write        // [Completion,History,Always]
    // DEBUG:     int                 CursorPos;      //                                      // Read-write   // [Completion,History,Always]
    // DEBUG:     int                 SelectionStart; //                                      // Read-write   // [Completion,History,Always] == to SelectionEnd when no selection)
    // DEBUG:     int                 SelectionEnd;   //                                      // Read-write   // [Completion,History,Always]
    // DEBUG: 
    // DEBUG:     // Helper functions for text manipulation.
    // DEBUG:     // Use those function to benefit from the CallbackResize behaviors. Calling those function reset the selection.
    // DEBUG:     IMGUI_API ImGuiInputTextCallbackData();
    // DEBUG:     IMGUI_API void      DeleteChars(int pos, int bytes_count);
    // DEBUG:     IMGUI_API void      InsertChars(int pos, const char* text, const char* text_end = NULL);
    // DEBUG:     void                SelectAll()             { SelectionStart = 0; SelectionEnd = BufTextLen; }
    // DEBUG:     void                ClearSelection()        { SelectionStart = SelectionEnd = BufTextLen; }
    // DEBUG:     bool                HasSelection() const    { return SelectionStart != SelectionEnd; }
    // DEBUG: }
    public unsafe partial class ImGuiInputTextCallbackData : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal IntPtr Ctx;
            internal ImGuiInputTextFlags EventFlag;
            internal ImGuiInputTextFlags Flags;
            internal IntPtr UserData;
            internal ushort EventChar;
            internal ImGuiKey EventKey;
            internal IntPtr Buf;
            internal int BufTextLen;
            internal int BufSize;
            internal byte BufDirty;
            internal int CursorPos;
            internal int SelectionStart;
            internal int SelectionEnd;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiInputTextCallbackData@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiInputTextCallbackData@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DeleteChars@ImGuiInputTextCallbackData@@QAEXHH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void DeleteChars(IntPtr __instance, int pos, int bytes_count);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InsertChars@ImGuiInputTextCallbackData@@QAEXHPBD0@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void InsertChars(IntPtr __instance, int pos, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SelectAll@ImGuiInputTextCallbackData@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void SelectAll(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearSelection@ImGuiInputTextCallbackData@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void ClearSelection(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?HasSelection@ImGuiInputTextCallbackData@@QBE_NXZ", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasSelection(IntPtr __instance);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiInputTextCallbackData@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiInputTextCallbackData@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void DeleteChars(IntPtr __instance, int pos, int bytes_count);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void InsertChars(IntPtr __instance, int pos, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SelectAll@ImGuiInputTextCallbackData@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SelectAll(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearSelection@ImGuiInputTextCallbackData@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ClearSelection(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?HasSelection@ImGuiInputTextCallbackData@@QEBA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasSelection(IntPtr __instance);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiInputTextCallbackData>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiInputTextCallbackData>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiInputTextCallbackData managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiInputTextCallbackData>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiInputTextCallbackData managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiInputTextCallbackData __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiInputTextCallbackData(native.ToPointer(), skipVTables);
        }

        internal static ImGuiInputTextCallbackData __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiInputTextCallbackData)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiInputTextCallbackData __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiInputTextCallbackData(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiInputTextCallbackData(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiInputTextCallbackData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary>Helper functions for text manipulation.<br/>Use those function to benefit from the CallbackResize behaviors. Calling those function reset the selection.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2300"/></summary>
        // DEBUG: ImGuiInputTextCallbackData()
        public ImGuiInputTextCallbackData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiInputTextCallbackData.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>Shared state of InputText(), passed as an argument to your callback when a ImGuiInputTextFlags_Callback* flag is used.<br/>The callback function should return 0 by default.<br/>Callbacks (follow a flag name and see comments in ImGuiInputTextFlags_ declarations for more details).<br/>- ImGuiInputTextFlags_CallbackEdit:, Callback on buffer edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active).<br/>- ImGuiInputTextFlags_CallbackAlways:, Callback on each iteration.<br/>- ImGuiInputTextFlags_CallbackCompletion:, Callback on pressing TAB.<br/>- ImGuiInputTextFlags_CallbackHistory:, Callback on pressing Up/Down arrows.<br/>- ImGuiInputTextFlags_CallbackCharFilter:, Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.<br/>- ImGuiInputTextFlags_CallbackResize:, Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2278"/></summary>
        // DEBUG: ImGuiInputTextCallbackData
        public ImGuiInputTextCallbackData(ImGuiInputTextCallbackData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiInputTextCallbackData.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImGuiInputTextCallbackData()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2301"/></summary>
        // DEBUG: void      DeleteChars(int pos, int bytes_count)
        public void DeleteChars(int pos, int bytes_count)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.DeleteChars(__Instance, pos, bytes_count);
            }
            else
            {
                __Internal32.DeleteChars(__Instance, pos, bytes_count);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2302"/></summary>
        // DEBUG: void      InsertChars(int pos, const char* text, const char* text_end = NULL)
        public void InsertChars(int pos, string text, string text_end = default)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.InsertChars(__Instance, pos, text, text_end);
            }
            else
            {
                __Internal32.InsertChars(__Instance, pos, text, text_end);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2303"/></summary>
        // DEBUG: void                SelectAll()             { SelectionStart = 0; SelectionEnd = BufTextLen; }
        public void SelectAll()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SelectAll(__Instance);
            }
            else
            {
                __Internal32.SelectAll(__Instance);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2304"/></summary>
        // DEBUG: void                ClearSelection()        { SelectionStart = SelectionEnd = BufTextLen; }
        public void ClearSelection()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.ClearSelection(__Instance);
            }
            else
            {
                __Internal32.ClearSelection(__Instance);
            }
        }

        /// <summary>One ImGuiInputTextFlags_Callback*.<br/>Read-only.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2281"/></summary>
        public ImGuiInputTextFlags EventFlag
        {
            get
            {
                return ((__Internal*)__Instance)->EventFlag;
            }

            set
            {
                ((__Internal*)__Instance)->EventFlag = value;
            }
        }

        /// <summary>What user passed to InputText().<br/>Read-only.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2282"/></summary>
        public ImGuiInputTextFlags Flags
        {
            get
            {
                return ((__Internal*)__Instance)->Flags;
            }

            set
            {
                ((__Internal*)__Instance)->Flags = value;
            }
        }

        /// <summary>What user passed to InputText().<br/>Read-only.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2283"/></summary>
        public IntPtr UserData
        {
            get
            {
                return ((__Internal*)__Instance)->UserData;
            }

            set
            {
                ((__Internal*)__Instance)->UserData = (IntPtr)value;
            }
        }

        /// <summary>Character input.<br/>Read-write.<br/>[CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2288"/></summary>
        public ushort EventChar
        {
            get
            {
                return ((__Internal*)__Instance)->EventChar;
            }

            set
            {
                ((__Internal*)__Instance)->EventChar = value;
            }
        }

        /// <summary>Key pressed (Up/Down/TAB).<br/>Read-only.<br/>[Completion,History].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2289"/></summary>
        public ImGuiKey EventKey
        {
            get
            {
                return ((__Internal*)__Instance)->EventKey;
            }

            set
            {
                ((__Internal*)__Instance)->EventKey = value;
            }
        }

        /// <summary>Text buffer.<br/>Read-write.<br/>[Resize] Can replace pointer / [Completion,History,Always] Only write to pointed data, don't replace the actual pointer!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2290"/></summary>
        public char* Buf
        {
            get
            {
                return (char*)((__Internal*)__Instance)->Buf;
            }

            set
            {
                ((__Internal*)__Instance)->Buf = (IntPtr)(sbyte*)value;
            }
        }

        /// <summary>Text length (in bytes).<br/>Read-write.<br/>[Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2291"/></summary>
        public int BufTextLen
        {
            get
            {
                return ((__Internal*)__Instance)->BufTextLen;
            }

            set
            {
                ((__Internal*)__Instance)->BufTextLen = value;
            }
        }

        /// <summary>Buffer size (in bytes) = capacity+1.<br/>Read-only.<br/>[Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2292"/></summary>
        public int BufSize
        {
            get
            {
                return ((__Internal*)__Instance)->BufSize;
            }

            set
            {
                ((__Internal*)__Instance)->BufSize = value;
            }
        }

        /// <summary>Set if you modify Buf/BufTextLen!<br/>Write.<br/>[Completion,History,Always].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2293"/></summary>
        public bool BufDirty
        {
            get
            {
                return ((__Internal*)__Instance)->BufDirty != 0;
            }

            set
            {
                ((__Internal*)__Instance)->BufDirty = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Read-write.<br/>[Completion,History,Always].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2294"/></summary>
        public int CursorPos
        {
            get
            {
                return ((__Internal*)__Instance)->CursorPos;
            }

            set
            {
                ((__Internal*)__Instance)->CursorPos = value;
            }
        }

        /// <summary>Read-write.<br/>[Completion,History,Always] == to SelectionEnd when no selection).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2295"/></summary>
        public int SelectionStart
        {
            get
            {
                return ((__Internal*)__Instance)->SelectionStart;
            }

            set
            {
                ((__Internal*)__Instance)->SelectionStart = value;
            }
        }

        /// <summary>Read-write.<br/>[Completion,History,Always].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2296"/></summary>
        public int SelectionEnd
        {
            get
            {
                return ((__Internal*)__Instance)->SelectionEnd;
            }

            set
            {
                ((__Internal*)__Instance)->SelectionEnd = value;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2305"/></summary>
        public bool HasSelection
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.HasSelection(__Instance) : __Internal32.HasSelection(__Instance);
                return ___ret;
            }
        }
    }

    /// <summary>Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin().<br/>NB: For basic min/max size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2310"/></summary>
    // DEBUG: struct ImGuiSizeCallbackData
    // DEBUG: {
    // DEBUG:     void*   UserData;       // Read-only.   What user passed to SetNextWindowSizeConstraints(). Generally store an integer or float in here (need reinterpret_cast<>).
    // DEBUG:     ImVec2  Pos;            // Read-only.   Window position, for reference.
    // DEBUG:     ImVec2  CurrentSize;    // Read-only.   Current window size.
    // DEBUG:     ImVec2  DesiredSize;    // Read-write.  Desired size, based on user's mouse position. Write to this field to restrain resizing.
    // DEBUG: }
    public unsafe partial class ImGuiSizeCallbackData : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal IntPtr UserData;
            internal Vector2 Pos;
            internal Vector2 CurrentSize;
            internal Vector2 DesiredSize;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiSizeCallbackData@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiSizeCallbackData@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiSizeCallbackData@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiSizeCallbackData@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiSizeCallbackData>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiSizeCallbackData>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiSizeCallbackData managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiSizeCallbackData>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiSizeCallbackData managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiSizeCallbackData __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiSizeCallbackData(native.ToPointer(), skipVTables);
        }

        internal static ImGuiSizeCallbackData __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiSizeCallbackData)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiSizeCallbackData __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiSizeCallbackData(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiSizeCallbackData(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiSizeCallbackData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary>Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin().<br/>NB: For basic min/max size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2310"/></summary>
        // DEBUG: ImGuiSizeCallbackData
        public ImGuiSizeCallbackData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiSizeCallbackData.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin().<br/>NB: For basic min/max size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2310"/></summary>
        // DEBUG: ImGuiSizeCallbackData
        public ImGuiSizeCallbackData(ImGuiSizeCallbackData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiSizeCallbackData.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImGuiSizeCallbackData()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Read-only.<br/>What user passed to SetNextWindowSizeConstraints(). Generally store an integer or float in here (need reinterpret_cast&lt; &gt;).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2312"/></summary>
        public IntPtr UserData
        {
            get
            {
                return ((__Internal*)__Instance)->UserData;
            }

            set
            {
                ((__Internal*)__Instance)->UserData = (IntPtr)value;
            }
        }

        /// <summary>Read-only.<br/>Window position, for reference.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2313"/></summary>
        public Vector2 Pos
        {
            get
            {
                return ((__Internal*)__Instance)->Pos
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->Pos = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Read-only.<br/>Current window size.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2314"/></summary>
        public Vector2 CurrentSize
        {
            get
            {
                return ((__Internal*)__Instance)->CurrentSize
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->CurrentSize = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Read-write.<br/>Desired size, based on user's mouse position. Write to this field to restrain resizing.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2315"/></summary>
        public Vector2 DesiredSize
        {
            get
            {
                return ((__Internal*)__Instance)->DesiredSize
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->DesiredSize = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }
    }

    /// <summary>[ALPHA] Rarely used / very advanced uses only. Use with SetNextWindowClass() and DockSpace() functions.<br/>Important: the content of this class is still highly WIP and likely to change and be refactored.<br/>Before we stabilize Docking features. Please be mindful if using this.<br/>Provide hints:.<br/>- To the platform backend via altered viewport flags (enable/disable OS decoration, OS task bar icons, etc.).<br/>- To the platform backend for OS level parent/child relationships of viewport.<br/>- To the docking system for various options and filtering.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2325"/></summary>
    // DEBUG: struct ImGuiWindowClass
    // DEBUG: {
    // DEBUG:     ImGuiID             ClassId;                    // User data. 0 = Default class (unclassed). Windows of different classes cannot be docked with each others.
    // DEBUG:     ImGuiID             ParentViewportId;           // Hint for the platform backend. -1: use default. 0: request platform backend to not parent the platform. != 0: request platform backend to create a parent<>child relationship between the platform windows. Not conforming backends are free to e.g. parent every viewport to the main viewport or not.
    // DEBUG:     ImGuiViewportFlags  ViewportFlagsOverrideSet;   // Viewport flags to set when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis.
    // DEBUG:     ImGuiViewportFlags  ViewportFlagsOverrideClear; // Viewport flags to clear when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis.
    // DEBUG:     ImGuiTabItemFlags   TabItemFlagsOverrideSet;    // [EXPERIMENTAL] TabItem flags to set when a window of this class gets submitted into a dock node tab bar. May use with ImGuiTabItemFlags_Leading or ImGuiTabItemFlags_Trailing.
    // DEBUG:     ImGuiDockNodeFlags  DockNodeFlagsOverrideSet;   // [EXPERIMENTAL] Dock node flags to set when a window of this class is hosted by a dock node (it doesn't have to be selected!)
    // DEBUG:     bool                DockingAlwaysTabBar;        // Set to true to enforce single floating windows of this class always having their own docking node (equivalent of setting the global io.ConfigDockingAlwaysTabBar)
    // DEBUG:     bool                DockingAllowUnclassed;      // Set to true to allow windows of this class to be docked/merged with an unclassed window. // FIXME-DOCK: Move to DockNodeFlags override?
    // DEBUG: 
    // DEBUG:     ImGuiWindowClass() { memset(this, 0, sizeof(*this)); ParentViewportId = (ImGuiID)-1; DockingAllowUnclassed = true; }
    // DEBUG: }
    public unsafe partial class ImGuiWindowClass : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal uint ClassId;
            internal uint ParentViewportId;
            internal ImGuiViewportFlags ViewportFlagsOverrideSet;
            internal ImGuiViewportFlags ViewportFlagsOverrideClear;
            internal ImGuiTabItemFlags TabItemFlagsOverrideSet;
            internal ImGuiDockNodeFlags DockNodeFlagsOverrideSet;
            internal byte DockingAlwaysTabBar;
            internal byte DockingAllowUnclassed;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiWindowClass@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiWindowClass@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiWindowClass@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiWindowClass@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiWindowClass>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiWindowClass>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiWindowClass managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiWindowClass>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiWindowClass managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiWindowClass __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiWindowClass(native.ToPointer(), skipVTables);
        }

        internal static ImGuiWindowClass __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiWindowClass)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiWindowClass __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiWindowClass(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiWindowClass(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiWindowClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2336"/></summary>
        // DEBUG: ImGuiWindowClass() { memset(this, 0, sizeof(*this)); ParentViewportId = (ImGuiID)-1; DockingAllowUnclassed = true; }
        public ImGuiWindowClass()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiWindowClass.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>[ALPHA] Rarely used / very advanced uses only. Use with SetNextWindowClass() and DockSpace() functions.<br/>Important: the content of this class is still highly WIP and likely to change and be refactored.<br/>Before we stabilize Docking features. Please be mindful if using this.<br/>Provide hints:.<br/>- To the platform backend via altered viewport flags (enable/disable OS decoration, OS task bar icons, etc.).<br/>- To the platform backend for OS level parent/child relationships of viewport.<br/>- To the docking system for various options and filtering.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2325"/></summary>
        // DEBUG: ImGuiWindowClass
        public ImGuiWindowClass(ImGuiWindowClass _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiWindowClass.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImGuiWindowClass()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>User data. 0 = Default class (unclassed). Windows of different classes cannot be docked with each others.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2327"/></summary>
        public uint ClassId
        {
            get
            {
                return ((__Internal*)__Instance)->ClassId;
            }

            set
            {
                ((__Internal*)__Instance)->ClassId = value;
            }
        }

        /// <summary>Hint for the platform backend. -1: use default. 0: request platform backend to not parent the platform. != 0: request platform backend to create a parent&lt; &gt;child relationship between the platform windows. Not conforming backends are free to e.g. parent every viewport to the main viewport or not.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2328"/></summary>
        public uint ParentViewportId
        {
            get
            {
                return ((__Internal*)__Instance)->ParentViewportId;
            }

            set
            {
                ((__Internal*)__Instance)->ParentViewportId = value;
            }
        }

        /// <summary>Viewport flags to set when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2329"/></summary>
        public ImGuiViewportFlags ViewportFlagsOverrideSet
        {
            get
            {
                return ((__Internal*)__Instance)->ViewportFlagsOverrideSet;
            }

            set
            {
                ((__Internal*)__Instance)->ViewportFlagsOverrideSet = value;
            }
        }

        /// <summary>Viewport flags to clear when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2330"/></summary>
        public ImGuiViewportFlags ViewportFlagsOverrideClear
        {
            get
            {
                return ((__Internal*)__Instance)->ViewportFlagsOverrideClear;
            }

            set
            {
                ((__Internal*)__Instance)->ViewportFlagsOverrideClear = value;
            }
        }

        /// <summary>[EXPERIMENTAL] TabItem flags to set when a window of this class gets submitted into a dock node tab bar. May use with ImGuiTabItemFlags_Leading or ImGuiTabItemFlags_Trailing.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2331"/></summary>
        public ImGuiTabItemFlags TabItemFlagsOverrideSet
        {
            get
            {
                return ((__Internal*)__Instance)->TabItemFlagsOverrideSet;
            }

            set
            {
                ((__Internal*)__Instance)->TabItemFlagsOverrideSet = value;
            }
        }

        /// <summary>[EXPERIMENTAL] Dock node flags to set when a window of this class is hosted by a dock node (it doesn't have to be selected!).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2332"/></summary>
        public ImGuiDockNodeFlags DockNodeFlagsOverrideSet
        {
            get
            {
                return ((__Internal*)__Instance)->DockNodeFlagsOverrideSet;
            }

            set
            {
                ((__Internal*)__Instance)->DockNodeFlagsOverrideSet = value;
            }
        }

        /// <summary>Set to true to enforce single floating windows of this class always having their own docking node (equivalent of setting the global io.ConfigDockingAlwaysTabBar).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2333"/></summary>
        public bool DockingAlwaysTabBar
        {
            get
            {
                return ((__Internal*)__Instance)->DockingAlwaysTabBar != 0;
            }

            set
            {
                ((__Internal*)__Instance)->DockingAlwaysTabBar = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Set to true to allow windows of this class to be docked/merged with an unclassed window.<br/>FIXME-DOCK: Move to DockNodeFlags override?.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2334"/></summary>
        public bool DockingAllowUnclassed
        {
            get
            {
                return ((__Internal*)__Instance)->DockingAllowUnclassed != 0;
            }

            set
            {
                ((__Internal*)__Instance)->DockingAllowUnclassed = (byte)(value ? 1 : 0);
            }
        }
    }

    /// <summary>Data payload for Drag and Drop operations: AcceptDragDropPayload(), GetDragDropPayload().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2340"/></summary>
    // DEBUG: struct ImGuiPayload
    // DEBUG: {
    // DEBUG:     // Members
    // DEBUG:     void*           Data;               // Data (copied and owned by dear imgui)
    // DEBUG:     int             DataSize;           // Data size
    // DEBUG: 
    // DEBUG:     // [Internal]
    // DEBUG:     ImGuiID         SourceId;           // Source item id
    // DEBUG:     ImGuiID         SourceParentId;     // Source parent id (if available)
    // DEBUG:     int             DataFrameCount;     // Data timestamp
    // DEBUG:     char            DataType[32 + 1];   // Data type tag (short user-supplied string, 32 characters max)
    // DEBUG:     bool            Preview;            // Set when AcceptDragDropPayload() was called and mouse has been hovering the target item (nb: handle overlapping drag targets)
    // DEBUG:     bool            Delivery;           // Set when AcceptDragDropPayload() was called and mouse button is released over the target item.
    // DEBUG: 
    // DEBUG:     ImGuiPayload()  { Clear(); }
    // DEBUG:     void Clear()    { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType, 0, sizeof(DataType)); DataFrameCount = -1; Preview = Delivery = false; }
    // DEBUG:     bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataType) == 0; }
    // DEBUG:     bool IsPreview() const                  { return Preview; }
    // DEBUG:     bool IsDelivery() const                 { return Delivery; }
    // DEBUG: }
    public unsafe partial class ImGuiPayload : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal IntPtr Data;
            internal int DataSize;
            internal uint SourceId;
            internal uint SourceParentId;
            internal int DataFrameCount;
            internal fixed sbyte DataType[33];
            internal byte Preview;
            internal byte Delivery;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPayload@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPayload@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Clear@ImGuiPayload@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsDataType@ImGuiPayload@@QBE_NPBD@Z", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsDataType(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string type);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsPreview@ImGuiPayload@@QBE_NXZ", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPreview(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsDelivery@ImGuiPayload@@QBE_NXZ", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsDelivery(IntPtr __instance);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPayload@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPayload@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Clear@ImGuiPayload@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsDataType@ImGuiPayload@@QEBA_NPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsDataType(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string type);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsPreview@ImGuiPayload@@QEBA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPreview(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsDelivery@ImGuiPayload@@QEBA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsDelivery(IntPtr __instance);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiPayload>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiPayload>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiPayload managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiPayload>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiPayload managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiPayload __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiPayload(native.ToPointer(), skipVTables);
        }

        internal static ImGuiPayload __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiPayload)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiPayload __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiPayload(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiPayload(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiPayload(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2354"/></summary>
        // DEBUG: ImGuiPayload()  { Clear(); }
        public ImGuiPayload()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiPayload.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>Data payload for Drag and Drop operations: AcceptDragDropPayload(), GetDragDropPayload().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2340"/></summary>
        // DEBUG: ImGuiPayload
        public ImGuiPayload(ImGuiPayload _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiPayload.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImGuiPayload()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2355"/></summary>
        // DEBUG: void Clear()    { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType, 0, sizeof(DataType)); DataFrameCount = -1; Preview = Delivery = false; }
        public void Clear()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Clear(__Instance);
            }
            else
            {
                __Internal32.Clear(__Instance);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2356"/></summary>
        // DEBUG: bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataType) == 0; }
        public bool IsDataType(string type)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsDataType(__Instance, type) : __Internal32.IsDataType(__Instance, type);
            return ___ret;
        }

        /// <summary>Data (copied and owned by dear imgui).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2343"/></summary>
        public IntPtr Data
        {
            get
            {
                return ((__Internal*)__Instance)->Data;
            }

            set
            {
                ((__Internal*)__Instance)->Data = (IntPtr)value;
            }
        }

        /// <summary>Data size.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2344"/></summary>
        public int DataSize
        {
            get
            {
                return ((__Internal*)__Instance)->DataSize;
            }

            set
            {
                ((__Internal*)__Instance)->DataSize = value;
            }
        }

        /// <summary>Source item id.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2347"/></summary>
        public uint SourceId
        {
            get
            {
                return ((__Internal*)__Instance)->SourceId;
            }

            set
            {
                ((__Internal*)__Instance)->SourceId = value;
            }
        }

        /// <summary>Source parent id (if available).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2348"/></summary>
        public uint SourceParentId
        {
            get
            {
                return ((__Internal*)__Instance)->SourceParentId;
            }

            set
            {
                ((__Internal*)__Instance)->SourceParentId = value;
            }
        }

        /// <summary>Data timestamp.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2349"/></summary>
        public int DataFrameCount
        {
            get
            {
                return ((__Internal*)__Instance)->DataFrameCount;
            }

            set
            {
                ((__Internal*)__Instance)->DataFrameCount = value;
            }
        }

        /// <summary>Data type tag (short user-supplied string, 32 characters max).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2350"/></summary>
        public Span<char> DataType
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetCharArray(((__Internal*)__Instance)->DataType, 33);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 33; i++)
                        ((__Internal*)__Instance)->DataType[i] = Convert.ToSByte(value[i]);
                }
            }
        }

        /// <summary>Set when AcceptDragDropPayload() was called and mouse has been hovering the target item (nb: handle overlapping drag targets).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2351"/></summary>
        public bool Preview
        {
            get
            {
                return ((__Internal*)__Instance)->Preview != 0;
            }

            set
            {
                ((__Internal*)__Instance)->Preview = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Set when AcceptDragDropPayload() was called and mouse button is released over the target item.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2352"/></summary>
        public bool Delivery
        {
            get
            {
                return ((__Internal*)__Instance)->Delivery != 0;
            }

            set
            {
                ((__Internal*)__Instance)->Delivery = (byte)(value ? 1 : 0);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2357"/></summary>
        public bool IsPreview
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.IsPreview(__Instance) : __Internal32.IsPreview(__Instance);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2358"/></summary>
        public bool IsDelivery
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.IsDelivery(__Instance) : __Internal32.IsDelivery(__Instance);
                return ___ret;
            }
        }
    }

    /// <summary>Sorting specification for one column of a table (sizeof == 12 bytes).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2362"/></summary>
    // DEBUG: struct ImGuiTableColumnSortSpecs
    // DEBUG: {
    // DEBUG:     ImGuiID                     ColumnUserID;       // User id of the column (if specified by a TableSetupColumn() call)
    // DEBUG:     ImS16                       ColumnIndex;        // Index of the column
    // DEBUG:     ImS16                       SortOrder;          // Index within parent ImGuiTableSortSpecs (always stored in order starting from 0, tables sorted on a single criteria will always have a 0 here)
    // DEBUG:     ImGuiSortDirection          SortDirection : 8;  // ImGuiSortDirection_Ascending or ImGuiSortDirection_Descending
    // DEBUG: 
    // DEBUG:     ImGuiTableColumnSortSpecs() { memset(this, 0, sizeof(*this)); }
    // DEBUG: }
    public unsafe partial class ImGuiTableColumnSortSpecs : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal uint ColumnUserID;
            internal short ColumnIndex;
            internal short SortOrder;
            internal ImGuiSortDirection SortDirection;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTableColumnSortSpecs@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTableColumnSortSpecs@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTableColumnSortSpecs@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTableColumnSortSpecs@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiTableColumnSortSpecs>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiTableColumnSortSpecs>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiTableColumnSortSpecs managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiTableColumnSortSpecs>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiTableColumnSortSpecs managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiTableColumnSortSpecs __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiTableColumnSortSpecs(native.ToPointer(), skipVTables);
        }

        internal static ImGuiTableColumnSortSpecs __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiTableColumnSortSpecs)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiTableColumnSortSpecs __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiTableColumnSortSpecs(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiTableColumnSortSpecs(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiTableColumnSortSpecs(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2369"/></summary>
        // DEBUG: ImGuiTableColumnSortSpecs() { memset(this, 0, sizeof(*this)); }
        public ImGuiTableColumnSortSpecs()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiTableColumnSortSpecs.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>Sorting specification for one column of a table (sizeof == 12 bytes).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2362"/></summary>
        // DEBUG: ImGuiTableColumnSortSpecs
        public ImGuiTableColumnSortSpecs(ImGuiTableColumnSortSpecs _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiTableColumnSortSpecs.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImGuiTableColumnSortSpecs()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>User id of the column (if specified by a TableSetupColumn() call).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2364"/></summary>
        public uint ColumnUserID
        {
            get
            {
                return ((__Internal*)__Instance)->ColumnUserID;
            }

            set
            {
                ((__Internal*)__Instance)->ColumnUserID = value;
            }
        }

        /// <summary>Index of the column.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2365"/></summary>
        public short ColumnIndex
        {
            get
            {
                return ((__Internal*)__Instance)->ColumnIndex;
            }

            set
            {
                ((__Internal*)__Instance)->ColumnIndex = value;
            }
        }

        /// <summary>Index within parent ImGuiTableSortSpecs (always stored in order starting from 0, tables sorted on a single criteria will always have a 0 here).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2366"/></summary>
        public short SortOrder
        {
            get
            {
                return ((__Internal*)__Instance)->SortOrder;
            }

            set
            {
                ((__Internal*)__Instance)->SortOrder = value;
            }
        }

        /// <summary>ImGuiSortDirection_Ascending or ImGuiSortDirection_Descending.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2367"/></summary>
        public ImGuiSortDirection SortDirection
        {
            get
            {
                return ((__Internal*)__Instance)->SortDirection;
            }

            set
            {
                ((__Internal*)__Instance)->SortDirection = value;
            }
        }
    }

    /// <summary>Sorting specifications for a table (often handling sort specs for a single column, occasionally more).<br/>Obtained by calling TableGetSortSpecs().<br/>When 'SpecsDirty == true' you can sort your data. It will be true with sorting specs have changed since last call, or the first time.<br/>Make sure to set 'SpecsDirty = false' after sorting, else you may wastefully sort your data every frame!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2376"/></summary>
    // DEBUG: struct ImGuiTableSortSpecs
    // DEBUG: {
    // DEBUG:     const ImGuiTableColumnSortSpecs* Specs;     // Pointer to sort spec array.
    // DEBUG:     int                         SpecsCount;     // Sort spec count. Most often 1. May be > 1 when ImGuiTableFlags_SortMulti is enabled. May be == 0 when ImGuiTableFlags_SortTristate is enabled.
    // DEBUG:     bool                        SpecsDirty;     // Set to true when specs have changed since last time! Use this to sort again, then clear the flag.
    // DEBUG: 
    // DEBUG:     ImGuiTableSortSpecs()       { memset(this, 0, sizeof(*this)); }
    // DEBUG: }
    public unsafe partial class ImGuiTableSortSpecs : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal IntPtr Specs;
            internal int SpecsCount;
            internal byte SpecsDirty;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTableSortSpecs@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTableSortSpecs@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTableSortSpecs@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTableSortSpecs@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiTableSortSpecs>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiTableSortSpecs>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiTableSortSpecs managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiTableSortSpecs>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiTableSortSpecs managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiTableSortSpecs __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiTableSortSpecs(native.ToPointer(), skipVTables);
        }

        internal static ImGuiTableSortSpecs __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiTableSortSpecs)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiTableSortSpecs __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiTableSortSpecs(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiTableSortSpecs(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiTableSortSpecs(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2382"/></summary>
        // DEBUG: ImGuiTableSortSpecs()       { memset(this, 0, sizeof(*this)); }
        public ImGuiTableSortSpecs()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiTableSortSpecs.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>Sorting specifications for a table (often handling sort specs for a single column, occasionally more).<br/>Obtained by calling TableGetSortSpecs().<br/>When 'SpecsDirty == true' you can sort your data. It will be true with sorting specs have changed since last call, or the first time.<br/>Make sure to set 'SpecsDirty = false' after sorting, else you may wastefully sort your data every frame!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2376"/></summary>
        // DEBUG: ImGuiTableSortSpecs
        public ImGuiTableSortSpecs(ImGuiTableSortSpecs _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiTableSortSpecs.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImGuiTableSortSpecs()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Pointer to sort spec array.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2378"/></summary>
        public ImGuiTableColumnSortSpecs Specs
        {
            get
            {
                var __result0 = ImGuiTableColumnSortSpecs.__GetOrCreateInstance(((__Internal*)__Instance)->Specs, false);
                return __result0;
            }
        }

        /// <summary>Sort spec count. Most often 1. May be &gt; 1 when ImGuiTableFlags_SortMulti is enabled. May be == 0 when ImGuiTableFlags_SortTristate is enabled.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2379"/></summary>
        public int SpecsCount
        {
            get
            {
                return ((__Internal*)__Instance)->SpecsCount;
            }

            set
            {
                ((__Internal*)__Instance)->SpecsCount = value;
            }
        }

        /// <summary>Set to true when specs have changed since last time! Use this to sort again, then clear the flag.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2380"/></summary>
        public bool SpecsDirty
        {
            get
            {
                return ((__Internal*)__Instance)->SpecsDirty != 0;
            }

            set
            {
                ((__Internal*)__Instance)->SpecsDirty = (byte)(value ? 1 : 0);
            }
        }
    }

    /// <summary>Helper: Execute a block of code at maximum once a frame. Convenient if you want to quickly create a UI within deep-nested code that runs multiple times every frame.<br/>Usage: static ImGuiOnceUponAFrame oaf; if (oaf) ImGui::Text("This will be called only once per frame");.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2399"/></summary>
    // DEBUG: struct ImGuiOnceUponAFrame
    // DEBUG: {
    // DEBUG:     ImGuiOnceUponAFrame() { RefFrame = -1; }
    // DEBUG:     mutable int RefFrame;
    // DEBUG:     operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_frame) return false; RefFrame = current_frame; return true; }
    // DEBUG: }
    public unsafe partial class ImGuiOnceUponAFrame : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal int RefFrame;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiOnceUponAFrame@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiOnceUponAFrame@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??BImGuiOnceUponAFrame@@QBE_NXZ", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorConversion(IntPtr __instance);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiOnceUponAFrame@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiOnceUponAFrame@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??BImGuiOnceUponAFrame@@QEBA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorConversion(IntPtr __instance);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiOnceUponAFrame>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiOnceUponAFrame>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiOnceUponAFrame managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiOnceUponAFrame>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiOnceUponAFrame managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiOnceUponAFrame __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiOnceUponAFrame(native.ToPointer(), skipVTables);
        }

        internal static ImGuiOnceUponAFrame __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiOnceUponAFrame)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiOnceUponAFrame __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiOnceUponAFrame(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiOnceUponAFrame(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiOnceUponAFrame(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2401"/></summary>
        // DEBUG: ImGuiOnceUponAFrame() { RefFrame = -1; }
        public ImGuiOnceUponAFrame()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiOnceUponAFrame.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>Helper: Execute a block of code at maximum once a frame. Convenient if you want to quickly create a UI within deep-nested code that runs multiple times every frame.<br/>Usage: static ImGuiOnceUponAFrame oaf; if (oaf) ImGui::Text("This will be called only once per frame");.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2399"/></summary>
        // DEBUG: ImGuiOnceUponAFrame
        public ImGuiOnceUponAFrame(ImGuiOnceUponAFrame _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiOnceUponAFrame.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImGuiOnceUponAFrame()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2403"/></summary>
        // DEBUG: operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_frame) return false; RefFrame = current_frame; return true; }
        public static implicit operator bool (ImGuiOnceUponAFrame __op)
        {
            if (ReferenceEquals(__op, null))
                throw new ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            var ___ret = Environment.Is64BitProcess ? __Internal64.OperatorConversion(__arg0) : __Internal32.OperatorConversion(__arg0);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2402"/></summary>
        public int RefFrame
        {
            get
            {
                return ((__Internal*)__Instance)->RefFrame;
            }

            set
            {
                ((__Internal*)__Instance)->RefFrame = value;
            }
        }
    }

    /// <summary>Helper: Parse and apply text filters. In format "aaaaa[,bbbb][,ccccc]".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2407"/></summary>
    // DEBUG: struct ImGuiTextFilter
    // DEBUG: {
    // DEBUG:     IMGUI_API           ImGuiTextFilter(const char* default_filter = "");
    // DEBUG:     IMGUI_API bool      Draw(const char* label = "Filter (inc,-exc)", float width = 0.0f);  // Helper calling InputText+Build
    // DEBUG:     IMGUI_API bool      PassFilter(const char* text, const char* text_end = NULL) const;
    // DEBUG:     IMGUI_API void      Build();
    // DEBUG:     void                Clear()          { InputBuf[0] = 0; Build(); }
    // DEBUG:     bool                IsActive() const { return !Filters.empty(); }
    // DEBUG: 
    // DEBUG:     // [Internal]
    // DEBUG:     struct ImGuiTextRange
    // DEBUG:     {
    // DEBUG:         const char*     b;
    // DEBUG:         const char*     e;
    // DEBUG: 
    // DEBUG:         ImGuiTextRange()                                { b = e = NULL; }
    // DEBUG:         ImGuiTextRange(const char* _b, const char* _e)  { b = _b; e = _e; }
    // DEBUG:         bool            empty() const                   { return b == e; }
    // DEBUG:         IMGUI_API void  split(char separator, ImVector<ImGuiTextRange>* out) const;
    // DEBUG:     };
    // DEBUG:     char                    InputBuf[256];
    // DEBUG:     ImVector<ImGuiTextRange>Filters;
    // DEBUG:     int                     CountGrep;
    // DEBUG: }
    public unsafe partial class ImGuiTextFilter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal fixed sbyte InputBuf[256];
            internal ImVector.__Internal Filters;
            internal int CountGrep;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTextFilter@@QAE@PBD@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string default_filter);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTextFilter@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImGuiTextFilter@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Draw@ImGuiTextFilter@@QAE_NPBDM@Z", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Draw(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float width);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PassFilter@ImGuiTextFilter@@QBE_NPBD0@Z", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool PassFilter(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Build@ImGuiTextFilter@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void Build(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Clear@ImGuiTextFilter@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsActive@ImGuiTextFilter@@QBE_NXZ", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsActive(IntPtr __instance);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTextFilter@@QEAA@PEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string default_filter);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTextFilter@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImGuiTextFilter@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Draw@ImGuiTextFilter@@QEAA_NPEBDM@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Draw(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float width);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PassFilter@ImGuiTextFilter@@QEBA_NPEBD0@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool PassFilter(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Build@ImGuiTextFilter@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Build(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Clear@ImGuiTextFilter@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsActive@ImGuiTextFilter@@QEBA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsActive(IntPtr __instance);

        }

        /// <summary>[Internal].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2417"/></summary>
        // DEBUG: struct ImGuiTextRange
        // DEBUG:     {
        // DEBUG:         const char*     b;
        // DEBUG:         const char*     e;
        // DEBUG: 
        // DEBUG:         ImGuiTextRange()                                { b = e = NULL; }
        // DEBUG:         ImGuiTextRange(const char* _b, const char* _e)  { b = _b; e = _e; }
        // DEBUG:         bool            empty() const                   { return b == e; }
        // DEBUG:         IMGUI_API void  split(char separator, ImVector<ImGuiTextRange>* out) const;
        // DEBUG:     }
        public unsafe partial class ImGuiTextRange : IDisposable
        {
            [StructLayout(LayoutKind.Sequential)]
            internal partial struct __Internal
            {
                internal IntPtr b;
                internal IntPtr e;
            }

            private partial struct __Internal32
            {
                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTextRange@ImGuiTextFilter@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
                internal static extern IntPtr ctor(IntPtr __instance);

                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTextRange@ImGuiTextFilter@@QAE@PBD0@Z", CallingConvention = CallingConvention.ThisCall)]
                internal static extern IntPtr ctor(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string _b, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string _e);

                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTextRange@ImGuiTextFilter@@QAE@$$QAU01@@Z", CallingConvention = CallingConvention.ThisCall)]
                internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?split@ImGuiTextRange@ImGuiTextFilter@@QBEXDPAU?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@@Z", CallingConvention = CallingConvention.ThisCall)]
                internal static extern void Split(IntPtr __instance, sbyte separator, IntPtr @out);

                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?empty@ImGuiTextRange@ImGuiTextFilter@@QBE_NXZ", CallingConvention = CallingConvention.ThisCall)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool Empty(IntPtr __instance);

            }

            private partial struct __Internal64
            {
                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTextRange@ImGuiTextFilter@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
                internal static extern IntPtr ctor(IntPtr __instance);

                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTextRange@ImGuiTextFilter@@QEAA@PEBD0@Z", CallingConvention = CallingConvention.Cdecl)]
                internal static extern IntPtr ctor(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string _b, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string _e);

                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTextRange@ImGuiTextFilter@@QEAA@$$QEAU01@@Z", CallingConvention = CallingConvention.Cdecl)]
                internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?split@ImGuiTextRange@ImGuiTextFilter@@QEBAXDPEAU?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@@Z", CallingConvention = CallingConvention.Cdecl)]
                internal static extern void Split(IntPtr __instance, sbyte separator, IntPtr @out);

                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?empty@ImGuiTextRange@ImGuiTextFilter@@QEBA_NXZ", CallingConvention = CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool Empty(IntPtr __instance);

            }

            internal IntPtr __Instance { get; set; }

            internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiTextFilter.ImGuiTextRange>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiTextFilter.ImGuiTextRange>>();
            internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiTextFilter.ImGuiTextRange managed)
            {
                NativeToManagedMap[native] = new WeakReference<ImGuiTextFilter.ImGuiTextRange>(managed);
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiTextFilter.ImGuiTextRange managed)
            {
                managed = default;
                return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
            }

            private bool __b_OwnsNativeMemory = false;
            private bool __e_OwnsNativeMemory = false;
            private protected bool __ownsNativeInstance;
            internal static ImGuiTextRange __CreateInstance(IntPtr native, bool skipVTables = false)
            {
                if (native == IntPtr.Zero)
                    return null;
                return new ImGuiTextRange(native.ToPointer(), skipVTables);
            }

            internal static ImGuiTextRange __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (ImGuiTextRange)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static ImGuiTextRange __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new ImGuiTextRange(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*)ret = native;
                return ret.ToPointer();
            }

            private ImGuiTextRange(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            private protected ImGuiTextRange(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new IntPtr(native);
            }

            /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2422"/></summary>
            // DEBUG: ImGuiTextRange()                                { b = e = NULL; }
            public ImGuiTextRange()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(ImGuiTextFilter.ImGuiTextRange.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ctor(__Instance);
                }
                else
                {
                    __Internal32.ctor(__Instance);
                }
            }

            /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2423"/></summary>
            // DEBUG: ImGuiTextRange(const char* _b, const char* _e)  { b = _b; e = _e; }
            public ImGuiTextRange(string _b, string _e)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(ImGuiTextFilter.ImGuiTextRange.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ctor(__Instance, _b, _e);
                }
                else
                {
                    __Internal32.ctor(__Instance, _b, _e);
                }
            }

            /// <summary>[Internal].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2417"/></summary>
            // DEBUG: ImGuiTextRange
            public ImGuiTextRange(ImGuiTextFilter.ImGuiTextRange _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(ImGuiTextFilter.ImGuiTextRange.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                if (ReferenceEquals(_0, null))
                    throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = _0.__Instance;
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ctor(__Instance, __arg0);
                }
                else
                {
                    __Internal32.ctor(__Instance, __arg0);
                }
            }

            /// <inheritdoc/>
            ~ImGuiTextRange()
            {
                Dispose(false, callNativeDtor: __ownsNativeInstance);
            }

            /// <inheritdoc/>
            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
                GC.SuppressFinalize(this);
            }

            partial void DisposePartial(bool disposing);
            private protected virtual void Dispose(bool disposing, bool callNativeDtor)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__b_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->b);
                if (__e_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->e);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2425"/></summary>
            // DEBUG: void  split(char separator, ImVector<ImGuiTextRange>* out) const
            public void Split(char separator, ImVector<ImGuiTextFilter.ImGuiTextRange> @out)
            {
                var __arg0 = Convert.ToSByte(separator);
                var __arg1 = new IntPtr(Unsafe.AsPointer(ref @out))
                /* DEBUG: TypeMapImVector.CSharpMarshalToNative: Function: True, ReturnVarName: False */
                ;
                if (Environment.Is64BitProcess)
                {
                    __Internal64.Split(__Instance, __arg0, __arg1);
                }
                else
                {
                    __Internal32.Split(__Instance, __arg0, __arg1);
                }
            }

            /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2419"/></summary>
            public string B
            {
                get
                {
                    return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ((__Internal*)__Instance)->b);
                }

                set
                {
                    if (__b_OwnsNativeMemory)
                        Marshal.FreeHGlobal(((__Internal*)__Instance)->b);
                    __b_OwnsNativeMemory = true;
                    if (value == null)
                    {
                        ((__Internal*)__Instance)->b = IntPtr.Zero;
                        return;
                    }

                    var __bytes0 = Encoding.UTF8.GetBytes(value);
                    var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                    Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                    Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                    ((__Internal*)__Instance)->b = (IntPtr)__bytePtr0;
                }
            }

            /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2420"/></summary>
            public string E
            {
                get
                {
                    return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ((__Internal*)__Instance)->e);
                }

                set
                {
                    if (__e_OwnsNativeMemory)
                        Marshal.FreeHGlobal(((__Internal*)__Instance)->e);
                    __e_OwnsNativeMemory = true;
                    if (value == null)
                    {
                        ((__Internal*)__Instance)->e = IntPtr.Zero;
                        return;
                    }

                    var __bytes0 = Encoding.UTF8.GetBytes(value);
                    var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                    Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                    Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                    ((__Internal*)__Instance)->e = (IntPtr)__bytePtr0;
                }
            }

            /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2424"/></summary>
            public bool Empty
            {
                get
                {
                    var ___ret = Environment.Is64BitProcess ? __Internal64.Empty(__Instance) : __Internal32.Empty(__Instance);
                    return ___ret;
                }
            }
        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiTextFilter>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiTextFilter>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiTextFilter managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiTextFilter>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiTextFilter managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiTextFilter __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiTextFilter(native.ToPointer(), skipVTables);
        }

        internal static ImGuiTextFilter __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiTextFilter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiTextFilter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiTextFilter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiTextFilter(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiTextFilter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2409"/></summary>
        // DEBUG: ImGuiTextFilter(const char* default_filter = "")
        public ImGuiTextFilter(string default_filter = "")
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiTextFilter.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, default_filter);
            }
            else
            {
                __Internal32.ctor(__Instance, default_filter);
            }
        }

        /// <summary>Helper: Parse and apply text filters. In format "aaaaa[,bbbb][,ccccc]".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2407"/></summary>
        // DEBUG: ImGuiTextFilter
        public ImGuiTextFilter(ImGuiTextFilter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiTextFilter.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImGuiTextFilter()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                if (Environment.Is64BitProcess)
                {
                    __Internal64.dtor(__Instance);
                }
                else
                {
                    __Internal32.dtor(__Instance);
                }

            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Helper calling InputText+Build.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2410"/></summary>
        // DEBUG: bool      Draw(const char* label = "Filter (inc,-exc)", float width = 0.0f)
        public bool Draw(string label = "Filter (inc,-exc)", float width = 0.0F)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.Draw(__Instance, label, width) : __Internal32.Draw(__Instance, label, width);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2411"/></summary>
        // DEBUG: bool      PassFilter(const char* text, const char* text_end = NULL) const
        public bool PassFilter(string text, string text_end = default)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.PassFilter(__Instance, text, text_end) : __Internal32.PassFilter(__Instance, text, text_end);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2412"/></summary>
        // DEBUG: void      Build()
        public void Build()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Build(__Instance);
            }
            else
            {
                __Internal32.Build(__Instance);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2413"/></summary>
        // DEBUG: void                Clear()          { InputBuf[0] = 0; Build(); }
        public void Clear()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Clear(__Instance);
            }
            else
            {
                __Internal32.Clear(__Instance);
            }
        }

        public static implicit operator ImGuiTextFilter(string default_filter)
        {
            return new ImGuiTextFilter(default_filter);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2427"/></summary>
        public Span<char> InputBuf
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetCharArray(((__Internal*)__Instance)->InputBuf, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->InputBuf[i] = Convert.ToSByte(value[i]);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2428"/></summary>
        public ImVector<ImGuiTextFilter.ImGuiTextRange> Filters
        {
            get
            {
                return new ImVector<ImGuiTextFilter.ImGuiTextRange>(Unsafe.As<ImVector.__Internal, ImVector<ImGuiTextFilter.ImGuiTextRange>.__Internal>(ref ((__Internal*)__Instance)->Filters))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2429"/></summary>
        public int CountGrep
        {
            get
            {
                return ((__Internal*)__Instance)->CountGrep;
            }

            set
            {
                ((__Internal*)__Instance)->CountGrep = value;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2414"/></summary>
        public bool IsActive
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.IsActive(__Instance) : __Internal32.IsActive(__Instance);
                return ___ret;
            }
        }
    }

    /// <summary>Helper: Growable text buffer for logging/accumulating text.<br/>(this could be called 'ImGuiTextBuilder' / 'ImGuiStringBuilder').<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2434"/></summary>
    // DEBUG: struct ImGuiTextBuffer
    // DEBUG: {
    // DEBUG:     ImVector<char>      Buf;
    // DEBUG:     IMGUI_API static char EmptyString[1];
    // DEBUG: 
    // DEBUG:     ImGuiTextBuffer()   { }
    // DEBUG:     inline char         operator[](int i) const { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i]; }
    // DEBUG:     const char*         begin() const           { return Buf.Data ? &Buf.front() : EmptyString; }
    // DEBUG:     const char*         end() const             { return Buf.Data ? &Buf.back() : EmptyString; }   // Buf is zero-terminated, so end() will point on the zero-terminator
    // DEBUG:     int                 size() const            { return Buf.Size ? Buf.Size - 1 : 0; }
    // DEBUG:     bool                empty() const           { return Buf.Size <= 1; }
    // DEBUG:     void                clear()                 { Buf.clear(); }
    // DEBUG:     void                reserve(int capacity)   { Buf.reserve(capacity); }
    // DEBUG:     const char*         c_str() const           { return Buf.Data ? Buf.Data : EmptyString; }
    // DEBUG:     IMGUI_API void      append(const char* str, const char* str_end = NULL);
    // DEBUG:     IMGUI_API void      appendf(const char* fmt, ...) IM_FMTARGS(2);
    // DEBUG:     IMGUI_API void      appendfv(const char* fmt, va_list args) IM_FMTLIST(2);
    // DEBUG: }
    public unsafe partial class ImGuiTextBuffer : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal ImVector.__Internal Buf;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTextBuffer@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTextBuffer@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImGuiTextBuffer@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?begin@ImGuiTextBuffer@@QBEPBDXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr Begin(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?end@ImGuiTextBuffer@@QBEPBDXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr End(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?clear@ImGuiTextBuffer@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?reserve@ImGuiTextBuffer@@QAEXH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void Reserve(IntPtr __instance, int capacity);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?append@ImGuiTextBuffer@@QAEXPBD0@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void Append(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?appendf@ImGuiTextBuffer@@QAAXPBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Appendf(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?appendfv@ImGuiTextBuffer@@QAEXPBDPAD@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void Appendfv(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??AImGuiTextBuffer@@QBEDH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern sbyte OperatorSubscript(IntPtr __instance, int i);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?size@ImGuiTextBuffer@@QBEHXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern int Size(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?empty@ImGuiTextBuffer@@QBE_NXZ", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Empty(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?c_str@ImGuiTextBuffer@@QBEPBDXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr CStr(IntPtr __instance);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTextBuffer@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiTextBuffer@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImGuiTextBuffer@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?begin@ImGuiTextBuffer@@QEBAPEBDXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr Begin(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?end@ImGuiTextBuffer@@QEBAPEBDXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr End(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?clear@ImGuiTextBuffer@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?reserve@ImGuiTextBuffer@@QEAAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Reserve(IntPtr __instance, int capacity);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?append@ImGuiTextBuffer@@QEAAXPEBD0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Append(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Appendf(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?appendfv@ImGuiTextBuffer@@QEAAXPEBDPEAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Appendfv(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??AImGuiTextBuffer@@QEBADH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern sbyte OperatorSubscript(IntPtr __instance, int i);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?size@ImGuiTextBuffer@@QEBAHXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int Size(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?empty@ImGuiTextBuffer@@QEBA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Empty(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?c_str@ImGuiTextBuffer@@QEBAPEBDXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr CStr(IntPtr __instance);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiTextBuffer>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiTextBuffer>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiTextBuffer managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiTextBuffer>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiTextBuffer managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiTextBuffer __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiTextBuffer(native.ToPointer(), skipVTables);
        }

        internal static ImGuiTextBuffer __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiTextBuffer)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiTextBuffer __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiTextBuffer(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiTextBuffer(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiTextBuffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2439"/></summary>
        // DEBUG: ImGuiTextBuffer()   { }
        public ImGuiTextBuffer()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiTextBuffer.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>Helper: Growable text buffer for logging/accumulating text.<br/>(this could be called 'ImGuiTextBuilder' / 'ImGuiStringBuilder').<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2434"/></summary>
        // DEBUG: ImGuiTextBuffer
        public ImGuiTextBuffer(ImGuiTextBuffer _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiTextBuffer.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImGuiTextBuffer()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                if (Environment.Is64BitProcess)
                {
                    __Internal64.dtor(__Instance);
                }
                else
                {
                    __Internal32.dtor(__Instance);
                }

            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2441"/></summary>
        // DEBUG: const char*         begin() const           { return Buf.Data ? &Buf.front() : EmptyString; }
        public string Begin()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.Begin(__Instance) : __Internal32.Begin(__Instance);
            return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ___ret);
        }

        /// <summary>Buf is zero-terminated, so end() will point on the zero-terminator.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2442"/></summary>
        // DEBUG: const char*         end() const             { return Buf.Data ? &Buf.back() : EmptyString; }
        public string End()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.End(__Instance) : __Internal32.End(__Instance);
            return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ___ret);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2445"/></summary>
        // DEBUG: void                clear()                 { Buf.clear(); }
        public void Clear()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Clear(__Instance);
            }
            else
            {
                __Internal32.Clear(__Instance);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2446"/></summary>
        // DEBUG: void                reserve(int capacity)   { Buf.reserve(capacity); }
        public void Reserve(int capacity)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Reserve(__Instance, capacity);
            }
            else
            {
                __Internal32.Reserve(__Instance, capacity);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2448"/></summary>
        // DEBUG: void      append(const char* str, const char* str_end = NULL)
        public void Append(string str, string str_end = default)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Append(__Instance, str, str_end);
            }
            else
            {
                __Internal32.Append(__Instance, str, str_end);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2449"/></summary>
        // DEBUG: void      appendf(const char* fmt, ...) IM_FMTARGS(2)
        public void Appendf(string fmt)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Appendf(__Instance, fmt);
            }
            else
            {
                __Internal32.Appendf(__Instance, fmt);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2450"/></summary>
        // DEBUG: void      appendfv(const char* fmt, va_list args) IM_FMTLIST(2)
        public void Appendfv(string fmt, Object args)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Appendfv(__Instance, fmt, args);
            }
            else
            {
                __Internal32.Appendfv(__Instance, fmt, args);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2437"/></summary>
        // DEBUG: static char EmptyString[1]
        public static Span<char> EmptyString
        {
            get
            {
                var __ptr = (sbyte*)ImGui._EmptyString_ImGuiTextBuffer__2PADA;
                return CppSharp.Runtime.MarshalUtil.GetCharArray(__ptr, 1);
            }
        }

        public char this[int i]
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.OperatorSubscript(__Instance, i) : __Internal32.OperatorSubscript(__Instance, i);
                return Convert.ToChar(___ret);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2436"/></summary>
        public ImVector<char> Buf
        {
            get
            {
                return new ImVector<char>(Unsafe.As<ImVector.__Internal, ImVector<char>.__Internal>(ref ((__Internal*)__Instance)->Buf))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2443"/></summary>
        public int Size
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.Size(__Instance) : __Internal32.Size(__Instance);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2444"/></summary>
        public bool Empty
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.Empty(__Instance) : __Internal32.Empty(__Instance);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2447"/></summary>
        public string CStr
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.CStr(__Instance) : __Internal32.CStr(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ___ret);
            }
        }
    }

    /// <summary>Helper: Key-&gt;Value storage.<br/>Typically you don't have to worry about this since a storage is held within each Window.<br/>We use it to e.g. store collapse state for a tree (Int 0/1).<br/>This is optimized for efficient lookup (dichotomy into a contiguous buffer) and rare insertion (typically tied to user interactions aka max once a frame).<br/>You can use it as custom user storage for temporary values. Declare your own storage if, for example:.<br/>- You want to manipulate the open/close state of a particular sub-tree in your interface (tree node uses Int 0/1 to store their state).<br/>- You want to store custom debug data easily without adding or editing structures in your code (probably not efficient, but convenient).<br/>Types are NOT stored, so it is up to you to make sure your Key don't collide with different types.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2461"/></summary>
    // DEBUG: struct ImGuiStorage
    // DEBUG: {
    // DEBUG:     // [Internal]
    // DEBUG:     struct ImGuiStoragePair
    // DEBUG:     {
    // DEBUG:         ImGuiID key;
    // DEBUG:         union { int val_i; float val_f; void* val_p; };
    // DEBUG:         ImGuiStoragePair(ImGuiID _key, int _val_i)      { key = _key; val_i = _val_i; }
    // DEBUG:         ImGuiStoragePair(ImGuiID _key, float _val_f)    { key = _key; val_f = _val_f; }
    // DEBUG:         ImGuiStoragePair(ImGuiID _key, void* _val_p)    { key = _key; val_p = _val_p; }
    // DEBUG:     };
    // DEBUG: 
    // DEBUG:     ImVector<ImGuiStoragePair>      Data;
    // DEBUG: 
    // DEBUG:     // - Get***() functions find pair, never add/allocate. Pairs are sorted so a query is O(log N)
    // DEBUG:     // - Set***() functions find pair, insertion on demand if missing.
    // DEBUG:     // - Sorted insertion is costly, paid once. A typical frame shouldn't need to insert any new pair.
    // DEBUG:     void                Clear() { Data.clear(); }
    // DEBUG:     IMGUI_API int       GetInt(ImGuiID key, int default_val = 0) const;
    // DEBUG:     IMGUI_API void      SetInt(ImGuiID key, int val);
    // DEBUG:     IMGUI_API bool      GetBool(ImGuiID key, bool default_val = false) const;
    // DEBUG:     IMGUI_API void      SetBool(ImGuiID key, bool val);
    // DEBUG:     IMGUI_API float     GetFloat(ImGuiID key, float default_val = 0.0f) const;
    // DEBUG:     IMGUI_API void      SetFloat(ImGuiID key, float val);
    // DEBUG:     IMGUI_API void*     GetVoidPtr(ImGuiID key) const; // default_val is NULL
    // DEBUG:     IMGUI_API void      SetVoidPtr(ImGuiID key, void* val);
    // DEBUG: 
    // DEBUG:     // - Get***Ref() functions finds pair, insert on demand if missing, return pointer. Useful if you intend to do Get+Set.
    // DEBUG:     // - References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer.
    // DEBUG:     // - A typical use case where this is convenient for quick hacking (e.g. add storage during a live Edit&Continue session if you can't modify existing struct)
    // DEBUG:     //      float* pvar = ImGui::GetFloatRef(key); ImGui::SliderFloat("var", pvar, 0, 100.0f); some_var += *pvar;
    // DEBUG:     IMGUI_API int*      GetIntRef(ImGuiID key, int default_val = 0);
    // DEBUG:     IMGUI_API bool*     GetBoolRef(ImGuiID key, bool default_val = false);
    // DEBUG:     IMGUI_API float*    GetFloatRef(ImGuiID key, float default_val = 0.0f);
    // DEBUG:     IMGUI_API void**    GetVoidPtrRef(ImGuiID key, void* default_val = NULL);
    // DEBUG: 
    // DEBUG:     // Use on your own storage if you know only integer are being stored (open/close all tree nodes)
    // DEBUG:     IMGUI_API void      SetAllInt(int val);
    // DEBUG: 
    // DEBUG:     // For quicker full rebuild of a storage (instead of an incremental one), you may add all your contents and then sort once.
    // DEBUG:     IMGUI_API void      BuildSortByKey();
    // DEBUG: }
    public unsafe partial class ImGuiStorage : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal ImVector.__Internal Data;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStorage@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStorage@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImGuiStorage@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Clear@ImGuiStorage@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetInt@ImGuiStorage@@QBEHIH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern int GetInt(IntPtr __instance, uint key, int default_val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetInt@ImGuiStorage@@QAEXIH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void SetInt(IntPtr __instance, uint key, int val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetBool@ImGuiStorage@@QBE_NI_N@Z", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBool(IntPtr __instance, uint key, bool default_val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetBool@ImGuiStorage@@QAEXI_N@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void SetBool(IntPtr __instance, uint key, bool val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFloat@ImGuiStorage@@QBEMIM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern float GetFloat(IntPtr __instance, uint key, float default_val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetFloat@ImGuiStorage@@QAEXIM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void SetFloat(IntPtr __instance, uint key, float val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetVoidPtr@ImGuiStorage@@QBEPAXI@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr GetVoidPtr(IntPtr __instance, uint key);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetVoidPtr@ImGuiStorage@@QAEXIPAX@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void SetVoidPtr(IntPtr __instance, uint key, IntPtr val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetIntRef@ImGuiStorage@@QAEPAHIH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern int* GetIntRef(IntPtr __instance, uint key, int default_val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetBoolRef@ImGuiStorage@@QAEPA_NI_N@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern bool* GetBoolRef(IntPtr __instance, uint key, bool default_val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFloatRef@ImGuiStorage@@QAEPAMIM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern float* GetFloatRef(IntPtr __instance, uint key, float default_val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetVoidPtrRef@ImGuiStorage@@QAEPAPAXIPAX@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr* GetVoidPtrRef(IntPtr __instance, uint key, IntPtr default_val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetAllInt@ImGuiStorage@@QAEXH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void SetAllInt(IntPtr __instance, int val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BuildSortByKey@ImGuiStorage@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void BuildSortByKey(IntPtr __instance);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStorage@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStorage@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImGuiStorage@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Clear@ImGuiStorage@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetInt@ImGuiStorage@@QEBAHIH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int GetInt(IntPtr __instance, uint key, int default_val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetInt@ImGuiStorage@@QEAAXIH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetInt(IntPtr __instance, uint key, int val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetBool@ImGuiStorage@@QEBA_NI_N@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBool(IntPtr __instance, uint key, bool default_val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetBool@ImGuiStorage@@QEAAXI_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetBool(IntPtr __instance, uint key, bool val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFloat@ImGuiStorage@@QEBAMIM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetFloat(IntPtr __instance, uint key, float default_val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetFloat@ImGuiStorage@@QEAAXIM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetFloat(IntPtr __instance, uint key, float val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetVoidPtr@ImGuiStorage@@QEBAPEAXI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetVoidPtr(IntPtr __instance, uint key);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetVoidPtr@ImGuiStorage@@QEAAXIPEAX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetVoidPtr(IntPtr __instance, uint key, IntPtr val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetIntRef@ImGuiStorage@@QEAAPEAHIH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int* GetIntRef(IntPtr __instance, uint key, int default_val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetBoolRef@ImGuiStorage@@QEAAPEA_NI_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern bool* GetBoolRef(IntPtr __instance, uint key, bool default_val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFloatRef@ImGuiStorage@@QEAAPEAMIM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float* GetFloatRef(IntPtr __instance, uint key, float default_val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetVoidPtrRef@ImGuiStorage@@QEAAPEAPEAXIPEAX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr* GetVoidPtrRef(IntPtr __instance, uint key, IntPtr default_val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetAllInt@ImGuiStorage@@QEAAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetAllInt(IntPtr __instance, int val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BuildSortByKey@ImGuiStorage@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void BuildSortByKey(IntPtr __instance);

        }

        /// <summary>[Internal].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2464"/></summary>
        // DEBUG: struct ImGuiStoragePair
        // DEBUG:     {
        // DEBUG:         ImGuiID key;
        // DEBUG:         union { int val_i; float val_f; void* val_p; };
        // DEBUG:         ImGuiStoragePair(ImGuiID _key, int _val_i)      { key = _key; val_i = _val_i; }
        // DEBUG:         ImGuiStoragePair(ImGuiID _key, float _val_f)    { key = _key; val_f = _val_f; }
        // DEBUG:         ImGuiStoragePair(ImGuiID _key, void* _val_p)    { key = _key; val_p = _val_p; }
        // DEBUG:     }
        public unsafe partial class ImGuiStoragePair : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            internal partial struct __Internal
            {
                [FieldOffset(0)]
                internal uint key;
                [FieldOffset(4)]
                internal int val_i;
                [FieldOffset(4)]
                internal float val_f;
                [FieldOffset(4)]
                internal IntPtr val_p;
            }

            private partial struct __Internal32
            {
                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStoragePair@ImGuiStorage@@QAE@IH@Z", CallingConvention = CallingConvention.ThisCall)]
                internal static extern IntPtr ctor(IntPtr __instance, uint _key, int _val_i);

                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStoragePair@ImGuiStorage@@QAE@IM@Z", CallingConvention = CallingConvention.ThisCall)]
                internal static extern IntPtr ctor_1(IntPtr __instance, uint _key, float _val_f);

                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStoragePair@ImGuiStorage@@QAE@IPAX@Z", CallingConvention = CallingConvention.ThisCall)]
                internal static extern IntPtr ctor(IntPtr __instance, uint _key, IntPtr _val_p);

                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStoragePair@ImGuiStorage@@QAE@$$QAU01@@Z", CallingConvention = CallingConvention.ThisCall)]
                internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            }

            private partial struct __Internal64
            {
                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStoragePair@ImGuiStorage@@QEAA@IH@Z", CallingConvention = CallingConvention.Cdecl)]
                internal static extern IntPtr ctor(IntPtr __instance, uint _key, int _val_i);

                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStoragePair@ImGuiStorage@@QEAA@IM@Z", CallingConvention = CallingConvention.Cdecl)]
                internal static extern IntPtr ctor_1(IntPtr __instance, uint _key, float _val_f);

                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStoragePair@ImGuiStorage@@QEAA@IPEAX@Z", CallingConvention = CallingConvention.Cdecl)]
                internal static extern IntPtr ctor(IntPtr __instance, uint _key, IntPtr _val_p);

                [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiStoragePair@ImGuiStorage@@QEAA@$$QEAU01@@Z", CallingConvention = CallingConvention.Cdecl)]
                internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            }

            internal IntPtr __Instance { get; set; }

            internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiStorage.ImGuiStoragePair>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiStorage.ImGuiStoragePair>>();
            internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiStorage.ImGuiStoragePair managed)
            {
                NativeToManagedMap[native] = new WeakReference<ImGuiStorage.ImGuiStoragePair>(managed);
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiStorage.ImGuiStoragePair managed)
            {
                managed = default;
                return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
            }

            private protected bool __ownsNativeInstance;
            internal static ImGuiStoragePair __CreateInstance(IntPtr native, bool skipVTables = false)
            {
                if (native == IntPtr.Zero)
                    return null;
                return new ImGuiStoragePair(native.ToPointer(), skipVTables);
            }

            internal static ImGuiStoragePair __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (ImGuiStoragePair)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static ImGuiStoragePair __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new ImGuiStoragePair(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*)ret = native;
                return ret.ToPointer();
            }

            private ImGuiStoragePair(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            private protected ImGuiStoragePair(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new IntPtr(native);
            }

            /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2468"/></summary>
            // DEBUG: ImGuiStoragePair(ImGuiID _key, int _val_i)      { key = _key; val_i = _val_i; }
            public ImGuiStoragePair(uint _key, int _val_i)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(ImGuiStorage.ImGuiStoragePair.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ctor(__Instance, _key, _val_i);
                }
                else
                {
                    __Internal32.ctor(__Instance, _key, _val_i);
                }
            }

            /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2469"/></summary>
            // DEBUG: ImGuiStoragePair(ImGuiID _key, float _val_f)    { key = _key; val_f = _val_f; }
            public ImGuiStoragePair(uint _key, float _val_f)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(ImGuiStorage.ImGuiStoragePair.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ctor_1(__Instance, _key, _val_f);
                }
                else
                {
                    __Internal32.ctor_1(__Instance, _key, _val_f);
                }
            }

            /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2470"/></summary>
            // DEBUG: ImGuiStoragePair(ImGuiID _key, void* _val_p)    { key = _key; val_p = _val_p; }
            public ImGuiStoragePair(uint _key, IntPtr _val_p)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(ImGuiStorage.ImGuiStoragePair.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ctor(__Instance, _key, _val_p);
                }
                else
                {
                    __Internal32.ctor(__Instance, _key, _val_p);
                }
            }

            /// <summary>[Internal].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2464"/></summary>
            // DEBUG: ImGuiStoragePair
            public ImGuiStoragePair(ImGuiStorage.ImGuiStoragePair _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(ImGuiStorage.ImGuiStoragePair.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                if (ReferenceEquals(_0, null))
                    throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = _0.__Instance;
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ctor(__Instance, __arg0);
                }
                else
                {
                    __Internal32.ctor(__Instance, __arg0);
                }
            }

            /// <inheritdoc/>
            ~ImGuiStoragePair()
            {
                Dispose(false, callNativeDtor: __ownsNativeInstance);
            }

            /// <inheritdoc/>
            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
                GC.SuppressFinalize(this);
            }

            partial void DisposePartial(bool disposing);
            private protected virtual void Dispose(bool disposing, bool callNativeDtor)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2466"/></summary>
            public uint Key
            {
                get
                {
                    return ((__Internal*)__Instance)->key;
                }

                set
                {
                    ((__Internal*)__Instance)->key = value;
                }
            }

            /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2467"/></summary>
            public int ValI
            {
                get
                {
                    return ((__Internal*)__Instance)->val_i;
                }

                set
                {
                    ((__Internal*)__Instance)->val_i = value;
                }
            }

            /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2467"/></summary>
            public float ValF
            {
                get
                {
                    return ((__Internal*)__Instance)->val_f;
                }

                set
                {
                    ((__Internal*)__Instance)->val_f = value;
                }
            }

            /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2467"/></summary>
            public IntPtr ValP
            {
                get
                {
                    return ((__Internal*)__Instance)->val_p;
                }

                set
                {
                    ((__Internal*)__Instance)->val_p = (IntPtr)value;
                }
            }
        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiStorage>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiStorage>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiStorage managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiStorage>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiStorage managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiStorage __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiStorage(native.ToPointer(), skipVTables);
        }

        internal static ImGuiStorage __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiStorage)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiStorage __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiStorage(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiStorage(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiStorage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary>Helper: Key-&gt;Value storage.<br/>Typically you don't have to worry about this since a storage is held within each Window.<br/>We use it to e.g. store collapse state for a tree (Int 0/1).<br/>This is optimized for efficient lookup (dichotomy into a contiguous buffer) and rare insertion (typically tied to user interactions aka max once a frame).<br/>You can use it as custom user storage for temporary values. Declare your own storage if, for example:.<br/>- You want to manipulate the open/close state of a particular sub-tree in your interface (tree node uses Int 0/1 to store their state).<br/>- You want to store custom debug data easily without adding or editing structures in your code (probably not efficient, but convenient).<br/>Types are NOT stored, so it is up to you to make sure your Key don't collide with different types.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2461"/></summary>
        // DEBUG: ImGuiStorage
        public ImGuiStorage(ImGuiStorage _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiStorage.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <summary>Helper: Key-&gt;Value storage.<br/>Typically you don't have to worry about this since a storage is held within each Window.<br/>We use it to e.g. store collapse state for a tree (Int 0/1).<br/>This is optimized for efficient lookup (dichotomy into a contiguous buffer) and rare insertion (typically tied to user interactions aka max once a frame).<br/>You can use it as custom user storage for temporary values. Declare your own storage if, for example:.<br/>- You want to manipulate the open/close state of a particular sub-tree in your interface (tree node uses Int 0/1 to store their state).<br/>- You want to store custom debug data easily without adding or editing structures in your code (probably not efficient, but convenient).<br/>Types are NOT stored, so it is up to you to make sure your Key don't collide with different types.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2461"/></summary>
        // DEBUG: ImGuiStorage
        public ImGuiStorage()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiStorage.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <inheritdoc/>
        ~ImGuiStorage()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                if (Environment.Is64BitProcess)
                {
                    __Internal64.dtor(__Instance);
                }
                else
                {
                    __Internal32.dtor(__Instance);
                }

            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>- Get***() functions find pair, never add/allocate. Pairs are sorted so a query is O(log N).<br/>- Set***() functions find pair, insertion on demand if missing.<br/>- Sorted insertion is costly, paid once. A typical frame shouldn't need to insert any new pair.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2478"/></summary>
        // DEBUG: void                Clear() { Data.clear(); }
        public void Clear()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Clear(__Instance);
            }
            else
            {
                __Internal32.Clear(__Instance);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2479"/></summary>
        // DEBUG: int       GetInt(ImGuiID key, int default_val = 0) const
        public int GetInt(uint key, int default_val = (int)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetInt(__Instance, key, default_val) : __Internal32.GetInt(__Instance, key, default_val);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2480"/></summary>
        // DEBUG: void      SetInt(ImGuiID key, int val)
        public void SetInt(uint key, int val)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetInt(__Instance, key, val);
            }
            else
            {
                __Internal32.SetInt(__Instance, key, val);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2481"/></summary>
        // DEBUG: bool      GetBool(ImGuiID key, bool default_val = false) const
        public bool GetBool(uint key, bool default_val = false)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetBool(__Instance, key, default_val) : __Internal32.GetBool(__Instance, key, default_val);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2482"/></summary>
        // DEBUG: void      SetBool(ImGuiID key, bool val)
        public void SetBool(uint key, bool val)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetBool(__Instance, key, val);
            }
            else
            {
                __Internal32.SetBool(__Instance, key, val);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2483"/></summary>
        // DEBUG: float     GetFloat(ImGuiID key, float default_val = 0.0f) const
        public float GetFloat(uint key, float default_val = 0.0F)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetFloat(__Instance, key, default_val) : __Internal32.GetFloat(__Instance, key, default_val);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2484"/></summary>
        // DEBUG: void      SetFloat(ImGuiID key, float val)
        public void SetFloat(uint key, float val)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetFloat(__Instance, key, val);
            }
            else
            {
                __Internal32.SetFloat(__Instance, key, val);
            }
        }

        /// <summary>Default_val is NULL.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2485"/></summary>
        // DEBUG: void*     GetVoidPtr(ImGuiID key) const
        public IntPtr GetVoidPtr(uint key)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetVoidPtr(__Instance, key) : __Internal32.GetVoidPtr(__Instance, key);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2486"/></summary>
        // DEBUG: void      SetVoidPtr(ImGuiID key, void* val)
        public void SetVoidPtr(uint key, IntPtr val)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetVoidPtr(__Instance, key, val);
            }
            else
            {
                __Internal32.SetVoidPtr(__Instance, key, val);
            }
        }

        /// <summary>- Get***Ref() functions finds pair, insert on demand if missing, return pointer. Useful if you intend to do Get+Set.<br/>- References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer.<br/>- A typical use case where this is convenient for quick hacking (e.g. add storage during a live Edit&amp;Continue session if you can't modify existing struct).<br/>Float* pvar = ImGui::GetFloatRef(key); ImGui::SliderFloat("var", pvar, 0, 100.0f); some_var += *pvar;.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2492"/></summary>
        // DEBUG: int*      GetIntRef(ImGuiID key, int default_val = 0)
        public int* GetIntRef(uint key, int default_val = (int)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetIntRef(__Instance, key, default_val) : __Internal32.GetIntRef(__Instance, key, default_val);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2493"/></summary>
        // DEBUG: bool*     GetBoolRef(ImGuiID key, bool default_val = false)
        public bool* GetBoolRef(uint key, bool default_val = false)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetBoolRef(__Instance, key, default_val) : __Internal32.GetBoolRef(__Instance, key, default_val);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2494"/></summary>
        // DEBUG: float*    GetFloatRef(ImGuiID key, float default_val = 0.0f)
        public float* GetFloatRef(uint key, float default_val = 0.0F)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetFloatRef(__Instance, key, default_val) : __Internal32.GetFloatRef(__Instance, key, default_val);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2495"/></summary>
        // DEBUG: void**    GetVoidPtrRef(ImGuiID key, void* default_val = NULL)
        public IntPtr* GetVoidPtrRef(uint key, IntPtr default_val = default)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetVoidPtrRef(__Instance, key, default_val) : __Internal32.GetVoidPtrRef(__Instance, key, default_val);
            return ___ret;
        }

        /// <summary>Use on your own storage if you know only integer are being stored (open/close all tree nodes).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2498"/></summary>
        // DEBUG: void      SetAllInt(int val)
        public void SetAllInt(int val)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetAllInt(__Instance, val);
            }
            else
            {
                __Internal32.SetAllInt(__Instance, val);
            }
        }

        /// <summary>For quicker full rebuild of a storage (instead of an incremental one), you may add all your contents and then sort once.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2501"/></summary>
        // DEBUG: void      BuildSortByKey()
        public void BuildSortByKey()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.BuildSortByKey(__Instance);
            }
            else
            {
                __Internal32.BuildSortByKey(__Instance);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2473"/></summary>
        public ImVector<ImGuiStorage.ImGuiStoragePair> Data
        {
            get
            {
                return new ImVector<ImGuiStorage.ImGuiStoragePair>(Unsafe.As<ImVector.__Internal, ImVector<ImGuiStorage.ImGuiStoragePair>.__Internal>(ref ((__Internal*)__Instance)->Data))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }
    }

    /// <summary>Helper: Manually clip large list of items.<br/>If you have lots evenly spaced items and you have random access to the list, you can perform coarse.<br/>Clipping based on visibility to only submit items that are in view.<br/>The clipper calculates the range of visible items and advance the cursor to compensate for the non-visible items we have skipped.<br/>(Dear ImGui already clip items based on their bounds but: it needs to first layout the item to do so, and generally.<br/>Fetching/submitting your own data incurs additional cost. Coarse clipping using ImGuiListClipper allows you to easily.<br/>Scale using lists with tens of thousands of items without a problem).<br/>Usage:.<br/>ImGuiListClipper clipper;.<br/>Clipper.Begin(1000);, // We have 1000 elements, evenly spaced.<br/>While (clipper.Step()).<br/>For (int i = clipper.DisplayStart; i &lt; clipper.DisplayEnd; i++).<br/>ImGui::Text("line number %d", i);.<br/>Generally what happens is:.<br/>- Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1) regardless of it being visible or not.<br/>- User code submit that one element.<br/>- Clipper can measure the height of the first element.<br/>- Clipper calculate the actual range of elements to display based on the current clipping rectangle, position the cursor before the first visible element.<br/>- User code submit visible elements.<br/>- The clipper also handles various subtleties related to keyboard/gamepad navigation, wrapping etc.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2524"/></summary>
    // DEBUG: struct ImGuiListClipper
    // DEBUG: {
    // DEBUG:     ImGuiContext*   Ctx;                // Parent UI context
    // DEBUG:     int             DisplayStart;       // First item to display, updated by each call to Step()
    // DEBUG:     int             DisplayEnd;         // End of items to display (exclusive)
    // DEBUG:     int             ItemsCount;         // [Internal] Number of items
    // DEBUG:     float           ItemsHeight;        // [Internal] Height of item after a first step and item submission can calculate it
    // DEBUG:     float           StartPosY;          // [Internal] Cursor position at the time of Begin() or after table frozen rows are all processed
    // DEBUG:     void*           TempData;           // [Internal] Internal data
    // DEBUG: 
    // DEBUG:     // items_count: Use INT_MAX if you don't know how many items you have (in which case the cursor won't be advanced in the final step)
    // DEBUG:     // items_height: Use -1.0f to be calculated automatically on first step. Otherwise pass in the distance between your items, typically GetTextLineHeightWithSpacing() or GetFrameHeightWithSpacing().
    // DEBUG:     IMGUI_API ImGuiListClipper();
    // DEBUG:     IMGUI_API ~ImGuiListClipper();
    // DEBUG:     IMGUI_API void  Begin(int items_count, float items_height = -1.0f);
    // DEBUG:     IMGUI_API void  End();             // Automatically called on the last call of Step() that returns false.
    // DEBUG:     IMGUI_API bool  Step();            // Call until it returns false. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items.
    // DEBUG: 
    // DEBUG:     // Call IncludeItemByIndex() or IncludeItemsByIndex() *BEFORE* first call to Step() if you need a range of items to not be clipped, regardless of their visibility.
    // DEBUG:     // (Due to alignment / padding of certain items it is possible that an extra item may be included on either end of the display range).
    // DEBUG:     inline void     IncludeItemByIndex(int item_index)                  { IncludeItemsByIndex(item_index, item_index + 1); }
    // DEBUG:     IMGUI_API void  IncludeItemsByIndex(int item_begin, int item_end);  // item_end is exclusive e.g. use (42, 42+1) to make item 42 never clipped.
    // DEBUG: 
    // DEBUG: #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    // DEBUG:     inline void IncludeRangeByIndices(int item_begin, int item_end)      { IncludeItemsByIndex(item_begin, item_end); } // [renamed in 1.89.9]
    // DEBUG:     inline void ForceDisplayRangeByIndices(int item_begin, int item_end) { IncludeItemsByIndex(item_begin, item_end); } // [renamed in 1.89.6]
    // DEBUG:     //inline ImGuiListClipper(int items_count, float items_height = -1.0f) { memset(this, 0, sizeof(*this)); ItemsCount = -1; Begin(items_count, items_height); } // [removed in 1.79]
    // DEBUG: #endif
    // DEBUG: }
    public unsafe partial class ImGuiListClipper : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal IntPtr Ctx;
            internal int DisplayStart;
            internal int DisplayEnd;
            internal int ItemsCount;
            internal float ItemsHeight;
            internal float StartPosY;
            internal IntPtr TempData;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiListClipper@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiListClipper@@QAE@ABU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImGuiListClipper@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Begin@ImGuiListClipper@@QAEXHM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void Begin(IntPtr __instance, int items_count, float items_height);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?End@ImGuiListClipper@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void End(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IncludeItemByIndex@ImGuiListClipper@@QAEXH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void IncludeItemByIndex(IntPtr __instance, int item_index);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IncludeItemsByIndex@ImGuiListClipper@@QAEXHH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void IncludeItemsByIndex(IntPtr __instance, int item_begin, int item_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Step@ImGuiListClipper@@QAE_NXZ", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Step(IntPtr __instance);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiListClipper@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiListClipper@@QEAA@AEBU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImGuiListClipper@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Begin@ImGuiListClipper@@QEAAXHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Begin(IntPtr __instance, int items_count, float items_height);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?End@ImGuiListClipper@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void End(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IncludeItemByIndex@ImGuiListClipper@@QEAAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void IncludeItemByIndex(IntPtr __instance, int item_index);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IncludeItemsByIndex@ImGuiListClipper@@QEAAXHH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void IncludeItemsByIndex(IntPtr __instance, int item_begin, int item_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Step@ImGuiListClipper@@QEAA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Step(IntPtr __instance);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiListClipper>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiListClipper>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiListClipper managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiListClipper>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiListClipper managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiListClipper __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiListClipper(native.ToPointer(), skipVTables);
        }

        internal static ImGuiListClipper __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiListClipper)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiListClipper __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiListClipper(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiListClipper(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiListClipper(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary>Items_count: Use INT_MAX if you don't know how many items you have (in which case the cursor won't be advanced in the final step).<br/>Items_height: Use -1.0f to be calculated automatically on first step. Otherwise pass in the distance between your items, typically GetTextLineHeightWithSpacing() or GetFrameHeightWithSpacing().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2536"/></summary>
        // DEBUG: ImGuiListClipper()
        public ImGuiListClipper()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiListClipper.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>Helper: Manually clip large list of items.<br/>If you have lots evenly spaced items and you have random access to the list, you can perform coarse.<br/>Clipping based on visibility to only submit items that are in view.<br/>The clipper calculates the range of visible items and advance the cursor to compensate for the non-visible items we have skipped.<br/>(Dear ImGui already clip items based on their bounds but: it needs to first layout the item to do so, and generally.<br/>Fetching/submitting your own data incurs additional cost. Coarse clipping using ImGuiListClipper allows you to easily.<br/>Scale using lists with tens of thousands of items without a problem).<br/>Usage:.<br/>ImGuiListClipper clipper;.<br/>Clipper.Begin(1000);, // We have 1000 elements, evenly spaced.<br/>While (clipper.Step()).<br/>For (int i = clipper.DisplayStart; i &lt; clipper.DisplayEnd; i++).<br/>ImGui::Text("line number %d", i);.<br/>Generally what happens is:.<br/>- Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1) regardless of it being visible or not.<br/>- User code submit that one element.<br/>- Clipper can measure the height of the first element.<br/>- Clipper calculate the actual range of elements to display based on the current clipping rectangle, position the cursor before the first visible element.<br/>- User code submit visible elements.<br/>- The clipper also handles various subtleties related to keyboard/gamepad navigation, wrapping etc.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2524"/></summary>
        // DEBUG: ImGuiListClipper
        public ImGuiListClipper(ImGuiListClipper _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiListClipper.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((ImGuiListClipper.__Internal*)__Instance) = *((ImGuiListClipper.__Internal*)_0.__Instance);
        }

        /// <inheritdoc/>
        ~ImGuiListClipper()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                if (Environment.Is64BitProcess)
                {
                    __Internal64.dtor(__Instance);
                }
                else
                {
                    __Internal32.dtor(__Instance);
                }

            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2538"/></summary>
        // DEBUG: void  Begin(int items_count, float items_height = -1.0f)
        public void Begin(int items_count, float items_height = -1.0F)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Begin(__Instance, items_count, items_height);
            }
            else
            {
                __Internal32.Begin(__Instance, items_count, items_height);
            }
        }

        /// <summary>Automatically called on the last call of Step() that returns false.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2539"/></summary>
        // DEBUG: void  End()
        public void End()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.End(__Instance);
            }
            else
            {
                __Internal32.End(__Instance);
            }
        }

        /// <summary>Call IncludeItemByIndex() or IncludeItemsByIndex() *BEFORE* first call to Step() if you need a range of items to not be clipped, regardless of their visibility.<br/>(Due to alignment / padding of certain items it is possible that an extra item may be included on either end of the display range).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2544"/></summary>
        // DEBUG: inline void     IncludeItemByIndex(int item_index)                  { IncludeItemsByIndex(item_index, item_index + 1); }
        public void IncludeItemByIndex(int item_index)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.IncludeItemByIndex(__Instance, item_index);
            }
            else
            {
                __Internal32.IncludeItemByIndex(__Instance, item_index);
            }
        }

        /// <summary>Item_end is exclusive e.g. use (42, 42+1) to make item 42 never clipped.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2545"/></summary>
        // DEBUG: void  IncludeItemsByIndex(int item_begin, int item_end)
        public void IncludeItemsByIndex(int item_begin, int item_end)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.IncludeItemsByIndex(__Instance, item_begin, item_end);
            }
            else
            {
                __Internal32.IncludeItemsByIndex(__Instance, item_begin, item_end);
            }
        }

        /// <summary>First item to display, updated by each call to Step().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2527"/></summary>
        public int DisplayStart
        {
            get
            {
                return ((__Internal*)__Instance)->DisplayStart;
            }

            set
            {
                ((__Internal*)__Instance)->DisplayStart = value;
            }
        }

        /// <summary>End of items to display (exclusive).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2528"/></summary>
        public int DisplayEnd
        {
            get
            {
                return ((__Internal*)__Instance)->DisplayEnd;
            }

            set
            {
                ((__Internal*)__Instance)->DisplayEnd = value;
            }
        }

        /// <summary>[Internal] Number of items.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2529"/></summary>
        public int ItemsCount
        {
            get
            {
                return ((__Internal*)__Instance)->ItemsCount;
            }

            set
            {
                ((__Internal*)__Instance)->ItemsCount = value;
            }
        }

        /// <summary>[Internal] Height of item after a first step and item submission can calculate it.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2530"/></summary>
        public float ItemsHeight
        {
            get
            {
                return ((__Internal*)__Instance)->ItemsHeight;
            }

            set
            {
                ((__Internal*)__Instance)->ItemsHeight = value;
            }
        }

        /// <summary>[Internal] Cursor position at the time of Begin() or after table frozen rows are all processed.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2531"/></summary>
        public float StartPosY
        {
            get
            {
                return ((__Internal*)__Instance)->StartPosY;
            }

            set
            {
                ((__Internal*)__Instance)->StartPosY = value;
            }
        }

        /// <summary>[Internal] Internal data.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2532"/></summary>
        public IntPtr TempData
        {
            get
            {
                return ((__Internal*)__Instance)->TempData;
            }

            set
            {
                ((__Internal*)__Instance)->TempData = (IntPtr)value;
            }
        }

        /// <summary>Call until it returns false. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2540"/></summary>
        public bool Step
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.Step(__Instance) : __Internal32.Step(__Instance);
                return ___ret;
            }
        }
    }

    /// <summary>Typically, 1 command = 1 GPU draw call (unless command is a callback).<br/>- VtxOffset: When 'io.BackendFlags &amp; ImGuiBackendFlags_RendererHasVtxOffset' is enabled,.<br/>This fields allow us to render meshes larger than 64K vertices while keeping 16-bit indices.<br/>Backends made for &lt;1.71. will typically ignore the VtxOffset fields.<br/>- The ClipRect/TextureId/VtxOffset fields must be contiguous as we memcmp() them together (this is asserted for).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2655"/></summary>
    // DEBUG: struct ImDrawCmd
    // DEBUG: {
    // DEBUG:     ImVec4          ClipRect;           // 4*4  // Clipping rectangle (x1, y1, x2, y2). Subtract ImDrawData->DisplayPos to get clipping rectangle in "viewport" coordinates
    // DEBUG:     ImTextureID     TextureId;          // 4-8  // User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas.
    // DEBUG:     unsigned int    VtxOffset;          // 4    // Start offset in vertex buffer. ImGuiBackendFlags_RendererHasVtxOffset: always 0, otherwise may be >0 to support meshes larger than 64K vertices with 16-bit indices.
    // DEBUG:     unsigned int    IdxOffset;          // 4    // Start offset in index buffer.
    // DEBUG:     unsigned int    ElemCount;          // 4    // Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].
    // DEBUG:     ImDrawCallback  UserCallback;       // 4-8  // If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.
    // DEBUG:     void*           UserCallbackData;   // 4-8  // The draw callback code can access this.
    // DEBUG: 
    // DEBUG:     ImDrawCmd() { memset(this, 0, sizeof(*this)); } // Also ensure our padding fields are zeroed
    // DEBUG: 
    // DEBUG:     // Since 1.83: returns ImTextureID associated with this draw call. Warning: DO NOT assume this is always same as 'TextureId' (we will change this function for an upcoming feature)
    // DEBUG:     inline ImTextureID GetTexID() const { return TextureId; }
    // DEBUG: }
    public unsafe partial struct ImDrawCmd
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal Vector4 ClipRect;
            internal IntPtr TextureId;
            internal uint VtxOffset;
            internal uint IdxOffset;
            internal uint ElemCount;
            internal IntPtr UserCallback;
            internal IntPtr UserCallbackData;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawCmd@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawCmd@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawCmd@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawCmd@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        private ImDrawCmd.__Internal __instance;
        internal ImDrawCmd.__Internal __Instance => __instance;

        internal static ImDrawCmd __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            return new ImDrawCmd(native.ToPointer(), skipVTables);
        }

        internal static ImDrawCmd __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImDrawCmd(native, skipVTables);
        }

        private ImDrawCmd(__Internal native, bool skipVTables = false) : this()
        {
            __instance = native;
        }

        private ImDrawCmd(void* native, bool skipVTables = false) : this()
        {
            __instance = *(ImDrawCmd.__Internal*)native;
        }

        /// <summary>Typically, 1 command = 1 GPU draw call (unless command is a callback).<br/>- VtxOffset: When 'io.BackendFlags &amp; ImGuiBackendFlags_RendererHasVtxOffset' is enabled,.<br/>This fields allow us to render meshes larger than 64K vertices while keeping 16-bit indices.<br/>Backends made for &lt;1.71. will typically ignore the VtxOffset fields.<br/>- The ClipRect/TextureId/VtxOffset fields must be contiguous as we memcmp() them together (this is asserted for).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2655"/></summary>
        // DEBUG: ImDrawCmd
        public ImDrawCmd(ImDrawCmd _0) : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ctor(new IntPtr(__instancePtr), __arg0);
                }
                else
                {
                    __Internal32.ctor(new IntPtr(__instancePtr), __arg0);
                }
            }
        }

        /// <summary>4-8.<br/>User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2658"/></summary>
        public IntPtr TextureId
        {
            get
            {
                return __instance.TextureId;
            }

            set
            {
                __instance.TextureId = (IntPtr)value;
            }
        }

        /// <summary>4.<br/>Start offset in vertex buffer. ImGuiBackendFlags_RendererHasVtxOffset: always 0, otherwise may be &gt;0 to support meshes larger than 64K vertices with 16-bit indices.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2659"/></summary>
        public uint VtxOffset
        {
            get
            {
                return __instance.VtxOffset;
            }

            set
            {
                __instance.VtxOffset = value;
            }
        }

        /// <summary>4.<br/>Start offset in index buffer.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2660"/></summary>
        public uint IdxOffset
        {
            get
            {
                return __instance.IdxOffset;
            }

            set
            {
                __instance.IdxOffset = value;
            }
        }

        /// <summary>4.<br/>Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2661"/></summary>
        public uint ElemCount
        {
            get
            {
                return __instance.ElemCount;
            }

            set
            {
                __instance.ElemCount = value;
            }
        }

        /// <summary>4-8.<br/>If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2662"/></summary>
        public ImDrawCallback UserCallback
        {
            get
            {
                var __ptr0 = __instance.UserCallback;
                return __ptr0 == IntPtr.Zero ? null : (ImDrawCallback)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(ImDrawCallback));
            }

            set
            {
                __instance.UserCallback = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>4-8.<br/>The draw callback code can access this.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2663"/></summary>
        public IntPtr UserCallbackData
        {
            get
            {
                return __instance.UserCallbackData;
            }

            set
            {
                __instance.UserCallbackData = (IntPtr)value;
            }
        }
    }

    /// <summary>[Internal] For use by ImDrawList.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2688"/></summary>
    // DEBUG: struct ImDrawCmdHeader
    // DEBUG: {
    // DEBUG:     ImVec4          ClipRect;
    // DEBUG:     ImTextureID     TextureId;
    // DEBUG:     unsigned int    VtxOffset;
    // DEBUG: }
    public unsafe partial class ImDrawCmdHeader : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal Vector4 ClipRect;
            internal IntPtr TextureId;
            internal uint VtxOffset;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawCmdHeader@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawCmdHeader@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawCmdHeader@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawCmdHeader@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImDrawCmdHeader>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImDrawCmdHeader>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImDrawCmdHeader managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImDrawCmdHeader>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImDrawCmdHeader managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImDrawCmdHeader __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImDrawCmdHeader(native.ToPointer(), skipVTables);
        }

        internal static ImDrawCmdHeader __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImDrawCmdHeader)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImDrawCmdHeader __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImDrawCmdHeader(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImDrawCmdHeader(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImDrawCmdHeader(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary>[Internal] For use by ImDrawList.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2688"/></summary>
        // DEBUG: ImDrawCmdHeader
        public ImDrawCmdHeader(ImDrawCmdHeader _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImDrawCmdHeader.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <summary>[Internal] For use by ImDrawList.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2688"/></summary>
        // DEBUG: ImDrawCmdHeader
        public ImDrawCmdHeader()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImDrawCmdHeader.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <inheritdoc/>
        ~ImDrawCmdHeader()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2690"/></summary>
        public Vector4 ClipRect
        {
            get
            {
                return ((__Internal*)__Instance)->ClipRect
                /* DEBUG: TypeMapImVec4.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec4.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->ClipRect = value
                /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2691"/></summary>
        public IntPtr TextureId
        {
            get
            {
                return ((__Internal*)__Instance)->TextureId;
            }

            set
            {
                ((__Internal*)__Instance)->TextureId = (IntPtr)value;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2692"/></summary>
        public uint VtxOffset
        {
            get
            {
                return ((__Internal*)__Instance)->VtxOffset;
            }

            set
            {
                ((__Internal*)__Instance)->VtxOffset = value;
            }
        }
    }

    /// <summary>[Internal] For use by ImDrawListSplitter.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2696"/></summary>
    // DEBUG: struct ImDrawChannel
    // DEBUG: {
    // DEBUG:     ImVector<ImDrawCmd>         _CmdBuffer;
    // DEBUG:     ImVector<ImDrawIdx>         _IdxBuffer;
    // DEBUG: }
    public unsafe partial class ImDrawChannel : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal ImVector.__Internal _CmdBuffer;
            internal ImVector.__Internal _IdxBuffer;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawChannel@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawChannel@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImDrawChannel@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void dtor(IntPtr __instance);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawChannel@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawChannel@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImDrawChannel@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void dtor(IntPtr __instance);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImDrawChannel>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImDrawChannel>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImDrawChannel managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImDrawChannel>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImDrawChannel managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImDrawChannel __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImDrawChannel(native.ToPointer(), skipVTables);
        }

        internal static ImDrawChannel __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImDrawChannel)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImDrawChannel __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImDrawChannel(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImDrawChannel(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImDrawChannel(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary>[Internal] For use by ImDrawListSplitter.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2696"/></summary>
        // DEBUG: ImDrawChannel
        public ImDrawChannel(ImDrawChannel _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImDrawChannel.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <summary>[Internal] For use by ImDrawListSplitter.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2696"/></summary>
        // DEBUG: ImDrawChannel
        public ImDrawChannel()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImDrawChannel.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <inheritdoc/>
        ~ImDrawChannel()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                if (Environment.Is64BitProcess)
                {
                    __Internal64.dtor(__Instance);
                }
                else
                {
                    __Internal32.dtor(__Instance);
                }

            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2698"/></summary>
        public ImVector<ImDrawCmd> CmdBuffer
        {
            get
            {
                return new ImVector<ImDrawCmd>(Unsafe.As<ImVector.__Internal, ImVector<ImDrawCmd>.__Internal>(ref ((__Internal*)__Instance)->_CmdBuffer))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2699"/></summary>
        public ImVector<ushort> IdxBuffer
        {
            get
            {
                return new ImVector<ushort>(Unsafe.As<ImVector.__Internal, ImVector<ushort>.__Internal>(ref ((__Internal*)__Instance)->_IdxBuffer))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }
    }

    /// <summary>Split/Merge functions are used to split the draw list into different layers which can be drawn into out of order.<br/>This is used by the Columns/Tables API, so items of each column can be batched together in a same draw call.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2705"/></summary>
    // DEBUG: struct ImDrawListSplitter
    // DEBUG: {
    // DEBUG:     int                         _Current;    // Current channel number (0)
    // DEBUG:     int                         _Count;      // Number of active channels (1+)
    // DEBUG:     ImVector<ImDrawChannel>     _Channels;   // Draw channels (not resized down so _Count might be < Channels.Size)
    // DEBUG: 
    // DEBUG:     inline ImDrawListSplitter()  { memset(this, 0, sizeof(*this)); }
    // DEBUG:     inline ~ImDrawListSplitter() { ClearFreeMemory(); }
    // DEBUG:     inline void                 Clear() { _Current = 0; _Count = 1; } // Do not clear Channels[] so our allocations are reused next frame
    // DEBUG:     IMGUI_API void              ClearFreeMemory();
    // DEBUG:     IMGUI_API void              Split(ImDrawList* draw_list, int count);
    // DEBUG:     IMGUI_API void              Merge(ImDrawList* draw_list);
    // DEBUG:     IMGUI_API void              SetCurrentChannel(ImDrawList* draw_list, int channel_idx);
    // DEBUG: }
    public unsafe partial class ImDrawListSplitter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal int _Current;
            internal int _Count;
            internal ImVector.__Internal _Channels;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawListSplitter@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawListSplitter@@QAE@ABU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImDrawListSplitter@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Clear@ImDrawListSplitter@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearFreeMemory@ImDrawListSplitter@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void ClearFreeMemory(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Split@ImDrawListSplitter@@QAEXPAUImDrawList@@H@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void Split(IntPtr __instance, IntPtr draw_list, int count);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Merge@ImDrawListSplitter@@QAEXPAUImDrawList@@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void Merge(IntPtr __instance, IntPtr draw_list);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetCurrentChannel@ImDrawListSplitter@@QAEXPAUImDrawList@@H@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void SetCurrentChannel(IntPtr __instance, IntPtr draw_list, int channel_idx);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawListSplitter@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawListSplitter@@QEAA@AEBU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImDrawListSplitter@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Clear@ImDrawListSplitter@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ClearFreeMemory(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Split(IntPtr __instance, IntPtr draw_list, int count);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Merge(IntPtr __instance, IntPtr draw_list);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetCurrentChannel(IntPtr __instance, IntPtr draw_list, int channel_idx);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImDrawListSplitter>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImDrawListSplitter>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImDrawListSplitter managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImDrawListSplitter>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImDrawListSplitter managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImDrawListSplitter __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImDrawListSplitter(native.ToPointer(), skipVTables);
        }

        internal static ImDrawListSplitter __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImDrawListSplitter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImDrawListSplitter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImDrawListSplitter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            if (Environment.Is64BitProcess)
            {
                ImDrawListSplitter.__Internal64.cctor(ret, new IntPtr(&native));
            }
            else
            {
                ImDrawListSplitter.__Internal32.cctor(ret, new IntPtr(&native));
            }

            return ret.ToPointer();
        }

        private ImDrawListSplitter(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImDrawListSplitter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2711"/></summary>
        // DEBUG: inline ImDrawListSplitter()  { memset(this, 0, sizeof(*this)); }
        public ImDrawListSplitter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImDrawListSplitter.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>Split/Merge functions are used to split the draw list into different layers which can be drawn into out of order.<br/>This is used by the Columns/Tables API, so items of each column can be batched together in a same draw call.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2705"/></summary>
        // DEBUG: ImDrawListSplitter
        public ImDrawListSplitter(ImDrawListSplitter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImDrawListSplitter.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.cctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.cctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImDrawListSplitter()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                if (Environment.Is64BitProcess)
                {
                    __Internal64.dtor(__Instance);
                }
                else
                {
                    __Internal32.dtor(__Instance);
                }

            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Do not clear Channels[] so our allocations are reused next frame.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2713"/></summary>
        // DEBUG: inline void                 Clear() { _Current = 0; _Count = 1; }
        public void Clear()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Clear(__Instance);
            }
            else
            {
                __Internal32.Clear(__Instance);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2714"/></summary>
        // DEBUG: void              ClearFreeMemory()
        public void ClearFreeMemory()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.ClearFreeMemory(__Instance);
            }
            else
            {
                __Internal32.ClearFreeMemory(__Instance);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2715"/></summary>
        // DEBUG: void              Split(ImDrawList* draw_list, int count)
        public void Split(ImDrawList draw_list, int count)
        {
            var ____arg0 = draw_list.__Instance;
            var __arg0 = new IntPtr(&____arg0);
            if (Environment.Is64BitProcess)
            {
                __Internal64.Split(__Instance, __arg0, count);
            }
            else
            {
                __Internal32.Split(__Instance, __arg0, count);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2716"/></summary>
        // DEBUG: void              Merge(ImDrawList* draw_list)
        public void Merge(ImDrawList draw_list)
        {
            var ____arg0 = draw_list.__Instance;
            var __arg0 = new IntPtr(&____arg0);
            if (Environment.Is64BitProcess)
            {
                __Internal64.Merge(__Instance, __arg0);
            }
            else
            {
                __Internal32.Merge(__Instance, __arg0);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2717"/></summary>
        // DEBUG: void              SetCurrentChannel(ImDrawList* draw_list, int channel_idx)
        public void SetCurrentChannel(ImDrawList draw_list, int channel_idx)
        {
            var ____arg0 = draw_list.__Instance;
            var __arg0 = new IntPtr(&____arg0);
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetCurrentChannel(__Instance, __arg0, channel_idx);
            }
            else
            {
                __Internal32.SetCurrentChannel(__Instance, __arg0, channel_idx);
            }
        }

        /// <summary>Current channel number (0).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2707"/></summary>
        public int Current
        {
            get
            {
                return ((__Internal*)__Instance)->_Current;
            }

            set
            {
                ((__Internal*)__Instance)->_Current = value;
            }
        }

        /// <summary>Number of active channels (1+).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2708"/></summary>
        public int Count
        {
            get
            {
                return ((__Internal*)__Instance)->_Count;
            }

            set
            {
                ((__Internal*)__Instance)->_Count = value;
            }
        }

        /// <summary>Draw channels (not resized down so _Count might be &lt; Channels.Size).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2709"/></summary>
        public ImVector<ImDrawChannel> Channels
        {
            get
            {
                return new ImVector<ImDrawChannel>(Unsafe.As<ImVector.__Internal, ImVector<ImDrawChannel>.__Internal>(ref ((__Internal*)__Instance)->_Channels))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }
    }

    /// <summary>Draw command list.<br/>This is the low-level list of polygons that ImGui:: functions are filling. At the end of the frame,.<br/>All command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.<br/>Each dear imgui window contains its own ImDrawList. You can use ImGui::GetWindowDrawList() to.<br/>Access the current window draw list and draw custom primitives.<br/>You can interleave normal ImGui:: calls and adding primitives to the current draw list.<br/>In single viewport mode, top-left is == GetMainViewport()-&gt;Pos (generally 0,0), bottom-right is == GetMainViewport()-&gt;Pos+Size (generally io.DisplaySize).<br/>You are totally free to apply whatever transformation matrix to want to the data (depending on the use of the transformation you may want to apply it to ClipRect as well!).<br/>Important: Primitives are always added to the list and not culled (culling is done at higher-level by ImGui:: functions), if you use this API a lot consider coarse culling your drawn objects.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2760"/></summary>
    // DEBUG: struct ImDrawList
    // DEBUG: {
    // DEBUG:     // This is what you have to render
    // DEBUG:     ImVector<ImDrawCmd>     CmdBuffer;          // Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback.
    // DEBUG:     ImVector<ImDrawIdx>     IdxBuffer;          // Index buffer. Each command consume ImDrawCmd::ElemCount of those
    // DEBUG:     ImVector<ImDrawVert>    VtxBuffer;          // Vertex buffer.
    // DEBUG:     ImDrawListFlags         Flags;              // Flags, you may poke into these to adjust anti-aliasing settings per-primitive.
    // DEBUG: 
    // DEBUG:     // [Internal, used while building lists]
    // DEBUG:     unsigned int            _VtxCurrentIdx;     // [Internal] generally == VtxBuffer.Size unless we are past 64K vertices, in which case this gets reset to 0.
    // DEBUG:     ImDrawListSharedData*   _Data;              // Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)
    // DEBUG:     const char*             _OwnerName;         // Pointer to owner window's name for debugging
    // DEBUG:     ImDrawVert*             _VtxWritePtr;       // [Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)
    // DEBUG:     ImDrawIdx*              _IdxWritePtr;       // [Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)
    // DEBUG:     ImVector<ImVec4>        _ClipRectStack;     // [Internal]
    // DEBUG:     ImVector<ImTextureID>   _TextureIdStack;    // [Internal]
    // DEBUG:     ImVector<ImVec2>        _Path;              // [Internal] current path building
    // DEBUG:     ImDrawCmdHeader         _CmdHeader;         // [Internal] template of active commands. Fields should match those of CmdBuffer.back().
    // DEBUG:     ImDrawListSplitter      _Splitter;          // [Internal] for channels api (note: prefer using your own persistent instance of ImDrawListSplitter!)
    // DEBUG:     float                   _FringeScale;       // [Internal] anti-alias fringe is scaled by this value, this helps to keep things sharp while zooming at vertex buffer content
    // DEBUG: 
    // DEBUG:     // If you want to create ImDrawList instances, pass them ImGui::GetDrawListSharedData() or create and use your own ImDrawListSharedData (so you can use ImDrawList without ImGui)
    // DEBUG:     ImDrawList(ImDrawListSharedData* shared_data) { memset(this, 0, sizeof(*this)); _Data = shared_data; }
    // DEBUG: 
    // DEBUG:     ~ImDrawList() { _ClearFreeMemory(); }
    // DEBUG:     IMGUI_API void  PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect = false);  // Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)
    // DEBUG:     IMGUI_API void  PushClipRectFullScreen();
    // DEBUG:     IMGUI_API void  PopClipRect();
    // DEBUG:     IMGUI_API void  PushTextureID(ImTextureID texture_id);
    // DEBUG:     IMGUI_API void  PopTextureID();
    // DEBUG:     inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.x, cr.y); }
    // DEBUG:     inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.z, cr.w); }
    // DEBUG: 
    // DEBUG:     // Primitives
    // DEBUG:     // - Filled shapes must always use clockwise winding order. The anti-aliasing fringe depends on it. Counter-clockwise shapes will have "inward" anti-aliasing.
    // DEBUG:     // - For rectangular primitives, "p_min" and "p_max" represent the upper-left and lower-right corners.
    // DEBUG:     // - For circle primitives, use "num_segments == 0" to automatically calculate tessellation (preferred).
    // DEBUG:     //   In older versions (until Dear ImGui 1.77) the AddCircle functions defaulted to num_segments == 12.
    // DEBUG:     //   In future versions we will use textures to provide cheaper and higher-quality circles.
    // DEBUG:     //   Use AddNgon() and AddNgonFilled() functions if you need to guarantee a specific number of sides.
    // DEBUG:     IMGUI_API void  AddLine(const ImVec2& p1, const ImVec2& p2, ImU32 col, float thickness = 1.0f);
    // DEBUG:     IMGUI_API void  AddRect(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding = 0.0f, ImDrawFlags flags = 0, float thickness = 1.0f);   // a: upper-left, b: lower-right (== upper-left + size)
    // DEBUG:     IMGUI_API void  AddRectFilled(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding = 0.0f, ImDrawFlags flags = 0);                     // a: upper-left, b: lower-right (== upper-left + size)
    // DEBUG:     IMGUI_API void  AddRectFilledMultiColor(const ImVec2& p_min, const ImVec2& p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left);
    // DEBUG:     IMGUI_API void  AddQuad(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness = 1.0f);
    // DEBUG:     IMGUI_API void  AddQuadFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col);
    // DEBUG:     IMGUI_API void  AddTriangle(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, float thickness = 1.0f);
    // DEBUG:     IMGUI_API void  AddTriangleFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col);
    // DEBUG:     IMGUI_API void  AddCircle(const ImVec2& center, float radius, ImU32 col, int num_segments = 0, float thickness = 1.0f);
    // DEBUG:     IMGUI_API void  AddCircleFilled(const ImVec2& center, float radius, ImU32 col, int num_segments = 0);
    // DEBUG:     IMGUI_API void  AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float thickness = 1.0f);
    // DEBUG:     IMGUI_API void  AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments);
    // DEBUG:     IMGUI_API void  AddEllipse(const ImVec2& center, float radius_x, float radius_y, ImU32 col, float rot = 0.0f, int num_segments = 0, float thickness = 1.0f);
    // DEBUG:     IMGUI_API void  AddEllipseFilled(const ImVec2& center, float radius_x, float radius_y, ImU32 col, float rot = 0.0f, int num_segments = 0);
    // DEBUG:     IMGUI_API void  AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end = NULL);
    // DEBUG:     IMGUI_API void  AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end = NULL, float wrap_width = 0.0f, const ImVec4* cpu_fine_clip_rect = NULL);
    // DEBUG:     IMGUI_API void  AddPolyline(const ImVec2* points, int num_points, ImU32 col, ImDrawFlags flags, float thickness);
    // DEBUG:     IMGUI_API void  AddConvexPolyFilled(const ImVec2* points, int num_points, ImU32 col);
    // DEBUG:     IMGUI_API void  AddBezierCubic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness, int num_segments = 0); // Cubic Bezier (4 control points)
    // DEBUG:     IMGUI_API void  AddBezierQuadratic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, float thickness, int num_segments = 0);               // Quadratic Bezier (3 control points)
    // DEBUG: 
    // DEBUG:     // Image primitives
    // DEBUG:     // - Read FAQ to understand what ImTextureID is.
    // DEBUG:     // - "p_min" and "p_max" represent the upper-left and lower-right corners of the rectangle.
    // DEBUG:     // - "uv_min" and "uv_max" represent the normalized texture coordinates to use for those corners. Using (0,0)->(1,1) texture coordinates will generally display the entire texture.
    // DEBUG:     IMGUI_API void  AddImage(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min = ImVec2(0, 0), const ImVec2& uv_max = ImVec2(1, 1), ImU32 col = IM_COL32_WHITE);
    // DEBUG:     IMGUI_API void  AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, const ImVec2& uv1 = ImVec2(0, 0), const ImVec2& uv2 = ImVec2(1, 0), const ImVec2& uv3 = ImVec2(1, 1), const ImVec2& uv4 = ImVec2(0, 1), ImU32 col = IM_COL32_WHITE);
    // DEBUG:     IMGUI_API void  AddImageRounded(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min, const ImVec2& uv_max, ImU32 col, float rounding, ImDrawFlags flags = 0);
    // DEBUG: 
    // DEBUG:     // Stateful path API, add points then finish with PathFillConvex() or PathStroke()
    // DEBUG:     // - Filled shapes must always use clockwise winding order. The anti-aliasing fringe depends on it. Counter-clockwise shapes will have "inward" anti-aliasing.
    // DEBUG:     inline    void  PathClear()                                                 { _Path.Size = 0; }
    // DEBUG:     inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_back(pos); }
    // DEBUG:     inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size == 0 || memcmp(&_Path.Data[_Path.Size - 1], &pos, 8) != 0) _Path.push_back(pos); }
    // DEBUG:     inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyFilled(_Path.Data, _Path.Size, col); _Path.Size = 0; }
    // DEBUG:     inline    void  PathStroke(ImU32 col, ImDrawFlags flags = 0, float thickness = 1.0f) { AddPolyline(_Path.Data, _Path.Size, col, flags, thickness); _Path.Size = 0; }
    // DEBUG:     IMGUI_API void  PathArcTo(const ImVec2& center, float radius, float a_min, float a_max, int num_segments = 0);
    // DEBUG:     IMGUI_API void  PathArcToFast(const ImVec2& center, float radius, int a_min_of_12, int a_max_of_12);                // Use precomputed angles for a 12 steps circle
    // DEBUG:     IMGUI_API void  PathEllipticalArcTo(const ImVec2& center, float radius_x, float radius_y, float rot, float a_min, float a_max, int num_segments = 0); // Ellipse
    // DEBUG:     IMGUI_API void  PathBezierCubicCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num_segments = 0); // Cubic Bezier (4 control points)
    // DEBUG:     IMGUI_API void  PathBezierQuadraticCurveTo(const ImVec2& p2, const ImVec2& p3, int num_segments = 0);               // Quadratic Bezier (3 control points)
    // DEBUG:     IMGUI_API void  PathRect(const ImVec2& rect_min, const ImVec2& rect_max, float rounding = 0.0f, ImDrawFlags flags = 0);
    // DEBUG: 
    // DEBUG:     // Advanced
    // DEBUG:     IMGUI_API void  AddCallback(ImDrawCallback callback, void* callback_data);  // Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.
    // DEBUG:     IMGUI_API void  AddDrawCmd();                                               // This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible
    // DEBUG:     IMGUI_API ImDrawList* CloneOutput() const;                                  // Create a clone of the CmdBuffer/IdxBuffer/VtxBuffer.
    // DEBUG: 
    // DEBUG:     // Advanced: Channels
    // DEBUG:     // - Use to split render into layers. By switching channels to can render out-of-order (e.g. submit FG primitives before BG primitives)
    // DEBUG:     // - Use to minimize draw calls (e.g. if going back-and-forth between multiple clipping rectangles, prefer to append into separate channels then merge at the end)
    // DEBUG:     // - This API shouldn't have been in ImDrawList in the first place!
    // DEBUG:     //   Prefer using your own persistent instance of ImDrawListSplitter as you can stack them.
    // DEBUG:     //   Using the ImDrawList::ChannelsXXXX you cannot stack a split over another.
    // DEBUG:     inline void     ChannelsSplit(int count)    { _Splitter.Split(this, count); }
    // DEBUG:     inline void     ChannelsMerge()             { _Splitter.Merge(this); }
    // DEBUG:     inline void     ChannelsSetCurrent(int n)   { _Splitter.SetCurrentChannel(this, n); }
    // DEBUG: 
    // DEBUG:     // Advanced: Primitives allocations
    // DEBUG:     // - We render triangles (three vertices)
    // DEBUG:     // - All primitives needs to be reserved via PrimReserve() beforehand.
    // DEBUG:     IMGUI_API void  PrimReserve(int idx_count, int vtx_count);
    // DEBUG:     IMGUI_API void  PrimUnreserve(int idx_count, int vtx_count);
    // DEBUG:     IMGUI_API void  PrimRect(const ImVec2& a, const ImVec2& b, ImU32 col);      // Axis aligned rectangle (composed of two triangles)
    // DEBUG:     IMGUI_API void  PrimRectUV(const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col);
    // DEBUG:     IMGUI_API void  PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col);
    // DEBUG:     inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)    { _VtxWritePtr->pos = pos; _VtxWritePtr->uv = uv; _VtxWritePtr->col = col; _VtxWritePtr++; _VtxCurrentIdx++; }
    // DEBUG:     inline    void  PrimWriteIdx(ImDrawIdx idx)                                     { *_IdxWritePtr = idx; _IdxWritePtr++; }
    // DEBUG:     inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)         { PrimWriteIdx((ImDrawIdx)_VtxCurrentIdx); PrimWriteVtx(pos, uv, col); } // Write vertex with unique index
    // DEBUG: 
    // DEBUG:     // Obsolete names
    // DEBUG:     //inline  void  AddBezierCurve(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness, int num_segments = 0) { AddBezierCubic(p1, p2, p3, p4, col, thickness, num_segments); } // OBSOLETED in 1.80 (Jan 2021)
    // DEBUG:     //inline  void  PathBezierCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num_segments = 0) { PathBezierCubicCurveTo(p2, p3, p4, num_segments); } // OBSOLETED in 1.80 (Jan 2021)
    // DEBUG: 
    // DEBUG:     // [Internal helpers]
    // DEBUG:     IMGUI_API void  _ResetForNewFrame();
    // DEBUG:     IMGUI_API void  _ClearFreeMemory();
    // DEBUG:     IMGUI_API void  _PopUnusedDrawCmd();
    // DEBUG:     IMGUI_API void  _TryMergeDrawCmds();
    // DEBUG:     IMGUI_API void  _OnChangedClipRect();
    // DEBUG:     IMGUI_API void  _OnChangedTextureID();
    // DEBUG:     IMGUI_API void  _OnChangedVtxOffset();
    // DEBUG:     IMGUI_API int   _CalcCircleAutoSegmentCount(float radius) const;
    // DEBUG:     IMGUI_API void  _PathArcToFastEx(const ImVec2& center, float radius, int a_min_sample, int a_max_sample, int a_step);
    // DEBUG:     IMGUI_API void  _PathArcToN(const ImVec2& center, float radius, float a_min, float a_max, int num_segments);
    // DEBUG: }
    public unsafe partial struct ImDrawList
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal ImVector.__Internal CmdBuffer;
            internal ImVector.__Internal IdxBuffer;
            internal ImVector.__Internal VtxBuffer;
            internal ImDrawListFlags Flags;
            internal uint _VtxCurrentIdx;
            internal IntPtr _Data;
            internal IntPtr _OwnerName;
            internal IntPtr _VtxWritePtr;
            internal IntPtr _IdxWritePtr;
            internal ImVector.__Internal _ClipRectStack;
            internal ImVector.__Internal _TextureIdStack;
            internal ImVector.__Internal _Path;
            internal ImDrawCmdHeader.__Internal _CmdHeader;
            internal ImDrawListSplitter.__Internal _Splitter;
            internal float _FringeScale;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawList@@QAE@PAUImDrawListSharedData@@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr shared_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawList@@QAE@ABU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr cctor_1(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImDrawList@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushClipRect@ImDrawList@@QAEXABUImVec2@@0_N@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PushClipRect(IntPtr __instance, IntPtr clip_rect_min, IntPtr clip_rect_max, bool intersect_with_current_clip_rect);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushClipRectFullScreen@ImDrawList@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PushClipRectFullScreen(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopClipRect@ImDrawList@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PopClipRect(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushTextureID@ImDrawList@@QAEXPAX@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PushTextureID(IntPtr __instance, IntPtr texture_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopTextureID@ImDrawList@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PopTextureID(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddLine@ImDrawList@@QAEXABUImVec2@@0IM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddLine(IntPtr __instance, IntPtr p1, IntPtr p2, uint col, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddRect@ImDrawList@@QAEXABUImVec2@@0IMHM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddRect(IntPtr __instance, IntPtr p_min, IntPtr p_max, uint col, float rounding, ImDrawFlags flags, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddRectFilled@ImDrawList@@QAEXABUImVec2@@0IMH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddRectFilled(IntPtr __instance, IntPtr p_min, IntPtr p_max, uint col, float rounding, ImDrawFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddRectFilledMultiColor@ImDrawList@@QAEXABUImVec2@@0IIII@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddRectFilledMultiColor(IntPtr __instance, IntPtr p_min, IntPtr p_max, uint col_upr_left, uint col_upr_right, uint col_bot_right, uint col_bot_left);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddQuad@ImDrawList@@QAEXABUImVec2@@000IM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddQuad(IntPtr __instance, IntPtr p1, IntPtr p2, IntPtr p3, IntPtr p4, uint col, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddQuadFilled@ImDrawList@@QAEXABUImVec2@@000I@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddQuadFilled(IntPtr __instance, IntPtr p1, IntPtr p2, IntPtr p3, IntPtr p4, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddTriangle@ImDrawList@@QAEXABUImVec2@@00IM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddTriangle(IntPtr __instance, IntPtr p1, IntPtr p2, IntPtr p3, uint col, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddTriangleFilled@ImDrawList@@QAEXABUImVec2@@00I@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddTriangleFilled(IntPtr __instance, IntPtr p1, IntPtr p2, IntPtr p3, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddCircle@ImDrawList@@QAEXABUImVec2@@MIHM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddCircle(IntPtr __instance, IntPtr center, float radius, uint col, int num_segments, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddCircleFilled@ImDrawList@@QAEXABUImVec2@@MIH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddCircleFilled(IntPtr __instance, IntPtr center, float radius, uint col, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddNgon@ImDrawList@@QAEXABUImVec2@@MIHM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddNgon(IntPtr __instance, IntPtr center, float radius, uint col, int num_segments, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddNgonFilled@ImDrawList@@QAEXABUImVec2@@MIH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddNgonFilled(IntPtr __instance, IntPtr center, float radius, uint col, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddEllipse@ImDrawList@@QAEXABUImVec2@@MMIMHM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddEllipse(IntPtr __instance, IntPtr center, float radius_x, float radius_y, uint col, float rot, int num_segments, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddEllipseFilled@ImDrawList@@QAEXABUImVec2@@MMIMH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddEllipseFilled(IntPtr __instance, IntPtr center, float radius_x, float radius_y, uint col, float rot, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddText@ImDrawList@@QAEXABUImVec2@@IPBD1@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddText(IntPtr __instance, IntPtr pos, uint col, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_begin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddText@ImDrawList@@QAEXPBUImFont@@MABUImVec2@@IPBD2MPBUImVec4@@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddText(IntPtr __instance, IntPtr font, float font_size, IntPtr pos, uint col, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_begin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end, float wrap_width, IntPtr cpu_fine_clip_rect);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddPolyline@ImDrawList@@QAEXPBUImVec2@@HIHM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddPolyline(IntPtr __instance, IntPtr points, int num_points, uint col, ImDrawFlags flags, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddConvexPolyFilled@ImDrawList@@QAEXPBUImVec2@@HI@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddConvexPolyFilled(IntPtr __instance, IntPtr points, int num_points, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddBezierCubic@ImDrawList@@QAEXABUImVec2@@000IMH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddBezierCubic(IntPtr __instance, IntPtr p1, IntPtr p2, IntPtr p3, IntPtr p4, uint col, float thickness, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddBezierQuadratic@ImDrawList@@QAEXABUImVec2@@00IMH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddBezierQuadratic(IntPtr __instance, IntPtr p1, IntPtr p2, IntPtr p3, uint col, float thickness, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddImage@ImDrawList@@QAEXPAXABUImVec2@@111I@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddImage(IntPtr __instance, IntPtr user_texture_id, IntPtr p_min, IntPtr p_max, IntPtr uv_min, IntPtr uv_max, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddImageQuad@ImDrawList@@QAEXPAXABUImVec2@@1111111I@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddImageQuad(IntPtr __instance, IntPtr user_texture_id, IntPtr p1, IntPtr p2, IntPtr p3, IntPtr p4, IntPtr uv1, IntPtr uv2, IntPtr uv3, IntPtr uv4, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddImageRounded@ImDrawList@@QAEXPAXABUImVec2@@111IMH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddImageRounded(IntPtr __instance, IntPtr user_texture_id, IntPtr p_min, IntPtr p_max, IntPtr uv_min, IntPtr uv_max, uint col, float rounding, ImDrawFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathClear@ImDrawList@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PathClear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathLineTo@ImDrawList@@QAEXABUImVec2@@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PathLineTo(IntPtr __instance, IntPtr pos);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathLineToMergeDuplicate@ImDrawList@@QAEXABUImVec2@@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PathLineToMergeDuplicate(IntPtr __instance, IntPtr pos);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathFillConvex@ImDrawList@@QAEXI@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PathFillConvex(IntPtr __instance, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathStroke@ImDrawList@@QAEXIHM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PathStroke(IntPtr __instance, uint col, ImDrawFlags flags, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathArcTo@ImDrawList@@QAEXABUImVec2@@MMMH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PathArcTo(IntPtr __instance, IntPtr center, float radius, float a_min, float a_max, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathArcToFast@ImDrawList@@QAEXABUImVec2@@MHH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PathArcToFast(IntPtr __instance, IntPtr center, float radius, int a_min_of_12, int a_max_of_12);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathEllipticalArcTo@ImDrawList@@QAEXABUImVec2@@MMMMMH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PathEllipticalArcTo(IntPtr __instance, IntPtr center, float radius_x, float radius_y, float rot, float a_min, float a_max, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathBezierCubicCurveTo@ImDrawList@@QAEXABUImVec2@@00H@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PathBezierCubicCurveTo(IntPtr __instance, IntPtr p2, IntPtr p3, IntPtr p4, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathBezierQuadraticCurveTo@ImDrawList@@QAEXABUImVec2@@0H@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PathBezierQuadraticCurveTo(IntPtr __instance, IntPtr p2, IntPtr p3, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathRect@ImDrawList@@QAEXABUImVec2@@0MH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PathRect(IntPtr __instance, IntPtr rect_min, IntPtr rect_max, float rounding, ImDrawFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddCallback@ImDrawList@@QAEXP6AXPBU1@PBUImDrawCmd@@@ZPAX@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddCallback(IntPtr __instance, IntPtr callback, IntPtr callback_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddDrawCmd@ImDrawList@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddDrawCmd(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CloneOutput@ImDrawList@@QBEPAU1@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr CloneOutput(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ChannelsSplit@ImDrawList@@QAEXH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void ChannelsSplit(IntPtr __instance, int count);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ChannelsMerge@ImDrawList@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void ChannelsMerge(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ChannelsSetCurrent@ImDrawList@@QAEXH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void ChannelsSetCurrent(IntPtr __instance, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimReserve@ImDrawList@@QAEXHH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PrimReserve(IntPtr __instance, int idx_count, int vtx_count);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimUnreserve@ImDrawList@@QAEXHH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PrimUnreserve(IntPtr __instance, int idx_count, int vtx_count);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimRect@ImDrawList@@QAEXABUImVec2@@0I@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PrimRect(IntPtr __instance, IntPtr a, IntPtr b, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimRectUV@ImDrawList@@QAEXABUImVec2@@000I@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PrimRectUV(IntPtr __instance, IntPtr a, IntPtr b, IntPtr uv_a, IntPtr uv_b, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimQuadUV@ImDrawList@@QAEXABUImVec2@@0000000I@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PrimQuadUV(IntPtr __instance, IntPtr a, IntPtr b, IntPtr c, IntPtr d, IntPtr uv_a, IntPtr uv_b, IntPtr uv_c, IntPtr uv_d, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimWriteVtx@ImDrawList@@QAEXABUImVec2@@0I@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PrimWriteVtx(IntPtr __instance, IntPtr pos, IntPtr uv, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimWriteIdx@ImDrawList@@QAEXG@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PrimWriteIdx(IntPtr __instance, ushort idx);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimVtx@ImDrawList@@QAEXABUImVec2@@0I@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PrimVtx(IntPtr __instance, IntPtr pos, IntPtr uv, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_ResetForNewFrame@ImDrawList@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void ResetForNewFrame(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_ClearFreeMemory@ImDrawList@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void ClearFreeMemory(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_PopUnusedDrawCmd@ImDrawList@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PopUnusedDrawCmd(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_TryMergeDrawCmds@ImDrawList@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void TryMergeDrawCmds(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_OnChangedClipRect@ImDrawList@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void OnChangedClipRect(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_OnChangedTextureID@ImDrawList@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void OnChangedTextureID(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_OnChangedVtxOffset@ImDrawList@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void OnChangedVtxOffset(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_CalcCircleAutoSegmentCount@ImDrawList@@QBEHM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern int CalcCircleAutoSegmentCount(IntPtr __instance, float radius);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_PathArcToFastEx@ImDrawList@@QAEXABUImVec2@@MHHH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PathArcToFastEx(IntPtr __instance, IntPtr center, float radius, int a_min_sample, int a_max_sample, int a_step);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_PathArcToN@ImDrawList@@QAEXABUImVec2@@MMMH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void PathArcToN(IntPtr __instance, IntPtr center, float radius, float a_min, float a_max, int num_segments);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr shared_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawList@@QEAA@AEBU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr cctor_1(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImDrawList@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushClipRect(IntPtr __instance, IntPtr clip_rect_min, IntPtr clip_rect_max, bool intersect_with_current_clip_rect);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushClipRectFullScreen@ImDrawList@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushClipRectFullScreen(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopClipRect@ImDrawList@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopClipRect(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushTextureID@ImDrawList@@QEAAXPEAX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushTextureID(IntPtr __instance, IntPtr texture_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopTextureID@ImDrawList@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopTextureID(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddLine(IntPtr __instance, IntPtr p1, IntPtr p2, uint col, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddRect(IntPtr __instance, IntPtr p_min, IntPtr p_max, uint col, float rounding, ImDrawFlags flags, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddRectFilled(IntPtr __instance, IntPtr p_min, IntPtr p_max, uint col, float rounding, ImDrawFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddRectFilledMultiColor(IntPtr __instance, IntPtr p_min, IntPtr p_max, uint col_upr_left, uint col_upr_right, uint col_bot_right, uint col_bot_left);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddQuad(IntPtr __instance, IntPtr p1, IntPtr p2, IntPtr p3, IntPtr p4, uint col, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddQuadFilled(IntPtr __instance, IntPtr p1, IntPtr p2, IntPtr p3, IntPtr p4, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddTriangle(IntPtr __instance, IntPtr p1, IntPtr p2, IntPtr p3, uint col, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddTriangleFilled(IntPtr __instance, IntPtr p1, IntPtr p2, IntPtr p3, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddCircle(IntPtr __instance, IntPtr center, float radius, uint col, int num_segments, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddCircleFilled(IntPtr __instance, IntPtr center, float radius, uint col, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddNgon(IntPtr __instance, IntPtr center, float radius, uint col, int num_segments, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddNgonFilled(IntPtr __instance, IntPtr center, float radius, uint col, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddEllipse@ImDrawList@@QEAAXAEBUImVec2@@MMIMHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddEllipse(IntPtr __instance, IntPtr center, float radius_x, float radius_y, uint col, float rot, int num_segments, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddEllipseFilled@ImDrawList@@QEAAXAEBUImVec2@@MMIMH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddEllipseFilled(IntPtr __instance, IntPtr center, float radius_x, float radius_y, uint col, float rot, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddText(IntPtr __instance, IntPtr pos, uint col, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_begin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddText(IntPtr __instance, IntPtr font, float font_size, IntPtr pos, uint col, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_begin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end, float wrap_width, IntPtr cpu_fine_clip_rect);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddPolyline(IntPtr __instance, IntPtr points, int num_points, uint col, ImDrawFlags flags, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddConvexPolyFilled(IntPtr __instance, IntPtr points, int num_points, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddBezierCubic(IntPtr __instance, IntPtr p1, IntPtr p2, IntPtr p3, IntPtr p4, uint col, float thickness, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddBezierQuadratic(IntPtr __instance, IntPtr p1, IntPtr p2, IntPtr p3, uint col, float thickness, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddImage(IntPtr __instance, IntPtr user_texture_id, IntPtr p_min, IntPtr p_max, IntPtr uv_min, IntPtr uv_max, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddImageQuad(IntPtr __instance, IntPtr user_texture_id, IntPtr p1, IntPtr p2, IntPtr p3, IntPtr p4, IntPtr uv1, IntPtr uv2, IntPtr uv3, IntPtr uv4, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddImageRounded(IntPtr __instance, IntPtr user_texture_id, IntPtr p_min, IntPtr p_max, IntPtr uv_min, IntPtr uv_max, uint col, float rounding, ImDrawFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathClear@ImDrawList@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PathClear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PathLineTo(IntPtr __instance, IntPtr pos);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathLineToMergeDuplicate@ImDrawList@@QEAAXAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PathLineToMergeDuplicate(IntPtr __instance, IntPtr pos);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathFillConvex@ImDrawList@@QEAAXI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PathFillConvex(IntPtr __instance, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathStroke@ImDrawList@@QEAAXIHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PathStroke(IntPtr __instance, uint col, ImDrawFlags flags, float thickness);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PathArcTo(IntPtr __instance, IntPtr center, float radius, float a_min, float a_max, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PathArcToFast(IntPtr __instance, IntPtr center, float radius, int a_min_of_12, int a_max_of_12);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathEllipticalArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMMMH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PathEllipticalArcTo(IntPtr __instance, IntPtr center, float radius_x, float radius_y, float rot, float a_min, float a_max, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PathBezierCubicCurveTo(IntPtr __instance, IntPtr p2, IntPtr p3, IntPtr p4, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PathBezierQuadraticCurveTo(IntPtr __instance, IntPtr p2, IntPtr p3, int num_segments);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PathRect(IntPtr __instance, IntPtr rect_min, IntPtr rect_max, float rounding, ImDrawFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddCallback(IntPtr __instance, IntPtr callback, IntPtr callback_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddDrawCmd@ImDrawList@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddDrawCmd(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CloneOutput@ImDrawList@@QEBAPEAU1@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr CloneOutput(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ChannelsSplit@ImDrawList@@QEAAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ChannelsSplit(IntPtr __instance, int count);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ChannelsMerge@ImDrawList@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ChannelsMerge(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ChannelsSetCurrent@ImDrawList@@QEAAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ChannelsSetCurrent(IntPtr __instance, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimReserve@ImDrawList@@QEAAXHH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PrimReserve(IntPtr __instance, int idx_count, int vtx_count);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimUnreserve@ImDrawList@@QEAAXHH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PrimUnreserve(IntPtr __instance, int idx_count, int vtx_count);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PrimRect(IntPtr __instance, IntPtr a, IntPtr b, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PrimRectUV(IntPtr __instance, IntPtr a, IntPtr b, IntPtr uv_a, IntPtr uv_b, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PrimQuadUV(IntPtr __instance, IntPtr a, IntPtr b, IntPtr c, IntPtr d, IntPtr uv_a, IntPtr uv_b, IntPtr uv_c, IntPtr uv_d, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PrimWriteVtx(IntPtr __instance, IntPtr pos, IntPtr uv, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimWriteIdx@ImDrawList@@QEAAXG@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PrimWriteIdx(IntPtr __instance, ushort idx);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PrimVtx(IntPtr __instance, IntPtr pos, IntPtr uv, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_ResetForNewFrame@ImDrawList@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ResetForNewFrame(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_ClearFreeMemory@ImDrawList@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ClearFreeMemory(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopUnusedDrawCmd(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TryMergeDrawCmds(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_OnChangedClipRect@ImDrawList@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void OnChangedClipRect(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_OnChangedTextureID@ImDrawList@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void OnChangedTextureID(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void OnChangedVtxOffset(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int CalcCircleAutoSegmentCount(IntPtr __instance, float radius);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PathArcToFastEx(IntPtr __instance, IntPtr center, float radius, int a_min_sample, int a_max_sample, int a_step);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PathArcToN(IntPtr __instance, IntPtr center, float radius, float a_min, float a_max, int num_segments);

        }

        private ImDrawList.__Internal __instance;
        internal ImDrawList.__Internal __Instance => __instance;

        private bool ___OwnerName_OwnsNativeMemory = false;
        internal static ImDrawList __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            return new ImDrawList(native.ToPointer(), skipVTables);
        }

        internal static ImDrawList __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImDrawList(native, skipVTables);
        }

        private ImDrawList(__Internal native, bool skipVTables = false) : this()
        {
            __instance = native;
        }

        private ImDrawList(void* native, bool skipVTables = false) : this()
        {
            __instance = *(ImDrawList.__Internal*)native;
        }

        /// <summary>If you want to create ImDrawList instances, pass them ImGui::GetDrawListSharedData() or create and use your own ImDrawListSharedData (so you can use ImDrawList without ImGui).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2782"/></summary>
        // DEBUG: ImDrawList(ImDrawListSharedData* shared_data) { memset(this, 0, sizeof(*this)); _Data = shared_data; }
        public ImDrawList(ImDrawListSharedData shared_data) : this()
        {
            var __arg0 = shared_data is null ? IntPtr.Zero : shared_data.__Instance;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ctor(new IntPtr(__instancePtr), __arg0);
                }
                else
                {
                    __Internal32.ctor(new IntPtr(__instancePtr), __arg0);
                }
            }
        }

        /// <summary>Draw command list.<br/>This is the low-level list of polygons that ImGui:: functions are filling. At the end of the frame,.<br/>All command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.<br/>Each dear imgui window contains its own ImDrawList. You can use ImGui::GetWindowDrawList() to.<br/>Access the current window draw list and draw custom primitives.<br/>You can interleave normal ImGui:: calls and adding primitives to the current draw list.<br/>In single viewport mode, top-left is == GetMainViewport()-&gt;Pos (generally 0,0), bottom-right is == GetMainViewport()-&gt;Pos+Size (generally io.DisplaySize).<br/>You are totally free to apply whatever transformation matrix to want to the data (depending on the use of the transformation you may want to apply it to ClipRect as well!).<br/>Important: Primitives are always added to the list and not culled (culling is done at higher-level by ImGui:: functions), if you use this API a lot consider coarse culling your drawn objects.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2760"/></summary>
        // DEBUG: ImDrawList
        public ImDrawList(ImDrawList _0) : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.cctor_1(new IntPtr(__instancePtr), __arg0);
                }
                else
                {
                    __Internal32.cctor_1(new IntPtr(__instancePtr), __arg0);
                }
            }
        }

        /// <summary>Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2785"/></summary>
        // DEBUG: void  PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect = false)
        public void PushClipRect(Vector2 clip_rect_min, Vector2 clip_rect_max, bool intersect_with_current_clip_rect = false)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref clip_rect_min))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref clip_rect_max))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PushClipRect(new IntPtr(__instancePtr), __arg0, __arg1, intersect_with_current_clip_rect);
                }
                else
                {
                    __Internal32.PushClipRect(new IntPtr(__instancePtr), __arg0, __arg1, intersect_with_current_clip_rect);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2786"/></summary>
        // DEBUG: void  PushClipRectFullScreen()
        public void PushClipRectFullScreen()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PushClipRectFullScreen(new IntPtr(__instancePtr));
                }
                else
                {
                    __Internal32.PushClipRectFullScreen(new IntPtr(__instancePtr));
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2787"/></summary>
        // DEBUG: void  PopClipRect()
        public void PopClipRect()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PopClipRect(new IntPtr(__instancePtr));
                }
                else
                {
                    __Internal32.PopClipRect(new IntPtr(__instancePtr));
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2788"/></summary>
        // DEBUG: void  PushTextureID(ImTextureID texture_id)
        public void PushTextureID(IntPtr texture_id)
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PushTextureID(new IntPtr(__instancePtr), texture_id);
                }
                else
                {
                    __Internal32.PushTextureID(new IntPtr(__instancePtr), texture_id);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2789"/></summary>
        // DEBUG: void  PopTextureID()
        public void PopTextureID()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PopTextureID(new IntPtr(__instancePtr));
                }
                else
                {
                    __Internal32.PopTextureID(new IntPtr(__instancePtr));
                }
            }
        }

        /// <summary>Primitives.<br/>- Filled shapes must always use clockwise winding order. The anti-aliasing fringe depends on it. Counter-clockwise shapes will have "inward" anti-aliasing.<br/>- For rectangular primitives, "p_min" and "p_max" represent the upper-left and lower-right corners.<br/>- For circle primitives, use "num_segments == 0" to automatically calculate tessellation (preferred).<br/>In older versions (until Dear ImGui 1.77) the AddCircle functions defaulted to num_segments == 12.<br/>In future versions we will use textures to provide cheaper and higher-quality circles.<br/>Use AddNgon() and AddNgonFilled() functions if you need to guarantee a specific number of sides.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2800"/></summary>
        // DEBUG: void  AddLine(const ImVec2& p1, const ImVec2& p2, ImU32 col, float thickness = 1.0f)
        public void AddLine(Vector2 p1, Vector2 p2, uint col, float thickness = 1.0F)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref p1))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref p2))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddLine(new IntPtr(__instancePtr), __arg0, __arg1, col, thickness);
                }
                else
                {
                    __Internal32.AddLine(new IntPtr(__instancePtr), __arg0, __arg1, col, thickness);
                }
            }
        }

        /// <summary>A: upper-left, b: lower-right (== upper-left + size).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2801"/></summary>
        // DEBUG: void  AddRect(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding = 0.0f, ImDrawFlags flags = 0, float thickness = 1.0f)
        public void AddRect(Vector2 p_min, Vector2 p_max, uint col, float rounding = 0.0F, ImDrawFlags flags = (ImDrawFlags)(0), float thickness = 1.0F)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref p_min))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref p_max))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddRect(new IntPtr(__instancePtr), __arg0, __arg1, col, rounding, flags, thickness);
                }
                else
                {
                    __Internal32.AddRect(new IntPtr(__instancePtr), __arg0, __arg1, col, rounding, flags, thickness);
                }
            }
        }

        /// <summary>A: upper-left, b: lower-right (== upper-left + size).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2802"/></summary>
        // DEBUG: void  AddRectFilled(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding = 0.0f, ImDrawFlags flags = 0)
        public void AddRectFilled(Vector2 p_min, Vector2 p_max, uint col, float rounding = 0.0F, ImDrawFlags flags = (ImDrawFlags)(0))
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref p_min))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref p_max))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddRectFilled(new IntPtr(__instancePtr), __arg0, __arg1, col, rounding, flags);
                }
                else
                {
                    __Internal32.AddRectFilled(new IntPtr(__instancePtr), __arg0, __arg1, col, rounding, flags);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2803"/></summary>
        // DEBUG: void  AddRectFilledMultiColor(const ImVec2& p_min, const ImVec2& p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left)
        public void AddRectFilledMultiColor(Vector2 p_min, Vector2 p_max, uint col_upr_left, uint col_upr_right, uint col_bot_right, uint col_bot_left)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref p_min))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref p_max))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddRectFilledMultiColor(new IntPtr(__instancePtr), __arg0, __arg1, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
                }
                else
                {
                    __Internal32.AddRectFilledMultiColor(new IntPtr(__instancePtr), __arg0, __arg1, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2804"/></summary>
        // DEBUG: void  AddQuad(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness = 1.0f)
        public void AddQuad(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness = 1.0F)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref p1))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref p2))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref p3))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg3 = new IntPtr(Unsafe.AsPointer(ref p4))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddQuad(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, __arg3, col, thickness);
                }
                else
                {
                    __Internal32.AddQuad(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, __arg3, col, thickness);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2805"/></summary>
        // DEBUG: void  AddQuadFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col)
        public void AddQuadFilled(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref p1))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref p2))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref p3))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg3 = new IntPtr(Unsafe.AsPointer(ref p4))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddQuadFilled(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, __arg3, col);
                }
                else
                {
                    __Internal32.AddQuadFilled(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, __arg3, col);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2806"/></summary>
        // DEBUG: void  AddTriangle(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, float thickness = 1.0f)
        public void AddTriangle(Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness = 1.0F)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref p1))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref p2))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref p3))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddTriangle(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, col, thickness);
                }
                else
                {
                    __Internal32.AddTriangle(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, col, thickness);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2807"/></summary>
        // DEBUG: void  AddTriangleFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col)
        public void AddTriangleFilled(Vector2 p1, Vector2 p2, Vector2 p3, uint col)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref p1))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref p2))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref p3))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddTriangleFilled(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, col);
                }
                else
                {
                    __Internal32.AddTriangleFilled(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, col);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2808"/></summary>
        // DEBUG: void  AddCircle(const ImVec2& center, float radius, ImU32 col, int num_segments = 0, float thickness = 1.0f)
        public void AddCircle(Vector2 center, float radius, uint col, int num_segments = (int)(0), float thickness = 1.0F)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref center))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddCircle(new IntPtr(__instancePtr), __arg0, radius, col, num_segments, thickness);
                }
                else
                {
                    __Internal32.AddCircle(new IntPtr(__instancePtr), __arg0, radius, col, num_segments, thickness);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2809"/></summary>
        // DEBUG: void  AddCircleFilled(const ImVec2& center, float radius, ImU32 col, int num_segments = 0)
        public void AddCircleFilled(Vector2 center, float radius, uint col, int num_segments = (int)(0))
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref center))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddCircleFilled(new IntPtr(__instancePtr), __arg0, radius, col, num_segments);
                }
                else
                {
                    __Internal32.AddCircleFilled(new IntPtr(__instancePtr), __arg0, radius, col, num_segments);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2810"/></summary>
        // DEBUG: void  AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float thickness = 1.0f)
        public void AddNgon(Vector2 center, float radius, uint col, int num_segments, float thickness = 1.0F)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref center))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddNgon(new IntPtr(__instancePtr), __arg0, radius, col, num_segments, thickness);
                }
                else
                {
                    __Internal32.AddNgon(new IntPtr(__instancePtr), __arg0, radius, col, num_segments, thickness);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2811"/></summary>
        // DEBUG: void  AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments)
        public void AddNgonFilled(Vector2 center, float radius, uint col, int num_segments)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref center))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddNgonFilled(new IntPtr(__instancePtr), __arg0, radius, col, num_segments);
                }
                else
                {
                    __Internal32.AddNgonFilled(new IntPtr(__instancePtr), __arg0, radius, col, num_segments);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2812"/></summary>
        // DEBUG: void  AddEllipse(const ImVec2& center, float radius_x, float radius_y, ImU32 col, float rot = 0.0f, int num_segments = 0, float thickness = 1.0f)
        public void AddEllipse(Vector2 center, float radius_x, float radius_y, uint col, float rot = 0.0F, int num_segments = (int)(0), float thickness = 1.0F)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref center))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddEllipse(new IntPtr(__instancePtr), __arg0, radius_x, radius_y, col, rot, num_segments, thickness);
                }
                else
                {
                    __Internal32.AddEllipse(new IntPtr(__instancePtr), __arg0, radius_x, radius_y, col, rot, num_segments, thickness);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2813"/></summary>
        // DEBUG: void  AddEllipseFilled(const ImVec2& center, float radius_x, float radius_y, ImU32 col, float rot = 0.0f, int num_segments = 0)
        public void AddEllipseFilled(Vector2 center, float radius_x, float radius_y, uint col, float rot = 0.0F, int num_segments = (int)(0))
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref center))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddEllipseFilled(new IntPtr(__instancePtr), __arg0, radius_x, radius_y, col, rot, num_segments);
                }
                else
                {
                    __Internal32.AddEllipseFilled(new IntPtr(__instancePtr), __arg0, radius_x, radius_y, col, rot, num_segments);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2814"/></summary>
        // DEBUG: void  AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end = NULL)
        public void AddText(Vector2 pos, uint col, string text_begin, string text_end = default)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref pos))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddText(new IntPtr(__instancePtr), __arg0, col, text_begin, text_end);
                }
                else
                {
                    __Internal32.AddText(new IntPtr(__instancePtr), __arg0, col, text_begin, text_end);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2815"/></summary>
        // DEBUG: void  AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end = NULL, float wrap_width = 0.0f, const ImVec4* cpu_fine_clip_rect = NULL)
        public void AddText(ImFont font, float font_size, Vector2 pos, uint col, string text_begin, string text_end = default, float wrap_width = 0.0F, Vector4 cpu_fine_clip_rect = default)
        {
            var __arg0 = font is null ? IntPtr.Zero : font.__Instance;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref pos))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg7 = new IntPtr(Unsafe.AsPointer(ref cpu_fine_clip_rect))
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddText(new IntPtr(__instancePtr), __arg0, font_size, __arg2, col, text_begin, text_end, wrap_width, __arg7);
                }
                else
                {
                    __Internal32.AddText(new IntPtr(__instancePtr), __arg0, font_size, __arg2, col, text_begin, text_end, wrap_width, __arg7);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2816"/></summary>
        // DEBUG: void  AddPolyline(const ImVec2* points, int num_points, ImU32 col, ImDrawFlags flags, float thickness)
        public void AddPolyline(Vector2 points, int num_points, uint col, ImDrawFlags flags, float thickness)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref points))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddPolyline(new IntPtr(__instancePtr), __arg0, num_points, col, flags, thickness);
                }
                else
                {
                    __Internal32.AddPolyline(new IntPtr(__instancePtr), __arg0, num_points, col, flags, thickness);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2817"/></summary>
        // DEBUG: void  AddConvexPolyFilled(const ImVec2* points, int num_points, ImU32 col)
        public void AddConvexPolyFilled(Vector2 points, int num_points, uint col)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref points))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddConvexPolyFilled(new IntPtr(__instancePtr), __arg0, num_points, col);
                }
                else
                {
                    __Internal32.AddConvexPolyFilled(new IntPtr(__instancePtr), __arg0, num_points, col);
                }
            }
        }

        /// <summary>Cubic Bezier (4 control points).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2818"/></summary>
        // DEBUG: void  AddBezierCubic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness, int num_segments = 0)
        public void AddBezierCubic(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, uint col, float thickness, int num_segments = (int)(0))
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref p1))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref p2))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref p3))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg3 = new IntPtr(Unsafe.AsPointer(ref p4))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddBezierCubic(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, __arg3, col, thickness, num_segments);
                }
                else
                {
                    __Internal32.AddBezierCubic(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, __arg3, col, thickness, num_segments);
                }
            }
        }

        /// <summary>Quadratic Bezier (3 control points).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2819"/></summary>
        // DEBUG: void  AddBezierQuadratic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, float thickness, int num_segments = 0)
        public void AddBezierQuadratic(Vector2 p1, Vector2 p2, Vector2 p3, uint col, float thickness, int num_segments = (int)(0))
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref p1))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref p2))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref p3))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddBezierQuadratic(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, col, thickness, num_segments);
                }
                else
                {
                    __Internal32.AddBezierQuadratic(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, col, thickness, num_segments);
                }
            }
        }

        /// <summary>Image primitives.<br/>- Read FAQ to understand what ImTextureID is.<br/>- "p_min" and "p_max" represent the upper-left and lower-right corners of the rectangle.<br/>- "uv_min" and "uv_max" represent the normalized texture coordinates to use for those corners. Using (0,0)-&gt;(1,1) texture coordinates will generally display the entire texture.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2825"/></summary>
        // DEBUG: void  AddImage(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min = ImVec2(0, 0), const ImVec2& uv_max = ImVec2(1, 1), ImU32 col = IM_COL32_WHITE)
        public void AddImage(IntPtr user_texture_id, Vector2 p_min, Vector2 p_max, Vector2 uv_min, Vector2 uv_max, uint col = (uint)(4294967295))
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref p_min))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref p_max))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg3 = new IntPtr(Unsafe.AsPointer(ref uv_min))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg4 = new IntPtr(Unsafe.AsPointer(ref uv_max))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddImage(new IntPtr(__instancePtr), user_texture_id, __arg1, __arg2, __arg3, __arg4, col);
                }
                else
                {
                    __Internal32.AddImage(new IntPtr(__instancePtr), user_texture_id, __arg1, __arg2, __arg3, __arg4, col);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2826"/></summary>
        // DEBUG: void  AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, const ImVec2& uv1 = ImVec2(0, 0), const ImVec2& uv2 = ImVec2(1, 0), const ImVec2& uv3 = ImVec2(1, 1), const ImVec2& uv4 = ImVec2(0, 1), ImU32 col = IM_COL32_WHITE)
        public void AddImageQuad(IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector2 uv4, uint col = (uint)(4294967295))
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref p1))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref p2))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg3 = new IntPtr(Unsafe.AsPointer(ref p3))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg4 = new IntPtr(Unsafe.AsPointer(ref p4))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg5 = new IntPtr(Unsafe.AsPointer(ref uv1))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg6 = new IntPtr(Unsafe.AsPointer(ref uv2))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg7 = new IntPtr(Unsafe.AsPointer(ref uv3))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg8 = new IntPtr(Unsafe.AsPointer(ref uv4))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddImageQuad(new IntPtr(__instancePtr), user_texture_id, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, col);
                }
                else
                {
                    __Internal32.AddImageQuad(new IntPtr(__instancePtr), user_texture_id, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, __arg8, col);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2827"/></summary>
        // DEBUG: void  AddImageRounded(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min, const ImVec2& uv_max, ImU32 col, float rounding, ImDrawFlags flags = 0)
        public void AddImageRounded(IntPtr user_texture_id, Vector2 p_min, Vector2 p_max, Vector2 uv_min, Vector2 uv_max, uint col, float rounding, ImDrawFlags flags = (ImDrawFlags)(0))
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref p_min))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref p_max))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg3 = new IntPtr(Unsafe.AsPointer(ref uv_min))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg4 = new IntPtr(Unsafe.AsPointer(ref uv_max))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddImageRounded(new IntPtr(__instancePtr), user_texture_id, __arg1, __arg2, __arg3, __arg4, col, rounding, flags);
                }
                else
                {
                    __Internal32.AddImageRounded(new IntPtr(__instancePtr), user_texture_id, __arg1, __arg2, __arg3, __arg4, col, rounding, flags);
                }
            }
        }

        /// <summary>Stateful path API, add points then finish with PathFillConvex() or PathStroke().<br/>- Filled shapes must always use clockwise winding order. The anti-aliasing fringe depends on it. Counter-clockwise shapes will have "inward" anti-aliasing.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2831"/></summary>
        // DEBUG: inline    void  PathClear()                                                 { _Path.Size = 0; }
        public void PathClear()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PathClear(new IntPtr(__instancePtr));
                }
                else
                {
                    __Internal32.PathClear(new IntPtr(__instancePtr));
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2832"/></summary>
        // DEBUG: inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_back(pos); }
        public void PathLineTo(Vector2 pos)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref pos))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PathLineTo(new IntPtr(__instancePtr), __arg0);
                }
                else
                {
                    __Internal32.PathLineTo(new IntPtr(__instancePtr), __arg0);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2833"/></summary>
        // DEBUG: inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size == 0 || memcmp(&_Path.Data[_Path.Size - 1], &pos, 8) != 0) _Path.push_back(pos); }
        public void PathLineToMergeDuplicate(Vector2 pos)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref pos))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PathLineToMergeDuplicate(new IntPtr(__instancePtr), __arg0);
                }
                else
                {
                    __Internal32.PathLineToMergeDuplicate(new IntPtr(__instancePtr), __arg0);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2834"/></summary>
        // DEBUG: inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyFilled(_Path.Data, _Path.Size, col); _Path.Size = 0; }
        public void PathFillConvex(uint col)
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PathFillConvex(new IntPtr(__instancePtr), col);
                }
                else
                {
                    __Internal32.PathFillConvex(new IntPtr(__instancePtr), col);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2835"/></summary>
        // DEBUG: inline    void  PathStroke(ImU32 col, ImDrawFlags flags = 0, float thickness = 1.0f) { AddPolyline(_Path.Data, _Path.Size, col, flags, thickness); _Path.Size = 0; }
        public void PathStroke(uint col, ImDrawFlags flags = (ImDrawFlags)(0), float thickness = 1.0F)
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PathStroke(new IntPtr(__instancePtr), col, flags, thickness);
                }
                else
                {
                    __Internal32.PathStroke(new IntPtr(__instancePtr), col, flags, thickness);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2836"/></summary>
        // DEBUG: void  PathArcTo(const ImVec2& center, float radius, float a_min, float a_max, int num_segments = 0)
        public void PathArcTo(Vector2 center, float radius, float a_min, float a_max, int num_segments = (int)(0))
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref center))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PathArcTo(new IntPtr(__instancePtr), __arg0, radius, a_min, a_max, num_segments);
                }
                else
                {
                    __Internal32.PathArcTo(new IntPtr(__instancePtr), __arg0, radius, a_min, a_max, num_segments);
                }
            }
        }

        /// <summary>Use precomputed angles for a 12 steps circle.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2837"/></summary>
        // DEBUG: void  PathArcToFast(const ImVec2& center, float radius, int a_min_of_12, int a_max_of_12)
        public void PathArcToFast(Vector2 center, float radius, int a_min_of_12, int a_max_of_12)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref center))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PathArcToFast(new IntPtr(__instancePtr), __arg0, radius, a_min_of_12, a_max_of_12);
                }
                else
                {
                    __Internal32.PathArcToFast(new IntPtr(__instancePtr), __arg0, radius, a_min_of_12, a_max_of_12);
                }
            }
        }

        /// <summary>Ellipse.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2838"/></summary>
        // DEBUG: void  PathEllipticalArcTo(const ImVec2& center, float radius_x, float radius_y, float rot, float a_min, float a_max, int num_segments = 0)
        public void PathEllipticalArcTo(Vector2 center, float radius_x, float radius_y, float rot, float a_min, float a_max, int num_segments = (int)(0))
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref center))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PathEllipticalArcTo(new IntPtr(__instancePtr), __arg0, radius_x, radius_y, rot, a_min, a_max, num_segments);
                }
                else
                {
                    __Internal32.PathEllipticalArcTo(new IntPtr(__instancePtr), __arg0, radius_x, radius_y, rot, a_min, a_max, num_segments);
                }
            }
        }

        /// <summary>Cubic Bezier (4 control points).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2839"/></summary>
        // DEBUG: void  PathBezierCubicCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num_segments = 0)
        public void PathBezierCubicCurveTo(Vector2 p2, Vector2 p3, Vector2 p4, int num_segments = (int)(0))
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref p2))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref p3))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref p4))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PathBezierCubicCurveTo(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, num_segments);
                }
                else
                {
                    __Internal32.PathBezierCubicCurveTo(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, num_segments);
                }
            }
        }

        /// <summary>Quadratic Bezier (3 control points).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2840"/></summary>
        // DEBUG: void  PathBezierQuadraticCurveTo(const ImVec2& p2, const ImVec2& p3, int num_segments = 0)
        public void PathBezierQuadraticCurveTo(Vector2 p2, Vector2 p3, int num_segments = (int)(0))
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref p2))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref p3))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PathBezierQuadraticCurveTo(new IntPtr(__instancePtr), __arg0, __arg1, num_segments);
                }
                else
                {
                    __Internal32.PathBezierQuadraticCurveTo(new IntPtr(__instancePtr), __arg0, __arg1, num_segments);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2841"/></summary>
        // DEBUG: void  PathRect(const ImVec2& rect_min, const ImVec2& rect_max, float rounding = 0.0f, ImDrawFlags flags = 0)
        public void PathRect(Vector2 rect_min, Vector2 rect_max, float rounding = 0.0F, ImDrawFlags flags = (ImDrawFlags)(0))
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref rect_min))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref rect_max))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PathRect(new IntPtr(__instancePtr), __arg0, __arg1, rounding, flags);
                }
                else
                {
                    __Internal32.PathRect(new IntPtr(__instancePtr), __arg0, __arg1, rounding, flags);
                }
            }
        }

        /// <summary>Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2844"/></summary>
        // DEBUG: void  AddCallback(ImDrawCallback callback, void* callback_data)
        public void AddCallback(ImDrawCallback callback, IntPtr callback_data)
        {
            var __arg0 = callback == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddCallback(new IntPtr(__instancePtr), __arg0, callback_data);
                }
                else
                {
                    __Internal32.AddCallback(new IntPtr(__instancePtr), __arg0, callback_data);
                }
            }
        }

        /// <summary>This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2845"/></summary>
        // DEBUG: void  AddDrawCmd()
        public void AddDrawCmd()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddDrawCmd(new IntPtr(__instancePtr));
                }
                else
                {
                    __Internal32.AddDrawCmd(new IntPtr(__instancePtr));
                }
            }
        }

        /// <summary>Create a clone of the CmdBuffer/IdxBuffer/VtxBuffer.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2846"/></summary>
        // DEBUG: ImDrawList* CloneOutput() const
        public ImDrawList CloneOutput()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.CloneOutput(new IntPtr(__instancePtr)) : __Internal32.CloneOutput(new IntPtr(__instancePtr));
                var __result0 = ___ret != IntPtr.Zero ? ImDrawList.__CreateInstance(___ret) : default;
                return __result0;
            }
        }

        /// <summary>Advanced: Channels.<br/>- Use to split render into layers. By switching channels to can render out-of-order (e.g. submit FG primitives before BG primitives).<br/>- Use to minimize draw calls (e.g. if going back-and-forth between multiple clipping rectangles, prefer to append into separate channels then merge at the end).<br/>- This API shouldn't have been in ImDrawList in the first place!<br/>Prefer using your own persistent instance of ImDrawListSplitter as you can stack them.<br/>Using the ImDrawList::ChannelsXXXX you cannot stack a split over another.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2854"/></summary>
        // DEBUG: inline void     ChannelsSplit(int count)    { _Splitter.Split(this, count); }
        public void ChannelsSplit(int count)
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ChannelsSplit(new IntPtr(__instancePtr), count);
                }
                else
                {
                    __Internal32.ChannelsSplit(new IntPtr(__instancePtr), count);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2855"/></summary>
        // DEBUG: inline void     ChannelsMerge()             { _Splitter.Merge(this); }
        public void ChannelsMerge()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ChannelsMerge(new IntPtr(__instancePtr));
                }
                else
                {
                    __Internal32.ChannelsMerge(new IntPtr(__instancePtr));
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2856"/></summary>
        // DEBUG: inline void     ChannelsSetCurrent(int n)   { _Splitter.SetCurrentChannel(this, n); }
        public void ChannelsSetCurrent(int n)
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ChannelsSetCurrent(new IntPtr(__instancePtr), n);
                }
                else
                {
                    __Internal32.ChannelsSetCurrent(new IntPtr(__instancePtr), n);
                }
            }
        }

        /// <summary>Advanced: Primitives allocations.<br/>- We render triangles (three vertices).<br/>- All primitives needs to be reserved via PrimReserve() beforehand.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2861"/></summary>
        // DEBUG: void  PrimReserve(int idx_count, int vtx_count)
        public void PrimReserve(int idx_count, int vtx_count)
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PrimReserve(new IntPtr(__instancePtr), idx_count, vtx_count);
                }
                else
                {
                    __Internal32.PrimReserve(new IntPtr(__instancePtr), idx_count, vtx_count);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2862"/></summary>
        // DEBUG: void  PrimUnreserve(int idx_count, int vtx_count)
        public void PrimUnreserve(int idx_count, int vtx_count)
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PrimUnreserve(new IntPtr(__instancePtr), idx_count, vtx_count);
                }
                else
                {
                    __Internal32.PrimUnreserve(new IntPtr(__instancePtr), idx_count, vtx_count);
                }
            }
        }

        /// <summary>Axis aligned rectangle (composed of two triangles).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2863"/></summary>
        // DEBUG: void  PrimRect(const ImVec2& a, const ImVec2& b, ImU32 col)
        public void PrimRect(Vector2 a, Vector2 b, uint col)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref a))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref b))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PrimRect(new IntPtr(__instancePtr), __arg0, __arg1, col);
                }
                else
                {
                    __Internal32.PrimRect(new IntPtr(__instancePtr), __arg0, __arg1, col);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2864"/></summary>
        // DEBUG: void  PrimRectUV(const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col)
        public void PrimRectUV(Vector2 a, Vector2 b, Vector2 uv_a, Vector2 uv_b, uint col)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref a))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref b))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref uv_a))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg3 = new IntPtr(Unsafe.AsPointer(ref uv_b))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PrimRectUV(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, __arg3, col);
                }
                else
                {
                    __Internal32.PrimRectUV(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, __arg3, col);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2865"/></summary>
        // DEBUG: void  PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col)
        public void PrimQuadUV(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 uv_a, Vector2 uv_b, Vector2 uv_c, Vector2 uv_d, uint col)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref a))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref b))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref c))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg3 = new IntPtr(Unsafe.AsPointer(ref d))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg4 = new IntPtr(Unsafe.AsPointer(ref uv_a))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg5 = new IntPtr(Unsafe.AsPointer(ref uv_b))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg6 = new IntPtr(Unsafe.AsPointer(ref uv_c))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg7 = new IntPtr(Unsafe.AsPointer(ref uv_d))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PrimQuadUV(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, col);
                }
                else
                {
                    __Internal32.PrimQuadUV(new IntPtr(__instancePtr), __arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7, col);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2866"/></summary>
        // DEBUG: inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)    { _VtxWritePtr->pos = pos; _VtxWritePtr->uv = uv; _VtxWritePtr->col = col; _VtxWritePtr++; _VtxCurrentIdx++; }
        public void PrimWriteVtx(Vector2 pos, Vector2 uv, uint col)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref pos))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref uv))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PrimWriteVtx(new IntPtr(__instancePtr), __arg0, __arg1, col);
                }
                else
                {
                    __Internal32.PrimWriteVtx(new IntPtr(__instancePtr), __arg0, __arg1, col);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2867"/></summary>
        // DEBUG: inline    void  PrimWriteIdx(ImDrawIdx idx)                                     { *_IdxWritePtr = idx; _IdxWritePtr++; }
        public void PrimWriteIdx(ushort idx)
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PrimWriteIdx(new IntPtr(__instancePtr), idx);
                }
                else
                {
                    __Internal32.PrimWriteIdx(new IntPtr(__instancePtr), idx);
                }
            }
        }

        /// <summary>Write vertex with unique index.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2868"/></summary>
        // DEBUG: inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)         { PrimWriteIdx((ImDrawIdx)_VtxCurrentIdx); PrimWriteVtx(pos, uv, col); }
        public void PrimVtx(Vector2 pos, Vector2 uv, uint col)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref pos))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref uv))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PrimVtx(new IntPtr(__instancePtr), __arg0, __arg1, col);
                }
                else
                {
                    __Internal32.PrimVtx(new IntPtr(__instancePtr), __arg0, __arg1, col);
                }
            }
        }

        /// <summary>[Internal helpers].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2875"/></summary>
        // DEBUG: void  _ResetForNewFrame()
        public void ResetForNewFrame()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ResetForNewFrame(new IntPtr(__instancePtr));
                }
                else
                {
                    __Internal32.ResetForNewFrame(new IntPtr(__instancePtr));
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2876"/></summary>
        // DEBUG: void  _ClearFreeMemory()
        public void ClearFreeMemory()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ClearFreeMemory(new IntPtr(__instancePtr));
                }
                else
                {
                    __Internal32.ClearFreeMemory(new IntPtr(__instancePtr));
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2877"/></summary>
        // DEBUG: void  _PopUnusedDrawCmd()
        public void PopUnusedDrawCmd()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PopUnusedDrawCmd(new IntPtr(__instancePtr));
                }
                else
                {
                    __Internal32.PopUnusedDrawCmd(new IntPtr(__instancePtr));
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2878"/></summary>
        // DEBUG: void  _TryMergeDrawCmds()
        public void TryMergeDrawCmds()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.TryMergeDrawCmds(new IntPtr(__instancePtr));
                }
                else
                {
                    __Internal32.TryMergeDrawCmds(new IntPtr(__instancePtr));
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2879"/></summary>
        // DEBUG: void  _OnChangedClipRect()
        public void OnChangedClipRect()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.OnChangedClipRect(new IntPtr(__instancePtr));
                }
                else
                {
                    __Internal32.OnChangedClipRect(new IntPtr(__instancePtr));
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2880"/></summary>
        // DEBUG: void  _OnChangedTextureID()
        public void OnChangedTextureID()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.OnChangedTextureID(new IntPtr(__instancePtr));
                }
                else
                {
                    __Internal32.OnChangedTextureID(new IntPtr(__instancePtr));
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2881"/></summary>
        // DEBUG: void  _OnChangedVtxOffset()
        public void OnChangedVtxOffset()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.OnChangedVtxOffset(new IntPtr(__instancePtr));
                }
                else
                {
                    __Internal32.OnChangedVtxOffset(new IntPtr(__instancePtr));
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2882"/></summary>
        // DEBUG: int   _CalcCircleAutoSegmentCount(float radius) const
        public int CalcCircleAutoSegmentCount(float radius)
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.CalcCircleAutoSegmentCount(new IntPtr(__instancePtr), radius) : __Internal32.CalcCircleAutoSegmentCount(new IntPtr(__instancePtr), radius);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2883"/></summary>
        // DEBUG: void  _PathArcToFastEx(const ImVec2& center, float radius, int a_min_sample, int a_max_sample, int a_step)
        public void PathArcToFastEx(Vector2 center, float radius, int a_min_sample, int a_max_sample, int a_step)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref center))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PathArcToFastEx(new IntPtr(__instancePtr), __arg0, radius, a_min_sample, a_max_sample, a_step);
                }
                else
                {
                    __Internal32.PathArcToFastEx(new IntPtr(__instancePtr), __arg0, radius, a_min_sample, a_max_sample, a_step);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2884"/></summary>
        // DEBUG: void  _PathArcToN(const ImVec2& center, float radius, float a_min, float a_max, int num_segments)
        public void PathArcToN(Vector2 center, float radius, float a_min, float a_max, int num_segments)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref center))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PathArcToN(new IntPtr(__instancePtr), __arg0, radius, a_min, a_max, num_segments);
                }
                else
                {
                    __Internal32.PathArcToN(new IntPtr(__instancePtr), __arg0, radius, a_min, a_max, num_segments);
                }
            }
        }

        public static implicit operator ImDrawList(ImDrawListSharedData shared_data)
        {
            return new ImDrawList(shared_data);
        }

        /// <summary>Image primitives.<br/>- Read FAQ to understand what ImTextureID is.<br/>- "p_min" and "p_max" represent the upper-left and lower-right corners of the rectangle.<br/>- "uv_min" and "uv_max" represent the normalized texture coordinates to use for those corners. Using (0,0)-&gt;(1,1) texture coordinates will generally display the entire texture.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2825"/></summary>
        // DEBUG: void  AddImage(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min = ImVec2(0, 0), const ImVec2& uv_max = ImVec2(1, 1), ImU32 col = IM_COL32_WHITE)
        public void AddImage(IntPtr user_texture_id, Vector2 p_min, Vector2 p_max)
        {
            AddImage(user_texture_id, p_min, p_max, new Vector2(0, 0), new Vector2(1, 1), 4294967295);
        }

        /// <summary>Image primitives.<br/>- Read FAQ to understand what ImTextureID is.<br/>- "p_min" and "p_max" represent the upper-left and lower-right corners of the rectangle.<br/>- "uv_min" and "uv_max" represent the normalized texture coordinates to use for those corners. Using (0,0)-&gt;(1,1) texture coordinates will generally display the entire texture.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2825"/></summary>
        // DEBUG: void  AddImage(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min = ImVec2(0, 0), const ImVec2& uv_max = ImVec2(1, 1), ImU32 col = IM_COL32_WHITE)
        public void AddImage(IntPtr user_texture_id, Vector2 p_min, Vector2 p_max, Vector2 uv_min)
        {
            AddImage(user_texture_id, p_min, p_max, uv_min, new Vector2(1, 1), 4294967295);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2826"/></summary>
        // DEBUG: void  AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, const ImVec2& uv1 = ImVec2(0, 0), const ImVec2& uv2 = ImVec2(1, 0), const ImVec2& uv3 = ImVec2(1, 1), const ImVec2& uv4 = ImVec2(0, 1), ImU32 col = IM_COL32_WHITE)
        public void AddImageQuad(IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4)
        {
            AddImageQuad(user_texture_id, p1, p2, p3, p4, new Vector2(0, 0), new Vector2(1, 0), new Vector2(1, 1), new Vector2(0, 1), 4294967295);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2826"/></summary>
        // DEBUG: void  AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, const ImVec2& uv1 = ImVec2(0, 0), const ImVec2& uv2 = ImVec2(1, 0), const ImVec2& uv3 = ImVec2(1, 1), const ImVec2& uv4 = ImVec2(0, 1), ImU32 col = IM_COL32_WHITE)
        public void AddImageQuad(IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1)
        {
            AddImageQuad(user_texture_id, p1, p2, p3, p4, uv1, new Vector2(1, 0), new Vector2(1, 1), new Vector2(0, 1), 4294967295);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2826"/></summary>
        // DEBUG: void  AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, const ImVec2& uv1 = ImVec2(0, 0), const ImVec2& uv2 = ImVec2(1, 0), const ImVec2& uv3 = ImVec2(1, 1), const ImVec2& uv4 = ImVec2(0, 1), ImU32 col = IM_COL32_WHITE)
        public void AddImageQuad(IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2)
        {
            AddImageQuad(user_texture_id, p1, p2, p3, p4, uv1, uv2, new Vector2(1, 1), new Vector2(0, 1), 4294967295);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2826"/></summary>
        // DEBUG: void  AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, const ImVec2& uv1 = ImVec2(0, 0), const ImVec2& uv2 = ImVec2(1, 0), const ImVec2& uv3 = ImVec2(1, 1), const ImVec2& uv4 = ImVec2(0, 1), ImU32 col = IM_COL32_WHITE)
        public void AddImageQuad(IntPtr user_texture_id, Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3)
        {
            AddImageQuad(user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, new Vector2(0, 1), 4294967295);
        }

        /// <summary>Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2763"/></summary>
        public ImVector<ImDrawCmd> CmdBuffer
        {
            get
            {
                return new ImVector<ImDrawCmd>(Unsafe.As<ImVector.__Internal, ImVector<ImDrawCmd>.__Internal>(ref __instance.CmdBuffer))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Index buffer. Each command consume ImDrawCmd::ElemCount of those.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2764"/></summary>
        public ImVector<ushort> IdxBuffer
        {
            get
            {
                return new ImVector<ushort>(Unsafe.As<ImVector.__Internal, ImVector<ushort>.__Internal>(ref __instance.IdxBuffer))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Vertex buffer.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2765"/></summary>
        public ImVector<ImDrawVert> VtxBuffer
        {
            get
            {
                return new ImVector<ImDrawVert>(Unsafe.As<ImVector.__Internal, ImVector<ImDrawVert>.__Internal>(ref __instance.VtxBuffer))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Flags, you may poke into these to adjust anti-aliasing settings per-primitive.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2766"/></summary>
        public ImDrawListFlags Flags
        {
            get
            {
                return __instance.Flags;
            }

            set
            {
                __instance.Flags = value;
            }
        }
    }

    /// <summary>All draw data to render a Dear ImGui frame.<br/>(NB: the style and the naming convention here is a little inconsistent, we currently preserve them for backward compatibility purpose,.<br/>As this is one of the oldest structure exposed by the library! Basically, ImDrawList == CmdList).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2890"/></summary>
    // DEBUG: struct ImDrawData
    // DEBUG: {
    // DEBUG:     bool                Valid;              // Only valid after Render() is called and before the next NewFrame() is called.
    // DEBUG:     int                 CmdListsCount;      // Number of ImDrawList* to render
    // DEBUG:     int                 TotalIdxCount;      // For convenience, sum of all ImDrawList's IdxBuffer.Size
    // DEBUG:     int                 TotalVtxCount;      // For convenience, sum of all ImDrawList's VtxBuffer.Size
    // DEBUG:     ImVector<ImDrawList*> CmdLists;         // Array of ImDrawList* to render. The ImDrawLists are owned by ImGuiContext and only pointed to from here.
    // DEBUG:     ImVec2              DisplayPos;         // Top-left position of the viewport to render (== top-left of the orthogonal projection matrix to use) (== GetMainViewport()->Pos for the main viewport, == (0.0) in most single-viewport applications)
    // DEBUG:     ImVec2              DisplaySize;        // Size of the viewport to render (== GetMainViewport()->Size for the main viewport, == io.DisplaySize in most single-viewport applications)
    // DEBUG:     ImVec2              FramebufferScale;   // Amount of pixels for each unit of DisplaySize. Based on io.DisplayFramebufferScale. Generally (1,1) on normal display, (2,2) on OSX with Retina display.
    // DEBUG:     ImGuiViewport*      OwnerViewport;      // Viewport carrying the ImDrawData instance, might be of use to the renderer (generally not).
    // DEBUG: 
    // DEBUG:     // Functions
    // DEBUG:     ImDrawData()    { Clear(); }
    // DEBUG:     IMGUI_API void  Clear();
    // DEBUG:     IMGUI_API void  AddDrawList(ImDrawList* draw_list);     // Helper to add an external draw list into an existing ImDrawData.
    // DEBUG:     IMGUI_API void  DeIndexAllBuffers();                    // Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!
    // DEBUG:     IMGUI_API void  ScaleClipRects(const ImVec2& fb_scale); // Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.
    // DEBUG: }
    public unsafe partial struct ImDrawData
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal byte Valid;
            internal int CmdListsCount;
            internal int TotalIdxCount;
            internal int TotalVtxCount;
            internal ImVector<IntPtr>.__Internal CmdLists;
            internal Vector2 DisplayPos;
            internal Vector2 DisplaySize;
            internal Vector2 FramebufferScale;
            internal IntPtr OwnerViewport;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawData@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawData@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImDrawData@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Clear@ImDrawData@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddDrawList@ImDrawData@@QAEXPAUImDrawList@@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddDrawList(IntPtr __instance, IntPtr draw_list);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DeIndexAllBuffers@ImDrawData@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void DeIndexAllBuffers(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ScaleClipRects@ImDrawData@@QAEXABUImVec2@@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void ScaleClipRects(IntPtr __instance, IntPtr fb_scale);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawData@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImDrawData@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImDrawData@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Clear@ImDrawData@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddDrawList@ImDrawData@@QEAAXPEAUImDrawList@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddDrawList(IntPtr __instance, IntPtr draw_list);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DeIndexAllBuffers@ImDrawData@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void DeIndexAllBuffers(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ScaleClipRects(IntPtr __instance, IntPtr fb_scale);

        }

        private ImDrawData.__Internal __instance;
        internal ImDrawData.__Internal __Instance => __instance;

        internal static ImDrawData __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            return new ImDrawData(native.ToPointer(), skipVTables);
        }

        internal static ImDrawData __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImDrawData(native, skipVTables);
        }

        private ImDrawData(__Internal native, bool skipVTables = false) : this()
        {
            __instance = native;
        }

        private ImDrawData(void* native, bool skipVTables = false) : this()
        {
            __instance = *(ImDrawData.__Internal*)native;
        }

        /// <summary>All draw data to render a Dear ImGui frame.<br/>(NB: the style and the naming convention here is a little inconsistent, we currently preserve them for backward compatibility purpose,.<br/>As this is one of the oldest structure exposed by the library! Basically, ImDrawList == CmdList).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2890"/></summary>
        // DEBUG: ImDrawData
        public ImDrawData(ImDrawData _0) : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ctor(new IntPtr(__instancePtr), __arg0);
                }
                else
                {
                    __Internal32.ctor(new IntPtr(__instancePtr), __arg0);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2904"/></summary>
        // DEBUG: void  Clear()
        public void Clear()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.Clear(new IntPtr(__instancePtr));
                }
                else
                {
                    __Internal32.Clear(new IntPtr(__instancePtr));
                }
            }
        }

        /// <summary>Helper to add an external draw list into an existing ImDrawData.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2905"/></summary>
        // DEBUG: void  AddDrawList(ImDrawList* draw_list)
        public void AddDrawList(ImDrawList draw_list)
        {
            var ____arg0 = draw_list.__Instance;
            var __arg0 = new IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddDrawList(new IntPtr(__instancePtr), __arg0);
                }
                else
                {
                    __Internal32.AddDrawList(new IntPtr(__instancePtr), __arg0);
                }
            }
        }

        /// <summary>Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2906"/></summary>
        // DEBUG: void  DeIndexAllBuffers()
        public void DeIndexAllBuffers()
        {
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.DeIndexAllBuffers(new IntPtr(__instancePtr));
                }
                else
                {
                    __Internal32.DeIndexAllBuffers(new IntPtr(__instancePtr));
                }
            }
        }

        /// <summary>Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2907"/></summary>
        // DEBUG: void  ScaleClipRects(const ImVec2& fb_scale)
        public void ScaleClipRects(Vector2 fb_scale)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref fb_scale))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (__Internal* __instancePtr = &__instance)
            {
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ScaleClipRects(new IntPtr(__instancePtr), __arg0);
                }
                else
                {
                    __Internal32.ScaleClipRects(new IntPtr(__instancePtr), __arg0);
                }
            }
        }

        /// <summary>Only valid after Render() is called and before the next NewFrame() is called.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2892"/></summary>
        public bool Valid
        {
            get
            {
                return __instance.Valid != 0;
            }

            set
            {
                __instance.Valid = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Number of ImDrawList* to render.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2893"/></summary>
        public int CmdListsCount
        {
            get
            {
                return __instance.CmdListsCount;
            }

            set
            {
                __instance.CmdListsCount = value;
            }
        }

        /// <summary>For convenience, sum of all ImDrawList's IdxBuffer.Size.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2894"/></summary>
        public int TotalIdxCount
        {
            get
            {
                return __instance.TotalIdxCount;
            }

            set
            {
                __instance.TotalIdxCount = value;
            }
        }

        /// <summary>For convenience, sum of all ImDrawList's VtxBuffer.Size.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2895"/></summary>
        public int TotalVtxCount
        {
            get
            {
                return __instance.TotalVtxCount;
            }

            set
            {
                __instance.TotalVtxCount = value;
            }
        }

        /// <summary>Viewport carrying the ImDrawData instance, might be of use to the renderer (generally not).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2900"/></summary>
        public ImGuiViewport OwnerViewport
        {
            get
            {
                var __result0 = ImGuiViewport.__GetOrCreateInstance(__instance.OwnerViewport, false);
                return __result0;
            }

            set
            {
                __instance.OwnerViewport = value is null ? IntPtr.Zero : value.__Instance;
            }
        }
    }

    /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2914"/></summary>
    // DEBUG: struct ImFontConfig
    // DEBUG: {
    // DEBUG:     void*           FontData;               //          // TTF/OTF data
    // DEBUG:     int             FontDataSize;           //          // TTF/OTF data size
    // DEBUG:     bool            FontDataOwnedByAtlas;   // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).
    // DEBUG:     int             FontNo;                 // 0        // Index of font within TTF/OTF file
    // DEBUG:     float           SizePixels;             //          // Size in pixels for rasterizer (more or less maps to the resulting font height).
    // DEBUG:     int             OversampleH;            // 2        // Rasterize at higher quality for sub-pixel positioning. Note the difference between 2 and 3 is minimal. You can reduce this to 1 for large glyphs save memory. Read https://github.com/nothings/stb/blob/master/tests/oversample/README.md for details.
    // DEBUG:     int             OversampleV;            // 1        // Rasterize at higher quality for sub-pixel positioning. This is not really useful as we don't use sub-pixel positions on the Y axis.
    // DEBUG:     bool            PixelSnapH;             // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.
    // DEBUG:     ImVec2          GlyphExtraSpacing;      // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.
    // DEBUG:     ImVec2          GlyphOffset;            // 0, 0     // Offset all glyphs from this font input.
    // DEBUG:     const ImWchar*  GlyphRanges;            // NULL     // THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE. Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list).
    // DEBUG:     float           GlyphMinAdvanceX;       // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font
    // DEBUG:     float           GlyphMaxAdvanceX;       // FLT_MAX  // Maximum AdvanceX for glyphs
    // DEBUG:     bool            MergeMode;              // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.
    // DEBUG:     unsigned int    FontBuilderFlags;       // 0        // Settings for custom font builder. THIS IS BUILDER IMPLEMENTATION DEPENDENT. Leave as zero if unsure.
    // DEBUG:     float           RasterizerMultiply;     // 1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.
    // DEBUG:     ImWchar         EllipsisChar;           // -1       // Explicitly specify unicode codepoint of ellipsis character. When fonts are being merged first specified ellipsis will be used.
    // DEBUG: 
    // DEBUG:     // [Internal]
    // DEBUG:     char            Name[40];               // Name (strictly to ease debugging)
    // DEBUG:     ImFont*         DstFont;
    // DEBUG: 
    // DEBUG:     IMGUI_API ImFontConfig();
    // DEBUG: }
    public unsafe partial class ImFontConfig : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal IntPtr FontData;
            internal int FontDataSize;
            internal byte FontDataOwnedByAtlas;
            internal int FontNo;
            internal float SizePixels;
            internal int OversampleH;
            internal int OversampleV;
            internal byte PixelSnapH;
            internal Vector2 GlyphExtraSpacing;
            internal Vector2 GlyphOffset;
            internal IntPtr GlyphRanges;
            internal float GlyphMinAdvanceX;
            internal float GlyphMaxAdvanceX;
            internal byte MergeMode;
            internal uint FontBuilderFlags;
            internal float RasterizerMultiply;
            internal ushort EllipsisChar;
            internal fixed sbyte Name[40];
            internal IntPtr DstFont;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontConfig@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontConfig@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontConfig@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontConfig@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImFontConfig>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImFontConfig>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImFontConfig managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImFontConfig>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImFontConfig managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImFontConfig __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImFontConfig(native.ToPointer(), skipVTables);
        }

        internal static ImFontConfig __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImFontConfig)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImFontConfig __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImFontConfig(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImFontConfig(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImFontConfig(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2938"/></summary>
        // DEBUG: ImFontConfig()
        public ImFontConfig()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImFontConfig.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2914"/></summary>
        // DEBUG: ImFontConfig
        public ImFontConfig(ImFontConfig _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImFontConfig.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImFontConfig()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>TTF/OTF data.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2916"/></summary>
        public IntPtr FontData
        {
            get
            {
                return ((__Internal*)__Instance)->FontData;
            }

            set
            {
                ((__Internal*)__Instance)->FontData = (IntPtr)value;
            }
        }

        /// <summary>TTF/OTF data size.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2917"/></summary>
        public int FontDataSize
        {
            get
            {
                return ((__Internal*)__Instance)->FontDataSize;
            }

            set
            {
                ((__Internal*)__Instance)->FontDataSize = value;
            }
        }

        /// <summary>True.<br/>TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2918"/></summary>
        public bool FontDataOwnedByAtlas
        {
            get
            {
                return ((__Internal*)__Instance)->FontDataOwnedByAtlas != 0;
            }

            set
            {
                ((__Internal*)__Instance)->FontDataOwnedByAtlas = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>0.<br/>Index of font within TTF/OTF file.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2919"/></summary>
        public int FontNo
        {
            get
            {
                return ((__Internal*)__Instance)->FontNo;
            }

            set
            {
                ((__Internal*)__Instance)->FontNo = value;
            }
        }

        /// <summary>Size in pixels for rasterizer (more or less maps to the resulting font height).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2920"/></summary>
        public float SizePixels
        {
            get
            {
                return ((__Internal*)__Instance)->SizePixels;
            }

            set
            {
                ((__Internal*)__Instance)->SizePixels = value;
            }
        }

        /// <summary>2.<br/>Rasterize at higher quality for sub-pixel positioning. Note the difference between 2 and 3 is minimal. You can reduce this to 1 for large glyphs save memory. Read https:.<br/>Github.com/nothings/stb/blob/master/tests/oversample/README.md for details.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2921"/></summary>
        public int OversampleH
        {
            get
            {
                return ((__Internal*)__Instance)->OversampleH;
            }

            set
            {
                ((__Internal*)__Instance)->OversampleH = value;
            }
        }

        /// <summary>1.<br/>Rasterize at higher quality for sub-pixel positioning. This is not really useful as we don't use sub-pixel positions on the Y axis.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2922"/></summary>
        public int OversampleV
        {
            get
            {
                return ((__Internal*)__Instance)->OversampleV;
            }

            set
            {
                ((__Internal*)__Instance)->OversampleV = value;
            }
        }

        /// <summary>False.<br/>Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2923"/></summary>
        public bool PixelSnapH
        {
            get
            {
                return ((__Internal*)__Instance)->PixelSnapH != 0;
            }

            set
            {
                ((__Internal*)__Instance)->PixelSnapH = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>0, 0.<br/>Extra spacing (in pixels) between glyphs. Only X axis is supported for now.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2924"/></summary>
        public Vector2 GlyphExtraSpacing
        {
            get
            {
                return ((__Internal*)__Instance)->GlyphExtraSpacing
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->GlyphExtraSpacing = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>0, 0.<br/>Offset all glyphs from this font input.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2925"/></summary>
        public Vector2 GlyphOffset
        {
            get
            {
                return ((__Internal*)__Instance)->GlyphOffset
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->GlyphOffset = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>NULL.<br/>THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE. Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2926"/></summary>
        public ushort* GlyphRanges
        {
            get
            {
                return (ushort*)((__Internal*)__Instance)->GlyphRanges;
            }
        }

        /// <summary>0.<br/>Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2927"/></summary>
        public float GlyphMinAdvanceX
        {
            get
            {
                return ((__Internal*)__Instance)->GlyphMinAdvanceX;
            }

            set
            {
                ((__Internal*)__Instance)->GlyphMinAdvanceX = value;
            }
        }

        /// <summary>FLT_MAX.<br/>Maximum AdvanceX for glyphs.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2928"/></summary>
        public float GlyphMaxAdvanceX
        {
            get
            {
                return ((__Internal*)__Instance)->GlyphMaxAdvanceX;
            }

            set
            {
                ((__Internal*)__Instance)->GlyphMaxAdvanceX = value;
            }
        }

        /// <summary>False.<br/>Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2929"/></summary>
        public bool MergeMode
        {
            get
            {
                return ((__Internal*)__Instance)->MergeMode != 0;
            }

            set
            {
                ((__Internal*)__Instance)->MergeMode = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>0.<br/>Settings for custom font builder. THIS IS BUILDER IMPLEMENTATION DEPENDENT. Leave as zero if unsure.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2930"/></summary>
        public uint FontBuilderFlags
        {
            get
            {
                return ((__Internal*)__Instance)->FontBuilderFlags;
            }

            set
            {
                ((__Internal*)__Instance)->FontBuilderFlags = value;
            }
        }

        /// <summary>1.0f.<br/>Brighten (&gt;1.0f) or darken (&lt;1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2931"/></summary>
        public float RasterizerMultiply
        {
            get
            {
                return ((__Internal*)__Instance)->RasterizerMultiply;
            }

            set
            {
                ((__Internal*)__Instance)->RasterizerMultiply = value;
            }
        }

        /// <summary>-1.<br/>Explicitly specify unicode codepoint of ellipsis character. When fonts are being merged first specified ellipsis will be used.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2932"/></summary>
        public ushort EllipsisChar
        {
            get
            {
                return ((__Internal*)__Instance)->EllipsisChar;
            }

            set
            {
                ((__Internal*)__Instance)->EllipsisChar = value;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2936"/></summary>
        public ImFont DstFont
        {
            get
            {
                var __result0 = ImFont.__GetOrCreateInstance(((__Internal*)__Instance)->DstFont, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->DstFont = value is null ? IntPtr.Zero : value.__Instance;
            }
        }
    }

    /// <summary>Hold rendering data for one glyph.<br/>(Note: some language parsers may fail to convert the 31+1 bitfield members, in this case maybe drop store a single u32 or we can rework this).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2943"/></summary>
    // DEBUG: struct ImFontGlyph
    // DEBUG: {
    // DEBUG:     unsigned int    Colored : 1;        // Flag to indicate glyph is colored and should generally ignore tinting (make it usable with no shift on little-endian as this is used in loops)
    // DEBUG:     unsigned int    Visible : 1;        // Flag to indicate glyph has no visible pixels (e.g. space). Allow early out when rendering.
    // DEBUG:     unsigned int    Codepoint : 30;     // 0x0000..0x10FFFF
    // DEBUG:     float           AdvanceX;           // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)
    // DEBUG:     float           X0, Y0, X1, Y1;     // Glyph corners
    // DEBUG:     float           U0, V0, U1, V1;     // Texture coordinates
    // DEBUG: }
    public unsafe partial class ImFontGlyph : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        internal partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint Colored;
            [FieldOffset(0)]
            internal uint Visible;
            [FieldOffset(0)]
            internal uint Codepoint;
            [FieldOffset(4)]
            internal float AdvanceX;
            [FieldOffset(8)]
            internal float X0;
            [FieldOffset(12)]
            internal float Y0;
            [FieldOffset(16)]
            internal float X1;
            [FieldOffset(20)]
            internal float Y1;
            [FieldOffset(24)]
            internal float U0;
            [FieldOffset(28)]
            internal float V0;
            [FieldOffset(32)]
            internal float U1;
            [FieldOffset(36)]
            internal float V1;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontGlyph@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontGlyph@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImFontGlyph>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImFontGlyph>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImFontGlyph managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImFontGlyph>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImFontGlyph managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImFontGlyph __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImFontGlyph(native.ToPointer(), skipVTables);
        }

        internal static ImFontGlyph __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImFontGlyph)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImFontGlyph __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImFontGlyph(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImFontGlyph(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImFontGlyph(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary>Hold rendering data for one glyph.<br/>(Note: some language parsers may fail to convert the 31+1 bitfield members, in this case maybe drop store a single u32 or we can rework this).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2943"/></summary>
        // DEBUG: ImFontGlyph
        public ImFontGlyph()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImFontGlyph.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        /// <summary>Hold rendering data for one glyph.<br/>(Note: some language parsers may fail to convert the 31+1 bitfield members, in this case maybe drop store a single u32 or we can rework this).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2943"/></summary>
        // DEBUG: ImFontGlyph
        public ImFontGlyph(ImFontGlyph _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImFontGlyph.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImFontGlyph()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2948"/></summary>
        public float AdvanceX
        {
            get
            {
                return ((__Internal*)__Instance)->AdvanceX;
            }

            set
            {
                ((__Internal*)__Instance)->AdvanceX = value;
            }
        }

        /// <summary>Glyph corners.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2949"/></summary>
        public float X0
        {
            get
            {
                return ((__Internal*)__Instance)->X0;
            }

            set
            {
                ((__Internal*)__Instance)->X0 = value;
            }
        }

        /// <summary>Glyph corners.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2949"/></summary>
        public float Y0
        {
            get
            {
                return ((__Internal*)__Instance)->Y0;
            }

            set
            {
                ((__Internal*)__Instance)->Y0 = value;
            }
        }

        /// <summary>Glyph corners.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2949"/></summary>
        public float X1
        {
            get
            {
                return ((__Internal*)__Instance)->X1;
            }

            set
            {
                ((__Internal*)__Instance)->X1 = value;
            }
        }

        /// <summary>Glyph corners.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2949"/></summary>
        public float Y1
        {
            get
            {
                return ((__Internal*)__Instance)->Y1;
            }

            set
            {
                ((__Internal*)__Instance)->Y1 = value;
            }
        }

        /// <summary>Texture coordinates.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2950"/></summary>
        public float U0
        {
            get
            {
                return ((__Internal*)__Instance)->U0;
            }

            set
            {
                ((__Internal*)__Instance)->U0 = value;
            }
        }

        /// <summary>Texture coordinates.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2950"/></summary>
        public float V0
        {
            get
            {
                return ((__Internal*)__Instance)->V0;
            }

            set
            {
                ((__Internal*)__Instance)->V0 = value;
            }
        }

        /// <summary>Texture coordinates.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2950"/></summary>
        public float U1
        {
            get
            {
                return ((__Internal*)__Instance)->U1;
            }

            set
            {
                ((__Internal*)__Instance)->U1 = value;
            }
        }

        /// <summary>Texture coordinates.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2950"/></summary>
        public float V1
        {
            get
            {
                return ((__Internal*)__Instance)->V1;
            }

            set
            {
                ((__Internal*)__Instance)->V1 = value;
            }
        }
    }

    /// <summary>Helper to build glyph ranges from text/string data. Feed your application strings/characters to it then call BuildRanges().<br/>This is essentially a tightly packed of vector of 64k booleans = 8KB storage.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2955"/></summary>
    // DEBUG: struct ImFontGlyphRangesBuilder
    // DEBUG: {
    // DEBUG:     ImVector<ImU32> UsedChars;            // Store 1-bit per Unicode code point (0=unused, 1=used)
    // DEBUG: 
    // DEBUG:     ImFontGlyphRangesBuilder()              { Clear(); }
    // DEBUG:     inline void     Clear()                 { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1) / 8; UsedChars.resize(size_in_bytes / (int)sizeof(ImU32)); memset(UsedChars.Data, 0, (size_t)size_in_bytes); }
    // DEBUG:     inline bool     GetBit(size_t n) const  { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 31); return (UsedChars[off] & mask) != 0; }  // Get bit n in the array
    // DEBUG:     inline void     SetBit(size_t n)        { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 31); UsedChars[off] |= mask; }               // Set bit n in the array
    // DEBUG:     inline void     AddChar(ImWchar c)      { SetBit(c); }                      // Add character
    // DEBUG:     IMGUI_API void  AddText(const char* text, const char* text_end = NULL);     // Add string (each character of the UTF-8 string are added)
    // DEBUG:     IMGUI_API void  AddRanges(const ImWchar* ranges);                           // Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCII/Latin+Ext
    // DEBUG:     IMGUI_API void  BuildRanges(ImVector<ImWchar>* out_ranges);                 // Output new ranges
    // DEBUG: }
    public unsafe partial class ImFontGlyphRangesBuilder : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal ImVector.__Internal UsedChars;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontGlyphRangesBuilder@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontGlyphRangesBuilder@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImFontGlyphRangesBuilder@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Clear@ImFontGlyphRangesBuilder@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetBit@ImFontGlyphRangesBuilder@@QBE_NI@Z", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBit(IntPtr __instance, UIntPtr n);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetBit@ImFontGlyphRangesBuilder@@QAEXI@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void SetBit(IntPtr __instance, UIntPtr n);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddChar@ImFontGlyphRangesBuilder@@QAEXG@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddChar(IntPtr __instance, ushort c);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddText@ImFontGlyphRangesBuilder@@QAEXPBD0@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddText(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddRanges@ImFontGlyphRangesBuilder@@QAEXPBG@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddRanges(IntPtr __instance, ushort* ranges);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BuildRanges@ImFontGlyphRangesBuilder@@QAEXPAU?$ImVector@G@@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void BuildRanges(IntPtr __instance, IntPtr out_ranges);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontGlyphRangesBuilder@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontGlyphRangesBuilder@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImFontGlyphRangesBuilder@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Clear@ImFontGlyphRangesBuilder@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBit(IntPtr __instance, UIntPtr n);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetBit(IntPtr __instance, UIntPtr n);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddChar(IntPtr __instance, ushort c);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddText(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddRanges(IntPtr __instance, ushort* ranges);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void BuildRanges(IntPtr __instance, IntPtr out_ranges);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImFontGlyphRangesBuilder>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImFontGlyphRangesBuilder>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImFontGlyphRangesBuilder managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImFontGlyphRangesBuilder>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImFontGlyphRangesBuilder managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImFontGlyphRangesBuilder __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImFontGlyphRangesBuilder(native.ToPointer(), skipVTables);
        }

        internal static ImFontGlyphRangesBuilder __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImFontGlyphRangesBuilder)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImFontGlyphRangesBuilder __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImFontGlyphRangesBuilder(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImFontGlyphRangesBuilder(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImFontGlyphRangesBuilder(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2959"/></summary>
        // DEBUG: ImFontGlyphRangesBuilder()              { Clear(); }
        public ImFontGlyphRangesBuilder()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImFontGlyphRangesBuilder.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>Helper to build glyph ranges from text/string data. Feed your application strings/characters to it then call BuildRanges().<br/>This is essentially a tightly packed of vector of 64k booleans = 8KB storage.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2955"/></summary>
        // DEBUG: ImFontGlyphRangesBuilder
        public ImFontGlyphRangesBuilder(ImFontGlyphRangesBuilder _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImFontGlyphRangesBuilder.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImFontGlyphRangesBuilder()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                if (Environment.Is64BitProcess)
                {
                    __Internal64.dtor(__Instance);
                }
                else
                {
                    __Internal32.dtor(__Instance);
                }

            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2960"/></summary>
        // DEBUG: inline void     Clear()                 { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1) / 8; UsedChars.resize(size_in_bytes / (int)sizeof(ImU32)); memset(UsedChars.Data, 0, (size_t)size_in_bytes); }
        public void Clear()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Clear(__Instance);
            }
            else
            {
                __Internal32.Clear(__Instance);
            }
        }

        /// <summary>Get bit n in the array.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2961"/></summary>
        // DEBUG: inline bool     GetBit(size_t n) const  { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 31); return (UsedChars[off] & mask) != 0; }
        public bool GetBit(UIntPtr n)
        {
            var __arg0 = n
            /* DEBUG: TypeMapSizeT.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetBit(__Instance, __arg0) : __Internal32.GetBit(__Instance, __arg0);
            return ___ret;
        }

        /// <summary>Set bit n in the array.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2962"/></summary>
        // DEBUG: inline void     SetBit(size_t n)        { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 31); UsedChars[off] |= mask; }
        public void SetBit(UIntPtr n)
        {
            var __arg0 = n
            /* DEBUG: TypeMapSizeT.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetBit(__Instance, __arg0);
            }
            else
            {
                __Internal32.SetBit(__Instance, __arg0);
            }
        }

        /// <summary>Add character.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2963"/></summary>
        // DEBUG: inline void     AddChar(ImWchar c)      { SetBit(c); }
        public void AddChar(ushort c)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.AddChar(__Instance, c);
            }
            else
            {
                __Internal32.AddChar(__Instance, c);
            }
        }

        /// <summary>Add string (each character of the UTF-8 string are added).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2964"/></summary>
        // DEBUG: void  AddText(const char* text, const char* text_end = NULL)
        public void AddText(string text, string text_end = default)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.AddText(__Instance, text, text_end);
            }
            else
            {
                __Internal32.AddText(__Instance, text, text_end);
            }
        }

        /// <summary>Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCII/Latin+Ext.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2965"/></summary>
        // DEBUG: void  AddRanges(const ImWchar* ranges)
        public void AddRanges(ref ushort ranges)
        {
            fixed (ushort* __ranges0 = &ranges)
            {
                var __arg0 = __ranges0;
                if (Environment.Is64BitProcess)
                {
                    __Internal64.AddRanges(__Instance, __arg0);
                }
                else
                {
                    __Internal32.AddRanges(__Instance, __arg0);
                }
            }
        }

        /// <summary>Output new ranges.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2966"/></summary>
        // DEBUG: void  BuildRanges(ImVector<ImWchar>* out_ranges)
        public void BuildRanges(ImVector<ushort> out_ranges)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref out_ranges))
            /* DEBUG: TypeMapImVector.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.BuildRanges(__Instance, __arg0);
            }
            else
            {
                __Internal32.BuildRanges(__Instance, __arg0);
            }
        }

        /// <summary>Store 1-bit per Unicode code point (0=unused, 1=used).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2957"/></summary>
        public ImVector<uint> UsedChars
        {
            get
            {
                return new ImVector<uint>(Unsafe.As<ImVector.__Internal, ImVector<uint>.__Internal>(ref ((__Internal*)__Instance)->UsedChars))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }
    }

    /// <summary>See ImFontAtlas::AddCustomRectXXX functions.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2970"/></summary>
    // DEBUG: struct ImFontAtlasCustomRect
    // DEBUG: {
    // DEBUG:     unsigned short  Width, Height;  // Input    // Desired rectangle dimension
    // DEBUG:     unsigned short  X, Y;           // Output   // Packed position in Atlas
    // DEBUG:     unsigned int    GlyphID;        // Input    // For custom font glyphs only (ID < 0x110000)
    // DEBUG:     float           GlyphAdvanceX;  // Input    // For custom font glyphs only: glyph xadvance
    // DEBUG:     ImVec2          GlyphOffset;    // Input    // For custom font glyphs only: glyph display offset
    // DEBUG:     ImFont*         Font;           // Input    // For custom font glyphs only: target font
    // DEBUG:     ImFontAtlasCustomRect()         { Width = Height = 0; X = Y = 0xFFFF; GlyphID = 0; GlyphAdvanceX = 0.0f; GlyphOffset = ImVec2(0, 0); Font = NULL; }
    // DEBUG:     bool IsPacked() const           { return X != 0xFFFF; }
    // DEBUG: }
    public unsafe partial class ImFontAtlasCustomRect : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal ushort Width;
            internal ushort Height;
            internal ushort X;
            internal ushort Y;
            internal uint GlyphID;
            internal float GlyphAdvanceX;
            internal Vector2 GlyphOffset;
            internal IntPtr Font;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontAtlasCustomRect@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontAtlasCustomRect@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsPacked@ImFontAtlasCustomRect@@QBE_NXZ", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPacked(IntPtr __instance);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontAtlasCustomRect@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontAtlasCustomRect@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPacked(IntPtr __instance);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImFontAtlasCustomRect>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImFontAtlasCustomRect>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImFontAtlasCustomRect managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImFontAtlasCustomRect>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImFontAtlasCustomRect managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImFontAtlasCustomRect __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImFontAtlasCustomRect(native.ToPointer(), skipVTables);
        }

        internal static ImFontAtlasCustomRect __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImFontAtlasCustomRect)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImFontAtlasCustomRect __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImFontAtlasCustomRect(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImFontAtlasCustomRect(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImFontAtlasCustomRect(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2978"/></summary>
        // DEBUG: ImFontAtlasCustomRect()         { Width = Height = 0; X = Y = 0xFFFF; GlyphID = 0; GlyphAdvanceX = 0.0f; GlyphOffset = ImVec2(0, 0); Font = NULL; }
        public ImFontAtlasCustomRect()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImFontAtlasCustomRect.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>See ImFontAtlas::AddCustomRectXXX functions.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2970"/></summary>
        // DEBUG: ImFontAtlasCustomRect
        public ImFontAtlasCustomRect(ImFontAtlasCustomRect _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImFontAtlasCustomRect.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImFontAtlasCustomRect()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Input.<br/>Desired rectangle dimension.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2972"/></summary>
        public ushort Width
        {
            get
            {
                return ((__Internal*)__Instance)->Width;
            }

            set
            {
                ((__Internal*)__Instance)->Width = value;
            }
        }

        /// <summary>Input.<br/>Desired rectangle dimension.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2972"/></summary>
        public ushort Height
        {
            get
            {
                return ((__Internal*)__Instance)->Height;
            }

            set
            {
                ((__Internal*)__Instance)->Height = value;
            }
        }

        /// <summary>Output.<br/>Packed position in Atlas.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2973"/></summary>
        public ushort X
        {
            get
            {
                return ((__Internal*)__Instance)->X;
            }

            set
            {
                ((__Internal*)__Instance)->X = value;
            }
        }

        /// <summary>Output.<br/>Packed position in Atlas.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2973"/></summary>
        public ushort Y
        {
            get
            {
                return ((__Internal*)__Instance)->Y;
            }

            set
            {
                ((__Internal*)__Instance)->Y = value;
            }
        }

        /// <summary>Input.<br/>For custom font glyphs only (ID &lt; 0x110000).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2974"/></summary>
        public uint GlyphID
        {
            get
            {
                return ((__Internal*)__Instance)->GlyphID;
            }

            set
            {
                ((__Internal*)__Instance)->GlyphID = value;
            }
        }

        /// <summary>Input.<br/>For custom font glyphs only: glyph xadvance.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2975"/></summary>
        public float GlyphAdvanceX
        {
            get
            {
                return ((__Internal*)__Instance)->GlyphAdvanceX;
            }

            set
            {
                ((__Internal*)__Instance)->GlyphAdvanceX = value;
            }
        }

        /// <summary>Input.<br/>For custom font glyphs only: glyph display offset.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2976"/></summary>
        public Vector2 GlyphOffset
        {
            get
            {
                return ((__Internal*)__Instance)->GlyphOffset
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->GlyphOffset = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Input.<br/>For custom font glyphs only: target font.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L2977"/></summary>
        public ImFont Font
        {
            get
            {
                var __result0 = ImFont.__GetOrCreateInstance(((__Internal*)__Instance)->Font, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->Font = value is null ? IntPtr.Zero : value.__Instance;
            }
        }
    }

    /// <summary>Load and rasterize multiple TTF/OTF fonts into a same texture. The font atlas will build a single texture holding:.<br/>- One or more fonts.<br/>- Custom graphics data needed to render the shapes needed by Dear ImGui.<br/>- Mouse cursor shapes for software cursor rendering (unless setting 'Flags |= ImFontAtlasFlags_NoMouseCursors' in the font atlas).<br/>It is the user-code responsibility to setup/build the atlas, then upload the pixel data into a texture accessible by your graphics api.<br/>- Optionally, call any of the AddFont*** functions. If you don't call any, the default font embedded in the code will be loaded for you.<br/>- Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.<br/>- Upload the pixels data into a texture within your graphics system (see imgui_impl_xxxx.cpp examples).<br/>- Call SetTexID(my_tex_id); and pass the pointer/identifier to your texture in a format natural to your graphics API.<br/>This value will be passed back to you during rendering to identify the texture. Read FAQ entry about ImTextureID for more details.<br/>Common pitfalls:.<br/>- If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the.<br/>Atlas is build (when calling GetTexData*** or Build()). We only copy the pointer, not the data.<br/>- Important: By default, AddFontFromMemoryTTF() takes ownership of the data. Even though we are not writing to it, we will free the pointer on destruction.<br/>You can set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed,.<br/>- Even though many functions are suffixed with "TTF", OTF data is supported just as well.<br/>- This is an old API and it is currently awkward for those and various other reasons! We will address them in the future!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3008"/></summary>
    // DEBUG: struct ImFontAtlas
    // DEBUG: {
    // DEBUG:     IMGUI_API ImFontAtlas();
    // DEBUG:     IMGUI_API ~ImFontAtlas();
    // DEBUG:     IMGUI_API ImFont*           AddFont(const ImFontConfig* font_cfg);
    // DEBUG:     IMGUI_API ImFont*           AddFontDefault(const ImFontConfig* font_cfg = NULL);
    // DEBUG:     IMGUI_API ImFont*           AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);
    // DEBUG:     IMGUI_API ImFont*           AddFontFromMemoryTTF(void* font_data, int font_data_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.
    // DEBUG:     IMGUI_API ImFont*           AddFontFromMemoryCompressedTTF(const void* compressed_font_data, int compressed_font_data_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.
    // DEBUG:     IMGUI_API ImFont*           AddFontFromMemoryCompressedBase85TTF(const char* compressed_font_data_base85, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);              // 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.
    // DEBUG:     IMGUI_API void              ClearInputData();           // Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts.
    // DEBUG:     IMGUI_API void              ClearTexData();             // Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory.
    // DEBUG:     IMGUI_API void              ClearFonts();               // Clear output font data (glyphs storage, UV coordinates).
    // DEBUG:     IMGUI_API void              Clear();                    // Clear all input and output.
    // DEBUG: 
    // DEBUG:     // Build atlas, retrieve pixel data.
    // DEBUG:     // User is in charge of copying the pixels into graphics memory (e.g. create a texture with your engine). Then store your texture handle with SetTexID().
    // DEBUG:     // The pitch is always = Width * BytesPerPixels (1 or 4)
    // DEBUG:     // Building in RGBA32 format is provided for convenience and compatibility, but note that unless you manually manipulate or copy color data into
    // DEBUG:     // the texture (e.g. when using the AddCustomRect*** api), then the RGB pixels emitted will always be white (~75% of memory/bandwidth waste.
    // DEBUG:     IMGUI_API bool              Build();                    // Build pixels data. This is called automatically for you by the GetTexData*** functions.
    // DEBUG:     IMGUI_API void              GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 1 byte per-pixel
    // DEBUG:     IMGUI_API void              GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 4 bytes-per-pixel
    // DEBUG:     bool                        IsBuilt() const             { return Fonts.Size > 0 && TexReady; } // Bit ambiguous: used to detect when user didn't build texture but effectively we should check TexID != 0 except that would be backend dependent...
    // DEBUG:     void                        SetTexID(ImTextureID id)    { TexID = id; }
    // DEBUG: 
    // DEBUG:     //-------------------------------------------
    // DEBUG:     // Glyph Ranges
    // DEBUG:     //-------------------------------------------
    // DEBUG: 
    // DEBUG:     // Helpers to retrieve list of common Unicode ranges (2 value per range, values are inclusive, zero-terminated list)
    // DEBUG:     // NB: Make sure that your string are UTF-8 and NOT in your local code page.
    // DEBUG:     // Read https://github.com/ocornut/imgui/blob/master/docs/FONTS.md/#about-utf-8-encoding for details.
    // DEBUG:     // NB: Consider using ImFontGlyphRangesBuilder to build glyph ranges from textual data.
    // DEBUG:     IMGUI_API const ImWchar*    GetGlyphRangesDefault();                // Basic Latin, Extended Latin
    // DEBUG:     IMGUI_API const ImWchar*    GetGlyphRangesGreek();                  // Default + Greek and Coptic
    // DEBUG:     IMGUI_API const ImWchar*    GetGlyphRangesKorean();                 // Default + Korean characters
    // DEBUG:     IMGUI_API const ImWchar*    GetGlyphRangesJapanese();               // Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs
    // DEBUG:     IMGUI_API const ImWchar*    GetGlyphRangesChineseFull();            // Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs
    // DEBUG:     IMGUI_API const ImWchar*    GetGlyphRangesChineseSimplifiedCommon();// Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese
    // DEBUG:     IMGUI_API const ImWchar*    GetGlyphRangesCyrillic();               // Default + about 400 Cyrillic characters
    // DEBUG:     IMGUI_API const ImWchar*    GetGlyphRangesThai();                   // Default + Thai characters
    // DEBUG:     IMGUI_API const ImWchar*    GetGlyphRangesVietnamese();             // Default + Vietnamese characters
    // DEBUG: 
    // DEBUG:     //-------------------------------------------
    // DEBUG:     // [BETA] Custom Rectangles/Glyphs API
    // DEBUG:     //-------------------------------------------
    // DEBUG: 
    // DEBUG:     // You can request arbitrary rectangles to be packed into the atlas, for your own purposes.
    // DEBUG:     // - After calling Build(), you can query the rectangle position and render your pixels.
    // DEBUG:     // - If you render colored output, set 'atlas->TexPixelsUseColors = true' as this may help some backends decide of prefered texture format.
    // DEBUG:     // - You can also request your rectangles to be mapped as font glyph (given a font + Unicode point),
    // DEBUG:     //   so you can render e.g. custom colorful icons and use them as regular glyphs.
    // DEBUG:     // - Read docs/FONTS.md for more details about using colorful icons.
    // DEBUG:     // - Note: this API may be redesigned later in order to support multi-monitor varying DPI settings.
    // DEBUG:     IMGUI_API int               AddCustomRectRegular(int width, int height);
    // DEBUG:     IMGUI_API int               AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float advance_x, const ImVec2& offset = ImVec2(0, 0));
    // DEBUG:     ImFontAtlasCustomRect*      GetCustomRectByIndex(int index) { IM_ASSERT(index >= 0); return &CustomRects[index]; }
    // DEBUG: 
    // DEBUG:     // [Internal]
    // DEBUG:     IMGUI_API void              CalcCustomRectUV(const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max) const;
    // DEBUG:     IMGUI_API bool              GetMouseCursorTexData(ImGuiMouseCursor cursor, ImVec2* out_offset, ImVec2* out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2]);
    // DEBUG: 
    // DEBUG:     //-------------------------------------------
    // DEBUG:     // Members
    // DEBUG:     //-------------------------------------------
    // DEBUG: 
    // DEBUG:     ImFontAtlasFlags            Flags;              // Build flags (see ImFontAtlasFlags_)
    // DEBUG:     ImTextureID                 TexID;              // User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.
    // DEBUG:     int                         TexDesiredWidth;    // Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.
    // DEBUG:     int                         TexGlyphPadding;    // Padding between glyphs within texture in pixels. Defaults to 1. If your rendering method doesn't rely on bilinear filtering you may set this to 0 (will also need to set AntiAliasedLinesUseTex = false).
    // DEBUG:     bool                        Locked;             // Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.
    // DEBUG:     void*                       UserData;           // Store your own atlas related user-data (if e.g. you have multiple font atlas).
    // DEBUG: 
    // DEBUG:     // [Internal]
    // DEBUG:     // NB: Access texture data via GetTexData*() calls! Which will setup a default font for you.
    // DEBUG:     bool                        TexReady;           // Set when texture was built matching current font input
    // DEBUG:     bool                        TexPixelsUseColors; // Tell whether our texture data is known to use colors (rather than just alpha channel), in order to help backend select a format.
    // DEBUG:     unsigned char*              TexPixelsAlpha8;    // 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight
    // DEBUG:     unsigned int*               TexPixelsRGBA32;    // 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4
    // DEBUG:     int                         TexWidth;           // Texture width calculated during Build().
    // DEBUG:     int                         TexHeight;          // Texture height calculated during Build().
    // DEBUG:     ImVec2                      TexUvScale;         // = (1.0f/TexWidth, 1.0f/TexHeight)
    // DEBUG:     ImVec2                      TexUvWhitePixel;    // Texture coordinates to a white pixel
    // DEBUG:     ImVector<ImFont*>           Fonts;              // Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font.
    // DEBUG:     ImVector<ImFontAtlasCustomRect> CustomRects;    // Rectangles for packing custom texture data into the atlas.
    // DEBUG:     ImVector<ImFontConfig>      ConfigData;         // Configuration data
    // DEBUG:     ImVec4                      TexUvLines[IM_DRAWLIST_TEX_LINES_WIDTH_MAX + 1];  // UVs for baked anti-aliased lines
    // DEBUG: 
    // DEBUG:     // [Internal] Font builder
    // DEBUG:     const ImFontBuilderIO*      FontBuilderIO;      // Opaque interface to a font builder (default to stb_truetype, can be changed to use FreeType by defining IMGUI_ENABLE_FREETYPE).
    // DEBUG:     unsigned int                FontBuilderFlags;   // Shared flags (for all fonts) for custom font builder. THIS IS BUILD IMPLEMENTATION DEPENDENT. Per-font override is also available in ImFontConfig.
    // DEBUG: 
    // DEBUG:     // [Internal] Packing data
    // DEBUG:     int                         PackIdMouseCursors; // Custom texture rectangle ID for white pixel and mouse cursors
    // DEBUG:     int                         PackIdLines;        // Custom texture rectangle ID for baked anti-aliased lines
    // DEBUG: 
    // DEBUG:     // [Obsolete]
    // DEBUG:     //typedef ImFontAtlasCustomRect    CustomRect;         // OBSOLETED in 1.72+
    // DEBUG:     //typedef ImFontGlyphRangesBuilder GlyphRangesBuilder; // OBSOLETED in 1.67+
    // DEBUG: }
    public unsafe partial class ImFontAtlas : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal ImFontAtlasFlags Flags;
            internal IntPtr TexID;
            internal int TexDesiredWidth;
            internal int TexGlyphPadding;
            internal byte Locked;
            internal IntPtr UserData;
            internal byte TexReady;
            internal byte TexPixelsUseColors;
            internal IntPtr TexPixelsAlpha8;
            internal IntPtr TexPixelsRGBA32;
            internal int TexWidth;
            internal int TexHeight;
            internal Vector2 TexUvScale;
            internal Vector2 TexUvWhitePixel;
            internal ImVector.__Internal Fonts;
            internal ImVector.__Internal CustomRects;
            internal ImVector.__Internal ConfigData;
            internal fixed byte TexUvLines[1024];
            internal IntPtr FontBuilderIO;
            internal uint FontBuilderFlags;
            internal int PackIdMouseCursors;
            internal int PackIdLines;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontAtlas@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontAtlas@@QAE@ABU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImFontAtlas@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddFont@ImFontAtlas@@QAEPAUImFont@@PBUImFontConfig@@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr AddFont(IntPtr __instance, IntPtr font_cfg);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddFontDefault@ImFontAtlas@@QAEPAUImFont@@PBUImFontConfig@@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr AddFontDefault(IntPtr __instance, IntPtr font_cfg);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddFontFromFileTTF@ImFontAtlas@@QAEPAUImFont@@PBDMPBUImFontConfig@@PBG@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr AddFontFromFileTTF(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename, float size_pixels, IntPtr font_cfg, ushort* glyph_ranges);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddFontFromMemoryTTF@ImFontAtlas@@QAEPAUImFont@@PAXHMPBUImFontConfig@@PBG@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr AddFontFromMemoryTTF(IntPtr __instance, IntPtr font_data, int font_data_size, float size_pixels, IntPtr font_cfg, ushort* glyph_ranges);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QAEPAUImFont@@PBXHMPBUImFontConfig@@PBG@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr AddFontFromMemoryCompressedTTF(IntPtr __instance, IntPtr compressed_font_data, int compressed_font_data_size, float size_pixels, IntPtr font_cfg, ushort* glyph_ranges);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QAEPAUImFont@@PBDMPBUImFontConfig@@PBG@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr AddFontFromMemoryCompressedBase85TTF(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string compressed_font_data_base85, float size_pixels, IntPtr font_cfg, ushort* glyph_ranges);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearInputData@ImFontAtlas@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void ClearInputData(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearTexData@ImFontAtlas@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void ClearTexData(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearFonts@ImFontAtlas@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void ClearFonts(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Clear@ImFontAtlas@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Build@ImFontAtlas@@QAE_NXZ", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Build(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetTexDataAsAlpha8@ImFontAtlas@@QAEXPAPAEPAH11@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void GetTexDataAsAlpha8(IntPtr __instance, byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetTexDataAsRGBA32@ImFontAtlas@@QAEXPAPAEPAH11@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void GetTexDataAsRGBA32(IntPtr __instance, byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddCustomRectRegular@ImFontAtlas@@QAEHHH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern int AddCustomRectRegular(IntPtr __instance, int width, int height);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddCustomRectFontGlyph@ImFontAtlas@@QAEHPAUImFont@@GHHMABUImVec2@@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern int AddCustomRectFontGlyph(IntPtr __instance, IntPtr font, ushort id, int width, int height, float advance_x, IntPtr offset);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCustomRectByIndex@ImFontAtlas@@QAEPAUImFontAtlasCustomRect@@H@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr GetCustomRectByIndex(IntPtr __instance, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CalcCustomRectUV@ImFontAtlas@@QBEXPBUImFontAtlasCustomRect@@PAUImVec2@@1@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void CalcCustomRectUV(IntPtr __instance, IntPtr rect, IntPtr out_uv_min, IntPtr out_uv_max);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetMouseCursorTexData@ImFontAtlas@@QAE_NHPAUImVec2@@0QAU2@1@Z", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetMouseCursorTexData(IntPtr __instance, ImGuiMouseCursor cursor, IntPtr out_offset, IntPtr out_size, Vector2* out_uv_border, Vector2* out_uv_fill);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsBuilt@ImFontAtlas@@QBE_NXZ", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsBuilt(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesDefault@ImFontAtlas@@QAEPBGXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern ushort* GetGlyphRangesDefault(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesGreek@ImFontAtlas@@QAEPBGXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern ushort* GetGlyphRangesGreek(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesKorean@ImFontAtlas@@QAEPBGXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern ushort* GetGlyphRangesKorean(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesJapanese@ImFontAtlas@@QAEPBGXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern ushort* GetGlyphRangesJapanese(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesChineseFull@ImFontAtlas@@QAEPBGXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern ushort* GetGlyphRangesChineseFull(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QAEPBGXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern ushort* GetGlyphRangesChineseSimplifiedCommon(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesCyrillic@ImFontAtlas@@QAEPBGXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern ushort* GetGlyphRangesCyrillic(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesThai@ImFontAtlas@@QAEPBGXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern ushort* GetGlyphRangesThai(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesVietnamese@ImFontAtlas@@QAEPBGXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern ushort* GetGlyphRangesVietnamese(IntPtr __instance);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontAtlas@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFontAtlas@@QEAA@AEBU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImFontAtlas@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr AddFont(IntPtr __instance, IntPtr font_cfg);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr AddFontDefault(IntPtr __instance, IntPtr font_cfg);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr AddFontFromFileTTF(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename, float size_pixels, IntPtr font_cfg, ushort* glyph_ranges);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr AddFontFromMemoryTTF(IntPtr __instance, IntPtr font_data, int font_data_size, float size_pixels, IntPtr font_cfg, ushort* glyph_ranges);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr AddFontFromMemoryCompressedTTF(IntPtr __instance, IntPtr compressed_font_data, int compressed_font_data_size, float size_pixels, IntPtr font_cfg, ushort* glyph_ranges);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr AddFontFromMemoryCompressedBase85TTF(IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string compressed_font_data_base85, float size_pixels, IntPtr font_cfg, ushort* glyph_ranges);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearInputData@ImFontAtlas@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ClearInputData(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearTexData@ImFontAtlas@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ClearTexData(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearFonts@ImFontAtlas@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ClearFonts(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Clear@ImFontAtlas@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Clear(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Build@ImFontAtlas@@QEAA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Build(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetTexDataAsAlpha8(IntPtr __instance, byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetTexDataAsRGBA32(IntPtr __instance, byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int AddCustomRectRegular(IntPtr __instance, int width, int height);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int AddCustomRectFontGlyph(IntPtr __instance, IntPtr font, ushort id, int width, int height, float advance_x, IntPtr offset);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetCustomRectByIndex(IntPtr __instance, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void CalcCustomRectUV(IntPtr __instance, IntPtr rect, IntPtr out_uv_min, IntPtr out_uv_max);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetMouseCursorTexData(IntPtr __instance, ImGuiMouseCursor cursor, IntPtr out_offset, IntPtr out_size, Vector2* out_uv_border, Vector2* out_uv_fill);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsBuilt@ImFontAtlas@@QEBA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsBuilt(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern ushort* GetGlyphRangesDefault(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesGreek@ImFontAtlas@@QEAAPEBGXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern ushort* GetGlyphRangesGreek(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern ushort* GetGlyphRangesKorean(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern ushort* GetGlyphRangesJapanese(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern ushort* GetGlyphRangesChineseFull(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern ushort* GetGlyphRangesChineseSimplifiedCommon(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern ushort* GetGlyphRangesCyrillic(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern ushort* GetGlyphRangesThai(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern ushort* GetGlyphRangesVietnamese(IntPtr __instance);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImFontAtlas>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImFontAtlas>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImFontAtlas managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImFontAtlas>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImFontAtlas managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImFontAtlas __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImFontAtlas(native.ToPointer(), skipVTables);
        }

        internal static ImFontAtlas __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImFontAtlas)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImFontAtlas __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImFontAtlas(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            if (Environment.Is64BitProcess)
            {
                ImFontAtlas.__Internal64.cctor(ret, new IntPtr(&native));
            }
            else
            {
                ImFontAtlas.__Internal32.cctor(ret, new IntPtr(&native));
            }

            return ret.ToPointer();
        }

        private ImFontAtlas(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImFontAtlas(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3010"/></summary>
        // DEBUG: ImFontAtlas()
        public ImFontAtlas()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImFontAtlas.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>Load and rasterize multiple TTF/OTF fonts into a same texture. The font atlas will build a single texture holding:.<br/>- One or more fonts.<br/>- Custom graphics data needed to render the shapes needed by Dear ImGui.<br/>- Mouse cursor shapes for software cursor rendering (unless setting 'Flags |= ImFontAtlasFlags_NoMouseCursors' in the font atlas).<br/>It is the user-code responsibility to setup/build the atlas, then upload the pixel data into a texture accessible by your graphics api.<br/>- Optionally, call any of the AddFont*** functions. If you don't call any, the default font embedded in the code will be loaded for you.<br/>- Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.<br/>- Upload the pixels data into a texture within your graphics system (see imgui_impl_xxxx.cpp examples).<br/>- Call SetTexID(my_tex_id); and pass the pointer/identifier to your texture in a format natural to your graphics API.<br/>This value will be passed back to you during rendering to identify the texture. Read FAQ entry about ImTextureID for more details.<br/>Common pitfalls:.<br/>- If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the.<br/>Atlas is build (when calling GetTexData*** or Build()). We only copy the pointer, not the data.<br/>- Important: By default, AddFontFromMemoryTTF() takes ownership of the data. Even though we are not writing to it, we will free the pointer on destruction.<br/>You can set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed,.<br/>- Even though many functions are suffixed with "TTF", OTF data is supported just as well.<br/>- This is an old API and it is currently awkward for those and various other reasons! We will address them in the future!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3008"/></summary>
        // DEBUG: ImFontAtlas
        public ImFontAtlas(ImFontAtlas _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImFontAtlas.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.cctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.cctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImFontAtlas()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                if (Environment.Is64BitProcess)
                {
                    __Internal64.dtor(__Instance);
                }
                else
                {
                    __Internal32.dtor(__Instance);
                }

            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3012"/></summary>
        // DEBUG: ImFont*           AddFont(const ImFontConfig* font_cfg)
        public ImFont AddFont(ImFontConfig font_cfg)
        {
            var __arg0 = font_cfg is null ? IntPtr.Zero : font_cfg.__Instance;
            var ___ret = Environment.Is64BitProcess ? __Internal64.AddFont(__Instance, __arg0) : __Internal32.AddFont(__Instance, __arg0);
            var __result0 = ImFont.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3013"/></summary>
        // DEBUG: ImFont*           AddFontDefault(const ImFontConfig* font_cfg = NULL)
        public ImFont AddFontDefault(ImFontConfig font_cfg = default)
        {
            var __arg0 = font_cfg is null ? IntPtr.Zero : font_cfg.__Instance;
            var ___ret = Environment.Is64BitProcess ? __Internal64.AddFontDefault(__Instance, __arg0) : __Internal32.AddFontDefault(__Instance, __arg0);
            var __result0 = ImFont.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3014"/></summary>
        // DEBUG: ImFont*           AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL)
        public ImFont AddFontFromFileTTF(string filename, float size_pixels, ImFontConfig font_cfg, ref ushort glyph_ranges)
        {
            var __arg2 = font_cfg is null ? IntPtr.Zero : font_cfg.__Instance;
            fixed (ushort* __glyph_ranges3 = &glyph_ranges)
            {
                var __arg3 = __glyph_ranges3;
                var ___ret = Environment.Is64BitProcess ? __Internal64.AddFontFromFileTTF(__Instance, filename, size_pixels, __arg2, __arg3) : __Internal32.AddFontFromFileTTF(__Instance, filename, size_pixels, __arg2, __arg3);
                var __result0 = ImFont.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        /// <summary>Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3015"/></summary>
        // DEBUG: ImFont*           AddFontFromMemoryTTF(void* font_data, int font_data_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL)
        public ImFont AddFontFromMemoryTTF(IntPtr font_data, int font_data_size, float size_pixels, ImFontConfig font_cfg, ref ushort glyph_ranges)
        {
            var __arg3 = font_cfg is null ? IntPtr.Zero : font_cfg.__Instance;
            fixed (ushort* __glyph_ranges4 = &glyph_ranges)
            {
                var __arg4 = __glyph_ranges4;
                var ___ret = Environment.Is64BitProcess ? __Internal64.AddFontFromMemoryTTF(__Instance, font_data, font_data_size, size_pixels, __arg3, __arg4) : __Internal32.AddFontFromMemoryTTF(__Instance, font_data, font_data_size, size_pixels, __arg3, __arg4);
                var __result0 = ImFont.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        /// <summary>'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3016"/></summary>
        // DEBUG: ImFont*           AddFontFromMemoryCompressedTTF(const void* compressed_font_data, int compressed_font_data_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL)
        public ImFont AddFontFromMemoryCompressedTTF(IntPtr compressed_font_data, int compressed_font_data_size, float size_pixels, ImFontConfig font_cfg, ref ushort glyph_ranges)
        {
            var __arg3 = font_cfg is null ? IntPtr.Zero : font_cfg.__Instance;
            fixed (ushort* __glyph_ranges4 = &glyph_ranges)
            {
                var __arg4 = __glyph_ranges4;
                var ___ret = Environment.Is64BitProcess ? __Internal64.AddFontFromMemoryCompressedTTF(__Instance, compressed_font_data, compressed_font_data_size, size_pixels, __arg3, __arg4) : __Internal32.AddFontFromMemoryCompressedTTF(__Instance, compressed_font_data, compressed_font_data_size, size_pixels, __arg3, __arg4);
                var __result0 = ImFont.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        /// <summary>'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3017"/></summary>
        // DEBUG: ImFont*           AddFontFromMemoryCompressedBase85TTF(const char* compressed_font_data_base85, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL)
        public ImFont AddFontFromMemoryCompressedBase85TTF(string compressed_font_data_base85, float size_pixels, ImFontConfig font_cfg, ref ushort glyph_ranges)
        {
            var __arg2 = font_cfg is null ? IntPtr.Zero : font_cfg.__Instance;
            fixed (ushort* __glyph_ranges3 = &glyph_ranges)
            {
                var __arg3 = __glyph_ranges3;
                var ___ret = Environment.Is64BitProcess ? __Internal64.AddFontFromMemoryCompressedBase85TTF(__Instance, compressed_font_data_base85, size_pixels, __arg2, __arg3) : __Internal32.AddFontFromMemoryCompressedBase85TTF(__Instance, compressed_font_data_base85, size_pixels, __arg2, __arg3);
                var __result0 = ImFont.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        /// <summary>Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3018"/></summary>
        // DEBUG: void              ClearInputData()
        public void ClearInputData()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.ClearInputData(__Instance);
            }
            else
            {
                __Internal32.ClearInputData(__Instance);
            }
        }

        /// <summary>Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3019"/></summary>
        // DEBUG: void              ClearTexData()
        public void ClearTexData()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.ClearTexData(__Instance);
            }
            else
            {
                __Internal32.ClearTexData(__Instance);
            }
        }

        /// <summary>Clear output font data (glyphs storage, UV coordinates).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3020"/></summary>
        // DEBUG: void              ClearFonts()
        public void ClearFonts()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.ClearFonts(__Instance);
            }
            else
            {
                __Internal32.ClearFonts(__Instance);
            }
        }

        /// <summary>Clear all input and output.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3021"/></summary>
        // DEBUG: void              Clear()
        public void Clear()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Clear(__Instance);
            }
            else
            {
                __Internal32.Clear(__Instance);
            }
        }

        /// <summary>Build pixels data. This is called automatically for you by the GetTexData*** functions.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3028"/></summary>
        // DEBUG: bool              Build()
        public bool Build()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.Build(__Instance) : __Internal32.Build(__Instance);
            return ___ret;
        }

        /// <summary>1 byte per-pixel.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3029"/></summary>
        // DEBUG: void              GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL)
        public void GetTexDataAsAlpha8(byte** out_pixels, ref int out_width, ref int out_height, ref int out_bytes_per_pixel)
        {
            fixed (int* __out_width1 = &out_width)
            {
                var __arg1 = __out_width1;
                fixed (int* __out_height2 = &out_height)
                {
                    var __arg2 = __out_height2;
                    fixed (int* __out_bytes_per_pixel3 = &out_bytes_per_pixel)
                    {
                        var __arg3 = __out_bytes_per_pixel3;
                        if (Environment.Is64BitProcess)
                        {
                            __Internal64.GetTexDataAsAlpha8(__Instance, out_pixels, __arg1, __arg2, __arg3);
                        }
                        else
                        {
                            __Internal32.GetTexDataAsAlpha8(__Instance, out_pixels, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        /// <summary>4 bytes-per-pixel.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3030"/></summary>
        // DEBUG: void              GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL)
        public void GetTexDataAsRGBA32(byte** out_pixels, ref int out_width, ref int out_height, ref int out_bytes_per_pixel)
        {
            fixed (int* __out_width1 = &out_width)
            {
                var __arg1 = __out_width1;
                fixed (int* __out_height2 = &out_height)
                {
                    var __arg2 = __out_height2;
                    fixed (int* __out_bytes_per_pixel3 = &out_bytes_per_pixel)
                    {
                        var __arg3 = __out_bytes_per_pixel3;
                        if (Environment.Is64BitProcess)
                        {
                            __Internal64.GetTexDataAsRGBA32(__Instance, out_pixels, __arg1, __arg2, __arg3);
                        }
                        else
                        {
                            __Internal32.GetTexDataAsRGBA32(__Instance, out_pixels, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        /// <summary>You can request arbitrary rectangles to be packed into the atlas, for your own purposes.<br/>- After calling Build(), you can query the rectangle position and render your pixels.<br/>- If you render colored output, set 'atlas-&gt;TexPixelsUseColors = true' as this may help some backends decide of prefered texture format.<br/>- You can also request your rectangles to be mapped as font glyph (given a font + Unicode point),.<br/>So you can render e.g. custom colorful icons and use them as regular glyphs.<br/>- Read docs/FONTS.md for more details about using colorful icons.<br/>- Note: this API may be redesigned later in order to support multi-monitor varying DPI settings.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3063"/></summary>
        // DEBUG: int               AddCustomRectRegular(int width, int height)
        public int AddCustomRectRegular(int width, int height)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.AddCustomRectRegular(__Instance, width, height) : __Internal32.AddCustomRectRegular(__Instance, width, height);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3064"/></summary>
        // DEBUG: int               AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float advance_x, const ImVec2& offset = ImVec2(0, 0))
        public int AddCustomRectFontGlyph(ImFont font, ushort id, int width, int height, float advance_x, Vector2 offset)
        {
            var __arg0 = font is null ? IntPtr.Zero : font.__Instance;
            var __arg5 = new IntPtr(Unsafe.AsPointer(ref offset))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.AddCustomRectFontGlyph(__Instance, __arg0, id, width, height, advance_x, __arg5) : __Internal32.AddCustomRectFontGlyph(__Instance, __arg0, id, width, height, advance_x, __arg5);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3065"/></summary>
        // DEBUG: ImFontAtlasCustomRect*      GetCustomRectByIndex(int index) { IM_ASSERT(index >= 0); return &CustomRects[index]; }
        public ImFontAtlasCustomRect GetCustomRectByIndex(int index)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetCustomRectByIndex(__Instance, index) : __Internal32.GetCustomRectByIndex(__Instance, index);
            var __result0 = ImFontAtlasCustomRect.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>[Internal].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3068"/></summary>
        // DEBUG: void              CalcCustomRectUV(const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max) const
        public void CalcCustomRectUV(ImFontAtlasCustomRect rect, Vector2 out_uv_min, Vector2 out_uv_max)
        {
            var __arg0 = rect is null ? IntPtr.Zero : rect.__Instance;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref out_uv_min))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref out_uv_max))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.CalcCustomRectUV(__Instance, __arg0, __arg1, __arg2);
            }
            else
            {
                __Internal32.CalcCustomRectUV(__Instance, __arg0, __arg1, __arg2);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3069"/></summary>
        // DEBUG: bool              GetMouseCursorTexData(ImGuiMouseCursor cursor, ImVec2* out_offset, ImVec2* out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2])
        public bool GetMouseCursorTexData(ImGuiMouseCursor cursor, Vector2 out_offset, Vector2 out_size, Span<Vector2> out_uv_border, Span<Vector2> out_uv_fill)
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref out_offset))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref out_size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (out_uv_border == null || out_uv_border.Length != 2)
                throw new ArgumentOutOfRangeException("out_uv_border", "The dimensions of the provided array don't match the required size.");
            Span<Vector2> __out_uv_border;
            if (out_uv_border == null)
                __out_uv_border = null;
            else
            {
                __out_uv_border = new Vector2[out_uv_border.Length];
                for (int i = 0; i < __out_uv_border.Length; i++)
                {
                    var __element = out_uv_border[i];
                    __out_uv_border[i] = __element;
                }
            }

            fixed (Vector2* ____out_uv_border3 = &MemoryMarshal.GetReference(__out_uv_border))
            {
                var __arg3 = ____out_uv_border3;
                if (out_uv_fill == null || out_uv_fill.Length != 2)
                    throw new ArgumentOutOfRangeException("out_uv_fill", "The dimensions of the provided array don't match the required size.");
                Span<Vector2> __out_uv_fill;
                if (out_uv_fill == null)
                    __out_uv_fill = null;
                else
                {
                    __out_uv_fill = new Vector2[out_uv_fill.Length];
                    for (int i = 0; i < __out_uv_fill.Length; i++)
                    {
                        var __element = out_uv_fill[i];
                        __out_uv_fill[i] = __element;
                    }
                }

                fixed (Vector2* ____out_uv_fill4 = &MemoryMarshal.GetReference(__out_uv_fill))
                {
                    var __arg4 = ____out_uv_fill4;
                    var ___ret = Environment.Is64BitProcess ? __Internal64.GetMouseCursorTexData(__Instance, cursor, __arg1, __arg2, __arg3, __arg4) : __Internal32.GetMouseCursorTexData(__Instance, cursor, __arg1, __arg2, __arg3, __arg4);
                    return ___ret;
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3014"/></summary>
        // DEBUG: ImFont*           AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL)
        public ImFont AddFontFromFileTTF(string filename, float size_pixels, ImFontConfig font_cfg = default)
        {
            ushort param0 = 0;
            return AddFontFromFileTTF(filename, size_pixels, font_cfg, ref param0);
        }

        /// <summary>Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3015"/></summary>
        // DEBUG: ImFont*           AddFontFromMemoryTTF(void* font_data, int font_data_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL)
        public ImFont AddFontFromMemoryTTF(IntPtr font_data, int font_data_size, float size_pixels, ImFontConfig font_cfg = default)
        {
            ushort param0 = 0;
            return AddFontFromMemoryTTF(font_data, font_data_size, size_pixels, font_cfg, ref param0);
        }

        /// <summary>'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3016"/></summary>
        // DEBUG: ImFont*           AddFontFromMemoryCompressedTTF(const void* compressed_font_data, int compressed_font_data_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL)
        public ImFont AddFontFromMemoryCompressedTTF(IntPtr compressed_font_data, int compressed_font_data_size, float size_pixels, ImFontConfig font_cfg = default)
        {
            ushort param0 = 0;
            return AddFontFromMemoryCompressedTTF(compressed_font_data, compressed_font_data_size, size_pixels, font_cfg, ref param0);
        }

        /// <summary>'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3017"/></summary>
        // DEBUG: ImFont*           AddFontFromMemoryCompressedBase85TTF(const char* compressed_font_data_base85, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL)
        public ImFont AddFontFromMemoryCompressedBase85TTF(string compressed_font_data_base85, float size_pixels, ImFontConfig font_cfg = default)
        {
            ushort param0 = 0;
            return AddFontFromMemoryCompressedBase85TTF(compressed_font_data_base85, size_pixels, font_cfg, ref param0);
        }

        /// <summary>1 byte per-pixel.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3029"/></summary>
        // DEBUG: void              GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL)
        public void GetTexDataAsAlpha8(byte** out_pixels, ref int out_width, ref int out_height)
        {
            int param0 = 0;
            GetTexDataAsAlpha8(out_pixels, ref out_width, ref out_height, ref param0);
        }

        /// <summary>4 bytes-per-pixel.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3030"/></summary>
        // DEBUG: void              GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL)
        public void GetTexDataAsRGBA32(byte** out_pixels, ref int out_width, ref int out_height)
        {
            int param0 = 0;
            GetTexDataAsRGBA32(out_pixels, ref out_width, ref out_height, ref param0);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3064"/></summary>
        // DEBUG: int               AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float advance_x, const ImVec2& offset = ImVec2(0, 0))
        public int AddCustomRectFontGlyph(ImFont font, ushort id, int width, int height, float advance_x)
        {
            return AddCustomRectFontGlyph(font, id, width, height, advance_x, new Vector2(0, 0));
        }

        /// <summary>Build flags (see ImFontAtlasFlags_).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3075"/></summary>
        public ImFontAtlasFlags Flags
        {
            get
            {
                return ((__Internal*)__Instance)->Flags;
            }

            set
            {
                ((__Internal*)__Instance)->Flags = value;
            }
        }

        /// <summary>User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3076"/></summary>
        public IntPtr TexID
        {
            get
            {
                return ((__Internal*)__Instance)->TexID;
            }

            set
            {
                ((__Internal*)__Instance)->TexID = (IntPtr)value;
            }
        }

        /// <summary>Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3077"/></summary>
        public int TexDesiredWidth
        {
            get
            {
                return ((__Internal*)__Instance)->TexDesiredWidth;
            }

            set
            {
                ((__Internal*)__Instance)->TexDesiredWidth = value;
            }
        }

        /// <summary>Padding between glyphs within texture in pixels. Defaults to 1. If your rendering method doesn't rely on bilinear filtering you may set this to 0 (will also need to set AntiAliasedLinesUseTex = false).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3078"/></summary>
        public int TexGlyphPadding
        {
            get
            {
                return ((__Internal*)__Instance)->TexGlyphPadding;
            }

            set
            {
                ((__Internal*)__Instance)->TexGlyphPadding = value;
            }
        }

        /// <summary>Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3079"/></summary>
        public bool Locked
        {
            get
            {
                return ((__Internal*)__Instance)->Locked != 0;
            }

            set
            {
                ((__Internal*)__Instance)->Locked = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Store your own atlas related user-data (if e.g. you have multiple font atlas).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3080"/></summary>
        public IntPtr UserData
        {
            get
            {
                return ((__Internal*)__Instance)->UserData;
            }

            set
            {
                ((__Internal*)__Instance)->UserData = (IntPtr)value;
            }
        }

        /// <summary>Set when texture was built matching current font input.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3084"/></summary>
        public bool TexReady
        {
            get
            {
                return ((__Internal*)__Instance)->TexReady != 0;
            }

            set
            {
                ((__Internal*)__Instance)->TexReady = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Tell whether our texture data is known to use colors (rather than just alpha channel), in order to help backend select a format.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3085"/></summary>
        public bool TexPixelsUseColors
        {
            get
            {
                return ((__Internal*)__Instance)->TexPixelsUseColors != 0;
            }

            set
            {
                ((__Internal*)__Instance)->TexPixelsUseColors = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3086"/></summary>
        public byte* TexPixelsAlpha8
        {
            get
            {
                return (byte*)((__Internal*)__Instance)->TexPixelsAlpha8;
            }

            set
            {
                ((__Internal*)__Instance)->TexPixelsAlpha8 = (IntPtr)value;
            }
        }

        /// <summary>4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3087"/></summary>
        public uint* TexPixelsRGBA32
        {
            get
            {
                return (uint*)((__Internal*)__Instance)->TexPixelsRGBA32;
            }

            set
            {
                ((__Internal*)__Instance)->TexPixelsRGBA32 = (IntPtr)value;
            }
        }

        /// <summary>Texture width calculated during Build().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3088"/></summary>
        public int TexWidth
        {
            get
            {
                return ((__Internal*)__Instance)->TexWidth;
            }

            set
            {
                ((__Internal*)__Instance)->TexWidth = value;
            }
        }

        /// <summary>Texture height calculated during Build().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3089"/></summary>
        public int TexHeight
        {
            get
            {
                return ((__Internal*)__Instance)->TexHeight;
            }

            set
            {
                ((__Internal*)__Instance)->TexHeight = value;
            }
        }

        /// <summary>= (1.0f/TexWidth, 1.0f/TexHeight).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3090"/></summary>
        public Vector2 TexUvScale
        {
            get
            {
                return ((__Internal*)__Instance)->TexUvScale
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->TexUvScale = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Texture coordinates to a white pixel.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3091"/></summary>
        public Vector2 TexUvWhitePixel
        {
            get
            {
                return ((__Internal*)__Instance)->TexUvWhitePixel
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->TexUvWhitePixel = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3092"/></summary>
        public ImVector<ImFont> Fonts
        {
            get
            {
                return new ImVector<ImFont>(Unsafe.As<ImVector.__Internal, ImVector<ImFont>.__Internal>(ref ((__Internal*)__Instance)->Fonts))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Rectangles for packing custom texture data into the atlas.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3093"/></summary>
        public ImVector<ImFontAtlasCustomRect> CustomRects
        {
            get
            {
                return new ImVector<ImFontAtlasCustomRect>(Unsafe.As<ImVector.__Internal, ImVector<ImFontAtlasCustomRect>.__Internal>(ref ((__Internal*)__Instance)->CustomRects))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Configuration data.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3094"/></summary>
        public ImVector<ImFontConfig> ConfigData
        {
            get
            {
                return new ImVector<ImFontConfig>(Unsafe.As<ImVector.__Internal, ImVector<ImFontConfig>.__Internal>(ref ((__Internal*)__Instance)->ConfigData))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Opaque interface to a font builder (default to stb_truetype, can be changed to use FreeType by defining IMGUI_ENABLE_FREETYPE).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3098"/></summary>
        public ImFontBuilderIO FontBuilderIO
        {
            get
            {
                var __result0 = ImFontBuilderIO.__GetOrCreateInstance(((__Internal*)__Instance)->FontBuilderIO, false);
                return __result0;
            }
        }

        /// <summary>Shared flags (for all fonts) for custom font builder. THIS IS BUILD IMPLEMENTATION DEPENDENT. Per-font override is also available in ImFontConfig.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3099"/></summary>
        public uint FontBuilderFlags
        {
            get
            {
                return ((__Internal*)__Instance)->FontBuilderFlags;
            }

            set
            {
                ((__Internal*)__Instance)->FontBuilderFlags = value;
            }
        }

        /// <summary>Custom texture rectangle ID for white pixel and mouse cursors.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3102"/></summary>
        public int PackIdMouseCursors
        {
            get
            {
                return ((__Internal*)__Instance)->PackIdMouseCursors;
            }

            set
            {
                ((__Internal*)__Instance)->PackIdMouseCursors = value;
            }
        }

        /// <summary>Custom texture rectangle ID for baked anti-aliased lines.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3103"/></summary>
        public int PackIdLines
        {
            get
            {
                return ((__Internal*)__Instance)->PackIdLines;
            }

            set
            {
                ((__Internal*)__Instance)->PackIdLines = value;
            }
        }

        /// <summary>Basic Latin, Extended Latin.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3042"/></summary>
        public ushort* GlyphRangesDefault
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.GetGlyphRangesDefault(__Instance) : __Internal32.GetGlyphRangesDefault(__Instance);
                return ___ret;
            }
        }

        /// <summary>Default + Greek and Coptic.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3043"/></summary>
        public ushort* GlyphRangesGreek
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.GetGlyphRangesGreek(__Instance) : __Internal32.GetGlyphRangesGreek(__Instance);
                return ___ret;
            }
        }

        /// <summary>Default + Korean characters.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3044"/></summary>
        public ushort* GlyphRangesKorean
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.GetGlyphRangesKorean(__Instance) : __Internal32.GetGlyphRangesKorean(__Instance);
                return ___ret;
            }
        }

        /// <summary>Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3045"/></summary>
        public ushort* GlyphRangesJapanese
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.GetGlyphRangesJapanese(__Instance) : __Internal32.GetGlyphRangesJapanese(__Instance);
                return ___ret;
            }
        }

        /// <summary>Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3046"/></summary>
        public ushort* GlyphRangesChineseFull
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.GetGlyphRangesChineseFull(__Instance) : __Internal32.GetGlyphRangesChineseFull(__Instance);
                return ___ret;
            }
        }

        /// <summary>Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3047"/></summary>
        public ushort* GlyphRangesChineseSimplifiedCommon
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.GetGlyphRangesChineseSimplifiedCommon(__Instance) : __Internal32.GetGlyphRangesChineseSimplifiedCommon(__Instance);
                return ___ret;
            }
        }

        /// <summary>Default + about 400 Cyrillic characters.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3048"/></summary>
        public ushort* GlyphRangesCyrillic
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.GetGlyphRangesCyrillic(__Instance) : __Internal32.GetGlyphRangesCyrillic(__Instance);
                return ___ret;
            }
        }

        /// <summary>Default + Thai characters.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3049"/></summary>
        public ushort* GlyphRangesThai
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.GetGlyphRangesThai(__Instance) : __Internal32.GetGlyphRangesThai(__Instance);
                return ___ret;
            }
        }

        /// <summary>Default + Vietnamese characters.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3050"/></summary>
        public ushort* GlyphRangesVietnamese
        {
            get
            {
                var ___ret = Environment.Is64BitProcess ? __Internal64.GetGlyphRangesVietnamese(__Instance) : __Internal32.GetGlyphRangesVietnamese(__Instance);
                return ___ret;
            }
        }
    }

    /// <summary>Font runtime data and rendering.<br/>ImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3112"/></summary>
    // DEBUG: struct ImFont
    // DEBUG: {
    // DEBUG:     // Members: Hot ~20/24 bytes (for CalcTextSize)
    // DEBUG:     ImVector<float>             IndexAdvanceX;      // 12-16 // out //            // Sparse. Glyphs->AdvanceX in a directly indexable way (cache-friendly for CalcTextSize functions which only this this info, and are often bottleneck in large UI).
    // DEBUG:     float                       FallbackAdvanceX;   // 4     // out // = FallbackGlyph->AdvanceX
    // DEBUG:     float                       FontSize;           // 4     // in  //            // Height of characters/line, set during loading (don't change after loading)
    // DEBUG: 
    // DEBUG:     // Members: Hot ~28/40 bytes (for CalcTextSize + render loop)
    // DEBUG:     ImVector<ImWchar>           IndexLookup;        // 12-16 // out //            // Sparse. Index glyphs by Unicode code-point.
    // DEBUG:     ImVector<ImFontGlyph>       Glyphs;             // 12-16 // out //            // All glyphs.
    // DEBUG:     const ImFontGlyph*          FallbackGlyph;      // 4-8   // out // = FindGlyph(FontFallbackChar)
    // DEBUG: 
    // DEBUG:     // Members: Cold ~32/40 bytes
    // DEBUG:     ImFontAtlas*                ContainerAtlas;     // 4-8   // out //            // What we has been loaded into
    // DEBUG:     const ImFontConfig*         ConfigData;         // 4-8   // in  //            // Pointer within ContainerAtlas->ConfigData
    // DEBUG:     short                       ConfigDataCount;    // 2     // in  // ~ 1        // Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.
    // DEBUG:     ImWchar                     FallbackChar;       // 2     // out // = FFFD/'?' // Character used if a glyph isn't found.
    // DEBUG:     ImWchar                     EllipsisChar;       // 2     // out // = '...'/'.'// Character used for ellipsis rendering.
    // DEBUG:     short                       EllipsisCharCount;  // 1     // out // 1 or 3
    // DEBUG:     float                       EllipsisWidth;      // 4     // out               // Width
    // DEBUG:     float                       EllipsisCharStep;   // 4     // out               // Step between characters when EllipsisCount > 0
    // DEBUG:     bool                        DirtyLookupTables;  // 1     // out //
    // DEBUG:     float                       Scale;              // 4     // in  // = 1.f      // Base font scale, multiplied by the per-window font scale which you can adjust with SetWindowFontScale()
    // DEBUG:     float                       Ascent, Descent;    // 4+4   // out //            // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]
    // DEBUG:     int                         MetricsTotalSurface;// 4     // out //            // Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs)
    // DEBUG:     ImU8                        Used4kPagesMap[(IM_UNICODE_CODEPOINT_MAX+1)/4096/8]; // 2 bytes if ImWchar=ImWchar16, 34 bytes if ImWchar==ImWchar32. Store 1-bit for each block of 4K codepoints that has one active glyph. This is mainly used to facilitate iterations across all used codepoints.
    // DEBUG: 
    // DEBUG:     // Methods
    // DEBUG:     IMGUI_API ImFont();
    // DEBUG:     IMGUI_API ~ImFont();
    // DEBUG:     IMGUI_API const ImFontGlyph*FindGlyph(ImWchar c) const;
    // DEBUG:     IMGUI_API const ImFontGlyph*FindGlyphNoFallback(ImWchar c) const;
    // DEBUG:     float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdvanceX.Size) ? IndexAdvanceX[(int)c] : FallbackAdvanceX; }
    // DEBUG:     bool                        IsLoaded() const                    { return ContainerAtlas != NULL; }
    // DEBUG:     const char*                 GetDebugName() const                { return ConfigData ? ConfigData->Name : "<unknown>"; }
    // DEBUG: 
    // DEBUG:     // 'max_width' stops rendering after a certain width (could be turned into a 2d size). FLT_MAX to disable.
    // DEBUG:     // 'wrap_width' enable automatic word-wrapping across multiple lines to fit into given width. 0.0f to disable.
    // DEBUG:     IMGUI_API ImVec2            CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_begin, const char* text_end = NULL, const char** remaining = NULL) const; // utf8
    // DEBUG:     IMGUI_API const char*       CalcWordWrapPositionA(float scale, const char* text, const char* text_end, float wrap_width) const;
    // DEBUG:     IMGUI_API void              RenderChar(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, ImWchar c) const;
    // DEBUG:     IMGUI_API void              RenderText(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width = 0.0f, bool cpu_fine_clip = false) const;
    // DEBUG: 
    // DEBUG:     // [Internal] Don't use!
    // DEBUG:     IMGUI_API void              BuildLookupTable();
    // DEBUG:     IMGUI_API void              ClearOutputData();
    // DEBUG:     IMGUI_API void              GrowIndex(int new_size);
    // DEBUG:     IMGUI_API void              AddGlyph(const ImFontConfig* src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);
    // DEBUG:     IMGUI_API void              AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst = true); // Makes 'dst' character/glyph points to 'src' character/glyph. Currently needs to be called AFTER fonts have been built.
    // DEBUG:     IMGUI_API void              SetGlyphVisible(ImWchar c, bool visible);
    // DEBUG:     IMGUI_API bool              IsGlyphRangeUnused(unsigned int c_begin, unsigned int c_last);
    // DEBUG: }
    public unsafe partial class ImFont : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal ImVector.__Internal IndexAdvanceX;
            internal float FallbackAdvanceX;
            internal float FontSize;
            internal ImVector.__Internal IndexLookup;
            internal ImVector.__Internal Glyphs;
            internal IntPtr FallbackGlyph;
            internal IntPtr ContainerAtlas;
            internal IntPtr ConfigData;
            internal short ConfigDataCount;
            internal ushort FallbackChar;
            internal ushort EllipsisChar;
            internal short EllipsisCharCount;
            internal float EllipsisWidth;
            internal float EllipsisCharStep;
            internal byte DirtyLookupTables;
            internal float Scale;
            internal float Ascent;
            internal float Descent;
            internal int MetricsTotalSurface;
            internal fixed byte Used4kPagesMap[2];
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFont@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFont@@QAE@ABU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImFont@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?FindGlyph@ImFont@@QBEPBUImFontGlyph@@G@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr FindGlyph(IntPtr __instance, ushort c);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?FindGlyphNoFallback@ImFont@@QBEPBUImFontGlyph@@G@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr FindGlyphNoFallback(IntPtr __instance, ushort c);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCharAdvance@ImFont@@QBEMG@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern float GetCharAdvance(IntPtr __instance, ushort c);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CalcTextSizeA@ImFont@@QBE?AUImVec2@@MMMPBD0PAPBD@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void CalcTextSizeA(IntPtr __instance, IntPtr @return, float size, float max_width, float wrap_width, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_begin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end, sbyte** remaining);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CalcWordWrapPositionA@ImFont@@QBEPBDMPBD0M@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr CalcWordWrapPositionA(IntPtr __instance, float scale, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end, float wrap_width);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?RenderChar@ImFont@@QBEXPAUImDrawList@@MABUImVec2@@IG@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void RenderChar(IntPtr __instance, IntPtr draw_list, float size, IntPtr pos, uint col, ushort c);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?RenderText@ImFont@@QBEXPAUImDrawList@@MABUImVec2@@IABUImVec4@@PBD3M_N@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void RenderText(IntPtr __instance, IntPtr draw_list, float size, IntPtr pos, uint col, IntPtr clip_rect, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_begin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end, float wrap_width, bool cpu_fine_clip);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BuildLookupTable@ImFont@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void BuildLookupTable(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearOutputData@ImFont@@QAEXXZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void ClearOutputData(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GrowIndex@ImFont@@QAEXH@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void GrowIndex(IntPtr __instance, int new_size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddGlyph@ImFont@@QAEXPBUImFontConfig@@GMMMMMMMMM@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddGlyph(IntPtr __instance, IntPtr src_cfg, ushort c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddRemapChar@ImFont@@QAEXGG_N@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void AddRemapChar(IntPtr __instance, ushort dst, ushort src, bool overwrite_dst);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetGlyphVisible@ImFont@@QAEXG_N@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void SetGlyphVisible(IntPtr __instance, ushort c, bool visible);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsGlyphRangeUnused@ImFont@@QAE_NII@Z", CallingConvention = CallingConvention.ThisCall)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGlyphRangeUnused(IntPtr __instance, uint c_begin, uint c_last);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFont@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImFont@@QEAA@AEBU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImFont@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr FindGlyph(IntPtr __instance, ushort c);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr FindGlyphNoFallback(IntPtr __instance, ushort c);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCharAdvance@ImFont@@QEBAMG@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetCharAdvance(IntPtr __instance, ushort c);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void CalcTextSizeA(IntPtr __instance, IntPtr @return, float size, float max_width, float wrap_width, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_begin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end, sbyte** remaining);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr CalcWordWrapPositionA(IntPtr __instance, float scale, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end, float wrap_width);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IG@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void RenderChar(IntPtr __instance, IntPtr draw_list, float size, IntPtr pos, uint col, ushort c);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void RenderText(IntPtr __instance, IntPtr draw_list, float size, IntPtr pos, uint col, IntPtr clip_rect, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_begin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end, float wrap_width, bool cpu_fine_clip);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BuildLookupTable@ImFont@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void BuildLookupTable(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ClearOutputData@ImFont@@QEAAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ClearOutputData(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GrowIndex@ImFont@@QEAAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GrowIndex(IntPtr __instance, int new_size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddGlyph(IntPtr __instance, IntPtr src_cfg, ushort c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AddRemapChar@ImFont@@QEAAXGG_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AddRemapChar(IntPtr __instance, ushort dst, ushort src, bool overwrite_dst);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetGlyphVisible@ImFont@@QEAAXG_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetGlyphVisible(IntPtr __instance, ushort c, bool visible);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGlyphRangeUnused(IntPtr __instance, uint c_begin, uint c_last);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImFont>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImFont>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImFont managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImFont>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImFont managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImFont __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImFont(native.ToPointer(), skipVTables);
        }

        internal static ImFont __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImFont)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImFont __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImFont(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            if (Environment.Is64BitProcess)
            {
                ImFont.__Internal64.cctor(ret, new IntPtr(&native));
            }
            else
            {
                ImFont.__Internal32.cctor(ret, new IntPtr(&native));
            }

            return ret.ToPointer();
        }

        private ImFont(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImFont(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary>Methods.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3140"/></summary>
        // DEBUG: ImFont()
        public ImFont()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImFont.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>Font runtime data and rendering.<br/>ImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3112"/></summary>
        // DEBUG: ImFont
        public ImFont(ImFont _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImFont.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.cctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.cctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImFont()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                if (Environment.Is64BitProcess)
                {
                    __Internal64.dtor(__Instance);
                }
                else
                {
                    __Internal32.dtor(__Instance);
                }

            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3142"/></summary>
        // DEBUG: const ImFontGlyph*FindGlyph(ImWchar c) const
        public ImFontGlyph FindGlyph(ushort c)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.FindGlyph(__Instance, c) : __Internal32.FindGlyph(__Instance, c);
            var __result0 = ImFontGlyph.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3143"/></summary>
        // DEBUG: const ImFontGlyph*FindGlyphNoFallback(ImWchar c) const
        public ImFontGlyph FindGlyphNoFallback(ushort c)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.FindGlyphNoFallback(__Instance, c) : __Internal32.FindGlyphNoFallback(__Instance, c);
            var __result0 = ImFontGlyph.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3144"/></summary>
        // DEBUG: float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdvanceX.Size) ? IndexAdvanceX[(int)c] : FallbackAdvanceX; }
        public float GetCharAdvance(ushort c)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetCharAdvance(__Instance, c) : __Internal32.GetCharAdvance(__Instance, c);
            return ___ret;
        }

        /// <summary>Utf8.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3150"/></summary>
        // DEBUG: ImVec2            CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_begin, const char* text_end = NULL, const char** remaining = NULL) const
        public Vector2 CalcTextSizeA(float size, float max_width, float wrap_width, string text_begin, string text_end = default, char** remaining = default)
        {
            var __arg5 = (sbyte**)&remaining;
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.CalcTextSizeA(__Instance, new IntPtr(&___ret), size, max_width, wrap_width, text_begin, text_end, __arg5);
            }
            else
            {
                __Internal32.CalcTextSizeA(__Instance, new IntPtr(&___ret), size, max_width, wrap_width, text_begin, text_end, __arg5);
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3151"/></summary>
        // DEBUG: const char*       CalcWordWrapPositionA(float scale, const char* text, const char* text_end, float wrap_width) const
        public string CalcWordWrapPositionA(float scale, string text, string text_end, float wrap_width)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.CalcWordWrapPositionA(__Instance, scale, text, text_end, wrap_width) : __Internal32.CalcWordWrapPositionA(__Instance, scale, text, text_end, wrap_width);
            return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ___ret);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3152"/></summary>
        // DEBUG: void              RenderChar(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, ImWchar c) const
        public void RenderChar(ImDrawList draw_list, float size, Vector2 pos, uint col, ushort c)
        {
            var ____arg0 = draw_list.__Instance;
            var __arg0 = new IntPtr(&____arg0);
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref pos))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.RenderChar(__Instance, __arg0, size, __arg2, col, c);
            }
            else
            {
                __Internal32.RenderChar(__Instance, __arg0, size, __arg2, col, c);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3153"/></summary>
        // DEBUG: void              RenderText(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width = 0.0f, bool cpu_fine_clip = false) const
        public void RenderText(ImDrawList draw_list, float size, Vector2 pos, uint col, Vector4 clip_rect, string text_begin, string text_end, float wrap_width = 0.0F, bool cpu_fine_clip = false)
        {
            var ____arg0 = draw_list.__Instance;
            var __arg0 = new IntPtr(&____arg0);
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref pos))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg4 = new IntPtr(Unsafe.AsPointer(ref clip_rect))
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.RenderText(__Instance, __arg0, size, __arg2, col, __arg4, text_begin, text_end, wrap_width, cpu_fine_clip);
            }
            else
            {
                __Internal32.RenderText(__Instance, __arg0, size, __arg2, col, __arg4, text_begin, text_end, wrap_width, cpu_fine_clip);
            }
        }

        /// <summary>[Internal] Don't use!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3156"/></summary>
        // DEBUG: void              BuildLookupTable()
        public void BuildLookupTable()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.BuildLookupTable(__Instance);
            }
            else
            {
                __Internal32.BuildLookupTable(__Instance);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3157"/></summary>
        // DEBUG: void              ClearOutputData()
        public void ClearOutputData()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.ClearOutputData(__Instance);
            }
            else
            {
                __Internal32.ClearOutputData(__Instance);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3158"/></summary>
        // DEBUG: void              GrowIndex(int new_size)
        public void GrowIndex(int new_size)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.GrowIndex(__Instance, new_size);
            }
            else
            {
                __Internal32.GrowIndex(__Instance, new_size);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3159"/></summary>
        // DEBUG: void              AddGlyph(const ImFontConfig* src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)
        public void AddGlyph(ImFontConfig src_cfg, ushort c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)
        {
            var __arg0 = src_cfg is null ? IntPtr.Zero : src_cfg.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.AddGlyph(__Instance, __arg0, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x);
            }
            else
            {
                __Internal32.AddGlyph(__Instance, __arg0, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x);
            }
        }

        /// <summary>Makes 'dst' character/glyph points to 'src' character/glyph. Currently needs to be called AFTER fonts have been built.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3160"/></summary>
        // DEBUG: void              AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst = true)
        public void AddRemapChar(ushort dst, ushort src, bool overwrite_dst = true)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.AddRemapChar(__Instance, dst, src, overwrite_dst);
            }
            else
            {
                __Internal32.AddRemapChar(__Instance, dst, src, overwrite_dst);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3161"/></summary>
        // DEBUG: void              SetGlyphVisible(ImWchar c, bool visible)
        public void SetGlyphVisible(ushort c, bool visible)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetGlyphVisible(__Instance, c, visible);
            }
            else
            {
                __Internal32.SetGlyphVisible(__Instance, c, visible);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3162"/></summary>
        // DEBUG: bool              IsGlyphRangeUnused(unsigned int c_begin, unsigned int c_last)
        public bool IsGlyphRangeUnused(uint c_begin, uint c_last)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsGlyphRangeUnused(__Instance, c_begin, c_last) : __Internal32.IsGlyphRangeUnused(__Instance, c_begin, c_last);
            return ___ret;
        }

        /// <summary>12-16.<br/>Out.<br/>Sparse. Glyphs-&gt;AdvanceX in a directly indexable way (cache-friendly for CalcTextSize functions which only this this info, and are often bottleneck in large UI).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3115"/></summary>
        public ImVector<float> IndexAdvanceX
        {
            get
            {
                return new ImVector<float>(Unsafe.As<ImVector.__Internal, ImVector<float>.__Internal>(ref ((__Internal*)__Instance)->IndexAdvanceX))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>4.<br/>Out.<br/>= FallbackGlyph-&gt;AdvanceX.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3116"/></summary>
        public float FallbackAdvanceX
        {
            get
            {
                return ((__Internal*)__Instance)->FallbackAdvanceX;
            }

            set
            {
                ((__Internal*)__Instance)->FallbackAdvanceX = value;
            }
        }

        /// <summary>4.<br/>In.<br/>Height of characters/line, set during loading (don't change after loading).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3117"/></summary>
        public float FontSize
        {
            get
            {
                return ((__Internal*)__Instance)->FontSize;
            }

            set
            {
                ((__Internal*)__Instance)->FontSize = value;
            }
        }

        /// <summary>12-16.<br/>Out.<br/>Sparse. Index glyphs by Unicode code-point.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3120"/></summary>
        public ImVector<ushort> IndexLookup
        {
            get
            {
                return new ImVector<ushort>(Unsafe.As<ImVector.__Internal, ImVector<ushort>.__Internal>(ref ((__Internal*)__Instance)->IndexLookup))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>12-16.<br/>Out.<br/>All glyphs.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3121"/></summary>
        public ImVector<ImFontGlyph> Glyphs
        {
            get
            {
                return new ImVector<ImFontGlyph>(Unsafe.As<ImVector.__Internal, ImVector<ImFontGlyph>.__Internal>(ref ((__Internal*)__Instance)->Glyphs))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>4-8.<br/>Out.<br/>= FindGlyph(FontFallbackChar).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3122"/></summary>
        public ImFontGlyph FallbackGlyph
        {
            get
            {
                var __result0 = ImFontGlyph.__GetOrCreateInstance(((__Internal*)__Instance)->FallbackGlyph, false);
                return __result0;
            }
        }

        /// <summary>4-8.<br/>Out.<br/>What we has been loaded into.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3125"/></summary>
        public ImFontAtlas ContainerAtlas
        {
            get
            {
                var __result0 = ImFontAtlas.__GetOrCreateInstance(((__Internal*)__Instance)->ContainerAtlas, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->ContainerAtlas = value is null ? IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>4-8.<br/>In.<br/>Pointer within ContainerAtlas-&gt;ConfigData.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3126"/></summary>
        public ImFontConfig ConfigData
        {
            get
            {
                var __result0 = ImFontConfig.__GetOrCreateInstance(((__Internal*)__Instance)->ConfigData, false);
                return __result0;
            }
        }

        /// <summary>2.<br/>In.<br/>~ 1.<br/>Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3127"/></summary>
        public short ConfigDataCount
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigDataCount;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigDataCount = value;
            }
        }

        /// <summary>2.<br/>Out.<br/>= FFFD/'?'.<br/>Character used if a glyph isn't found.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3128"/></summary>
        public ushort FallbackChar
        {
            get
            {
                return ((__Internal*)__Instance)->FallbackChar;
            }

            set
            {
                ((__Internal*)__Instance)->FallbackChar = value;
            }
        }

        /// <summary>2.<br/>Out.<br/>= '...'/'.'.<br/>Character used for ellipsis rendering.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3129"/></summary>
        public ushort EllipsisChar
        {
            get
            {
                return ((__Internal*)__Instance)->EllipsisChar;
            }

            set
            {
                ((__Internal*)__Instance)->EllipsisChar = value;
            }
        }

        /// <summary>1.<br/>Out.<br/>1 or 3.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3130"/></summary>
        public short EllipsisCharCount
        {
            get
            {
                return ((__Internal*)__Instance)->EllipsisCharCount;
            }

            set
            {
                ((__Internal*)__Instance)->EllipsisCharCount = value;
            }
        }

        /// <summary>4.<br/>Out.<br/>Width.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3131"/></summary>
        public float EllipsisWidth
        {
            get
            {
                return ((__Internal*)__Instance)->EllipsisWidth;
            }

            set
            {
                ((__Internal*)__Instance)->EllipsisWidth = value;
            }
        }

        /// <summary>4.<br/>Out.<br/>Step between characters when EllipsisCount &gt; 0.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3132"/></summary>
        public float EllipsisCharStep
        {
            get
            {
                return ((__Internal*)__Instance)->EllipsisCharStep;
            }

            set
            {
                ((__Internal*)__Instance)->EllipsisCharStep = value;
            }
        }

        /// <summary>1.<br/>Out.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3133"/></summary>
        public bool DirtyLookupTables
        {
            get
            {
                return ((__Internal*)__Instance)->DirtyLookupTables != 0;
            }

            set
            {
                ((__Internal*)__Instance)->DirtyLookupTables = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>4.<br/>In.<br/>= 1.f.<br/>Base font scale, multiplied by the per-window font scale which you can adjust with SetWindowFontScale().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3134"/></summary>
        public float Scale
        {
            get
            {
                return ((__Internal*)__Instance)->Scale;
            }

            set
            {
                ((__Internal*)__Instance)->Scale = value;
            }
        }

        /// <summary>4+4.<br/>Out.<br/>Ascent: distance from top to bottom of e.g. 'A' [0..FontSize].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3135"/></summary>
        public float Ascent
        {
            get
            {
                return ((__Internal*)__Instance)->Ascent;
            }

            set
            {
                ((__Internal*)__Instance)->Ascent = value;
            }
        }

        /// <summary>4+4.<br/>Out.<br/>Ascent: distance from top to bottom of e.g. 'A' [0..FontSize].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3135"/></summary>
        public float Descent
        {
            get
            {
                return ((__Internal*)__Instance)->Descent;
            }

            set
            {
                ((__Internal*)__Instance)->Descent = value;
            }
        }

        /// <summary>4.<br/>Out.<br/>Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3136"/></summary>
        public int MetricsTotalSurface
        {
            get
            {
                return ((__Internal*)__Instance)->MetricsTotalSurface;
            }

            set
            {
                ((__Internal*)__Instance)->MetricsTotalSurface = value;
            }
        }

        /// <summary>2 bytes if ImWchar=ImWchar16, 34 bytes if ImWchar==ImWchar32. Store 1-bit for each block of 4K codepoints that has one active glyph. This is mainly used to facilitate iterations across all used codepoints.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3137"/></summary>
        public Span<byte> Used4kPagesMap
        {
            get
            {
                return new Span<byte>(((__Internal*)__Instance)->Used4kPagesMap, 2);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 2; i++)
                        ((__Internal*)__Instance)->Used4kPagesMap[i] = value[i];
                }
            }
        }
    }

    /// <summary>- Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.<br/>- With multi-viewport enabled, we extend this concept to have multiple active viewports.<br/>- In the future we will extend this concept further to also represent Platform Monitor and support a "no main platform window" operation mode.<br/>- About Main Area vs Work Area:.<br/>- Main Area = entire viewport.<br/>- Work Area = entire viewport minus sections used by main menu bars (for platform windows), or by task bar (for platform monitor).<br/>- Windows are generally trying to stay within the Work Area of their host viewport.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3198"/></summary>
    // DEBUG: struct ImGuiViewport
    // DEBUG: {
    // DEBUG:     ImGuiID             ID;                     // Unique identifier for the viewport
    // DEBUG:     ImGuiViewportFlags  Flags;                  // See ImGuiViewportFlags_
    // DEBUG:     ImVec2              Pos;                    // Main Area: Position of the viewport (Dear ImGui coordinates are the same as OS desktop/native coordinates)
    // DEBUG:     ImVec2              Size;                   // Main Area: Size of the viewport.
    // DEBUG:     ImVec2              WorkPos;                // Work Area: Position of the viewport minus task bars, menus bars, status bars (>= Pos)
    // DEBUG:     ImVec2              WorkSize;               // Work Area: Size of the viewport minus task bars, menu bars, status bars (<= Size)
    // DEBUG:     float               DpiScale;               // 1.0f = 96 DPI = No extra scale.
    // DEBUG:     ImGuiID             ParentViewportId;       // (Advanced) 0: no parent. Instruct the platform backend to setup a parent/child relationship between platform windows.
    // DEBUG:     ImDrawData*         DrawData;               // The ImDrawData corresponding to this viewport. Valid after Render() and until the next call to NewFrame().
    // DEBUG: 
    // DEBUG:     // Platform/Backend Dependent Data
    // DEBUG:     // Our design separate the Renderer and Platform backends to facilitate combining default backends with each others.
    // DEBUG:     // When our create your own backend for a custom engine, it is possible that both Renderer and Platform will be handled
    // DEBUG:     // by the same system and you may not need to use all the UserData/Handle fields.
    // DEBUG:     // The library never uses those fields, they are merely storage to facilitate backend implementation.
    // DEBUG:     void*               RendererUserData;       // void* to hold custom data structure for the renderer (e.g. swap chain, framebuffers etc.). generally set by your Renderer_CreateWindow function.
    // DEBUG:     void*               PlatformUserData;       // void* to hold custom data structure for the OS / platform (e.g. windowing info, render context). generally set by your Platform_CreateWindow function.
    // DEBUG:     void*               PlatformHandle;         // void* for FindViewportByPlatformHandle(). (e.g. suggested to use natural platform handle such as HWND, GLFWWindow*, SDL_Window*)
    // DEBUG:     void*               PlatformHandleRaw;      // void* to hold lower-level, platform-native window handle (under Win32 this is expected to be a HWND, unused for other platforms), when using an abstraction layer like GLFW or SDL (where PlatformHandle would be a SDL_Window*)
    // DEBUG:     bool                PlatformWindowCreated;  // Platform window has been created (Platform_CreateWindow() has been called). This is false during the first frame where a viewport is being created.
    // DEBUG:     bool                PlatformRequestMove;    // Platform window requested move (e.g. window was moved by the OS / host window manager, authoritative position will be OS window position)
    // DEBUG:     bool                PlatformRequestResize;  // Platform window requested resize (e.g. window was resized by the OS / host window manager, authoritative size will be OS window size)
    // DEBUG:     bool                PlatformRequestClose;   // Platform window requested closure (e.g. window was moved by the OS / host window manager, e.g. pressing ALT-F4)
    // DEBUG: 
    // DEBUG:     ImGuiViewport()     { memset(this, 0, sizeof(*this)); }
    // DEBUG:     ~ImGuiViewport()    { IM_ASSERT(PlatformUserData == NULL && RendererUserData == NULL); }
    // DEBUG: 
    // DEBUG:     // Helpers
    // DEBUG:     ImVec2              GetCenter() const       { return ImVec2(Pos.x + Size.x * 0.5f, Pos.y + Size.y * 0.5f); }
    // DEBUG:     ImVec2              GetWorkCenter() const   { return ImVec2(WorkPos.x + WorkSize.x * 0.5f, WorkPos.y + WorkSize.y * 0.5f); }
    // DEBUG: }
    public unsafe partial class ImGuiViewport : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal uint ID;
            internal ImGuiViewportFlags Flags;
            internal Vector2 Pos;
            internal Vector2 Size;
            internal Vector2 WorkPos;
            internal Vector2 WorkSize;
            internal float DpiScale;
            internal uint ParentViewportId;
            internal IntPtr DrawData;
            internal IntPtr RendererUserData;
            internal IntPtr PlatformUserData;
            internal IntPtr PlatformHandle;
            internal IntPtr PlatformHandleRaw;
            internal byte PlatformWindowCreated;
            internal byte PlatformRequestMove;
            internal byte PlatformRequestResize;
            internal byte PlatformRequestClose;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiViewport@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiViewport@@QAE@ABU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImGuiViewport@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCenter@ImGuiViewport@@QBE?AUImVec2@@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void GetCenter(IntPtr __instance, IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWorkCenter@ImGuiViewport@@QBE?AUImVec2@@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void GetWorkCenter(IntPtr __instance, IntPtr @return);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiViewport@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiViewport@@QEAA@AEBU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr cctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImGuiViewport@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void dtor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCenter@ImGuiViewport@@QEBA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetCenter(IntPtr __instance, IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWorkCenter@ImGuiViewport@@QEBA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetWorkCenter(IntPtr __instance, IntPtr @return);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiViewport>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiViewport>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiViewport managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiViewport>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiViewport managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiViewport __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiViewport(native.ToPointer(), skipVTables);
        }

        internal static ImGuiViewport __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiViewport)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiViewport __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiViewport(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiViewport(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiViewport(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3224"/></summary>
        // DEBUG: ImGuiViewport()     { memset(this, 0, sizeof(*this)); }
        public ImGuiViewport()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiViewport.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>- Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.<br/>- With multi-viewport enabled, we extend this concept to have multiple active viewports.<br/>- In the future we will extend this concept further to also represent Platform Monitor and support a "no main platform window" operation mode.<br/>- About Main Area vs Work Area:.<br/>- Main Area = entire viewport.<br/>- Work Area = entire viewport minus sections used by main menu bars (for platform windows), or by task bar (for platform monitor).<br/>- Windows are generally trying to stay within the Work Area of their host viewport.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3198"/></summary>
        // DEBUG: ImGuiViewport
        public ImGuiViewport(ImGuiViewport _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiViewport.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((ImGuiViewport.__Internal*)__Instance) = *((ImGuiViewport.__Internal*)_0.__Instance);
        }

        /// <inheritdoc/>
        ~ImGuiViewport()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                if (Environment.Is64BitProcess)
                {
                    __Internal64.dtor(__Instance);
                }
                else
                {
                    __Internal32.dtor(__Instance);
                }

            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Unique identifier for the viewport.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3200"/></summary>
        public uint ID
        {
            get
            {
                return ((__Internal*)__Instance)->ID;
            }

            set
            {
                ((__Internal*)__Instance)->ID = value;
            }
        }

        /// <summary>See ImGuiViewportFlags_.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3201"/></summary>
        public ImGuiViewportFlags Flags
        {
            get
            {
                return ((__Internal*)__Instance)->Flags;
            }

            set
            {
                ((__Internal*)__Instance)->Flags = value;
            }
        }

        /// <summary>Main Area: Position of the viewport (Dear ImGui coordinates are the same as OS desktop/native coordinates).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3202"/></summary>
        public Vector2 Pos
        {
            get
            {
                return ((__Internal*)__Instance)->Pos
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->Pos = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Main Area: Size of the viewport.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3203"/></summary>
        public Vector2 Size
        {
            get
            {
                return ((__Internal*)__Instance)->Size
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->Size = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Work Area: Position of the viewport minus task bars, menus bars, status bars (&gt;= Pos).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3204"/></summary>
        public Vector2 WorkPos
        {
            get
            {
                return ((__Internal*)__Instance)->WorkPos
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->WorkPos = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Work Area: Size of the viewport minus task bars, menu bars, status bars (&lt;= Size).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3205"/></summary>
        public Vector2 WorkSize
        {
            get
            {
                return ((__Internal*)__Instance)->WorkSize
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->WorkSize = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>1.0f = 96 DPI = No extra scale.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3206"/></summary>
        public float DpiScale
        {
            get
            {
                return ((__Internal*)__Instance)->DpiScale;
            }

            set
            {
                ((__Internal*)__Instance)->DpiScale = value;
            }
        }

        /// <summary>(Advanced) 0: no parent. Instruct the platform backend to setup a parent/child relationship between platform windows.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3207"/></summary>
        public uint ParentViewportId
        {
            get
            {
                return ((__Internal*)__Instance)->ParentViewportId;
            }

            set
            {
                ((__Internal*)__Instance)->ParentViewportId = value;
            }
        }

        /// <summary>The ImDrawData corresponding to this viewport. Valid after Render() and until the next call to NewFrame().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3208"/></summary>
        public ImDrawData DrawData
        {
            get
            {
                var __result0 = ((__Internal*)__Instance)->DrawData != IntPtr.Zero ? ImDrawData.__CreateInstance(((__Internal*)__Instance)->DrawData) : default;
                return __result0;
            }

            set
            {
                var __value = value.__Instance;
                ((__Internal*)__Instance)->DrawData = new IntPtr(&__value);
            }
        }

        /// <summary>Void* to hold custom data structure for the renderer (e.g. swap chain, framebuffers etc.). generally set by your Renderer_CreateWindow function.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3215"/></summary>
        public IntPtr RendererUserData
        {
            get
            {
                return ((__Internal*)__Instance)->RendererUserData;
            }

            set
            {
                ((__Internal*)__Instance)->RendererUserData = (IntPtr)value;
            }
        }

        /// <summary>Void* to hold custom data structure for the OS / platform (e.g. windowing info, render context). generally set by your Platform_CreateWindow function.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3216"/></summary>
        public IntPtr PlatformUserData
        {
            get
            {
                return ((__Internal*)__Instance)->PlatformUserData;
            }

            set
            {
                ((__Internal*)__Instance)->PlatformUserData = (IntPtr)value;
            }
        }

        /// <summary>Void* for FindViewportByPlatformHandle(). (e.g. suggested to use natural platform handle such as HWND, GLFWWindow*, SDL_Window*).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3217"/></summary>
        public IntPtr PlatformHandle
        {
            get
            {
                return ((__Internal*)__Instance)->PlatformHandle;
            }

            set
            {
                ((__Internal*)__Instance)->PlatformHandle = (IntPtr)value;
            }
        }

        /// <summary>Void* to hold lower-level, platform-native window handle (under Win32 this is expected to be a HWND, unused for other platforms), when using an abstraction layer like GLFW or SDL (where PlatformHandle would be a SDL_Window*).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3218"/></summary>
        public IntPtr PlatformHandleRaw
        {
            get
            {
                return ((__Internal*)__Instance)->PlatformHandleRaw;
            }

            set
            {
                ((__Internal*)__Instance)->PlatformHandleRaw = (IntPtr)value;
            }
        }

        /// <summary>Platform window has been created (Platform_CreateWindow() has been called). This is false during the first frame where a viewport is being created.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3219"/></summary>
        public bool PlatformWindowCreated
        {
            get
            {
                return ((__Internal*)__Instance)->PlatformWindowCreated != 0;
            }

            set
            {
                ((__Internal*)__Instance)->PlatformWindowCreated = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Platform window requested move (e.g. window was moved by the OS / host window manager, authoritative position will be OS window position).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3220"/></summary>
        public bool PlatformRequestMove
        {
            get
            {
                return ((__Internal*)__Instance)->PlatformRequestMove != 0;
            }

            set
            {
                ((__Internal*)__Instance)->PlatformRequestMove = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Platform window requested resize (e.g. window was resized by the OS / host window manager, authoritative size will be OS window size).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3221"/></summary>
        public bool PlatformRequestResize
        {
            get
            {
                return ((__Internal*)__Instance)->PlatformRequestResize != 0;
            }

            set
            {
                ((__Internal*)__Instance)->PlatformRequestResize = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Platform window requested closure (e.g. window was moved by the OS / host window manager, e.g. pressing ALT-F4).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3222"/></summary>
        public bool PlatformRequestClose
        {
            get
            {
                return ((__Internal*)__Instance)->PlatformRequestClose != 0;
            }

            set
            {
                ((__Internal*)__Instance)->PlatformRequestClose = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Helpers.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3228"/></summary>
        public Vector2 Center
        {
            get
            {
                var ___ret = new Vector2();
                if (Environment.Is64BitProcess)
                {
                    __Internal64.GetCenter(__Instance, new IntPtr(&___ret));
                }
                else
                {
                    __Internal32.GetCenter(__Instance, new IntPtr(&___ret));
                }

                return ___ret
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
                ;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3229"/></summary>
        public Vector2 WorkCenter
        {
            get
            {
                var ___ret = new Vector2();
                if (Environment.Is64BitProcess)
                {
                    __Internal64.GetWorkCenter(__Instance, new IntPtr(&___ret));
                }
                else
                {
                    __Internal32.GetWorkCenter(__Instance, new IntPtr(&___ret));
                }

                return ___ret
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
                ;
            }
        }
    }

    /// <summary>(Optional) Access via ImGui::GetPlatformIO().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3282"/></summary>
    // DEBUG: struct ImGuiPlatformIO
    // DEBUG: {
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG:     // Input - Backend interface/functions + Monitor List
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG: 
    // DEBUG:     // (Optional) Platform functions (e.g. Win32, GLFW, SDL2)
    // DEBUG:     // For reference, the second column shows which function are generally calling the Platform Functions:
    // DEBUG:     //   N = ImGui::NewFrame()                        ~ beginning of the dear imgui frame: read info from platform/OS windows (latest size/position)
    // DEBUG:     //   F = ImGui::Begin(), ImGui::EndFrame()        ~ during the dear imgui frame
    // DEBUG:     //   U = ImGui::UpdatePlatformWindows()           ~ after the dear imgui frame: create and update all platform/OS windows
    // DEBUG:     //   R = ImGui::RenderPlatformWindowsDefault()    ~ render
    // DEBUG:     //   D = ImGui::DestroyPlatformWindows()          ~ shutdown
    // DEBUG:     // The general idea is that NewFrame() we will read the current Platform/OS state, and UpdatePlatformWindows() will write to it.
    // DEBUG:     //
    // DEBUG:     // The functions are designed so we can mix and match 2 imgui_impl_xxxx files, one for the Platform (~window/input handling), one for Renderer.
    // DEBUG:     // Custom engine backends will often provide both Platform and Renderer interfaces and so may not need to use all functions.
    // DEBUG:     // Platform functions are typically called before their Renderer counterpart, apart from Destroy which are called the other way.
    // DEBUG: 
    // DEBUG:     // Platform function --------------------------------------------------- Called by -----
    // DEBUG:     void    (*Platform_CreateWindow)(ImGuiViewport* vp);                    // . . U . .  // Create a new platform window for the given viewport
    // DEBUG:     void    (*Platform_DestroyWindow)(ImGuiViewport* vp);                   // N . U . D  //
    // DEBUG:     void    (*Platform_ShowWindow)(ImGuiViewport* vp);                      // . . U . .  // Newly created windows are initially hidden so SetWindowPos/Size/Title can be called on them before showing the window
    // DEBUG:     void    (*Platform_SetWindowPos)(ImGuiViewport* vp, ImVec2 pos);        // . . U . .  // Set platform window position (given the upper-left corner of client area)
    // DEBUG:     ImVec2  (*Platform_GetWindowPos)(ImGuiViewport* vp);                    // N . . . .  //
    // DEBUG:     void    (*Platform_SetWindowSize)(ImGuiViewport* vp, ImVec2 size);      // . . U . .  // Set platform window client area size (ignoring OS decorations such as OS title bar etc.)
    // DEBUG:     ImVec2  (*Platform_GetWindowSize)(ImGuiViewport* vp);                   // N . . . .  // Get platform window client area size
    // DEBUG:     void    (*Platform_SetWindowFocus)(ImGuiViewport* vp);                  // N . . . .  // Move window to front and set input focus
    // DEBUG:     bool    (*Platform_GetWindowFocus)(ImGuiViewport* vp);                  // . . U . .  //
    // DEBUG:     bool    (*Platform_GetWindowMinimized)(ImGuiViewport* vp);              // N . . . .  // Get platform window minimized state. When minimized, we generally won't attempt to get/set size and contents will be culled more easily
    // DEBUG:     void    (*Platform_SetWindowTitle)(ImGuiViewport* vp, const char* str); // . . U . .  // Set platform window title (given an UTF-8 string)
    // DEBUG:     void    (*Platform_SetWindowAlpha)(ImGuiViewport* vp, float alpha);     // . . U . .  // (Optional) Setup global transparency (not per-pixel transparency)
    // DEBUG:     void    (*Platform_UpdateWindow)(ImGuiViewport* vp);                    // . . U . .  // (Optional) Called by UpdatePlatformWindows(). Optional hook to allow the platform backend from doing general book-keeping every frame.
    // DEBUG:     void    (*Platform_RenderWindow)(ImGuiViewport* vp, void* render_arg);  // . . . R .  // (Optional) Main rendering (platform side! This is often unused, or just setting a "current" context for OpenGL bindings). 'render_arg' is the value passed to RenderPlatformWindowsDefault().
    // DEBUG:     void    (*Platform_SwapBuffers)(ImGuiViewport* vp, void* render_arg);   // . . . R .  // (Optional) Call Present/SwapBuffers (platform side! This is often unused!). 'render_arg' is the value passed to RenderPlatformWindowsDefault().
    // DEBUG:     float   (*Platform_GetWindowDpiScale)(ImGuiViewport* vp);               // N . . . .  // (Optional) [BETA] FIXME-DPI: DPI handling: Return DPI scale for this viewport. 1.0f = 96 DPI.
    // DEBUG:     void    (*Platform_OnChangedViewport)(ImGuiViewport* vp);               // . F . . .  // (Optional) [BETA] FIXME-DPI: DPI handling: Called during Begin() every time the viewport we are outputting into changes, so backend has a chance to swap fonts to adjust style.
    // DEBUG:     int     (*Platform_CreateVkSurface)(ImGuiViewport* vp, ImU64 vk_inst, const void* vk_allocators, ImU64* out_vk_surface); // (Optional) For a Vulkan Renderer to call into Platform code (since the surface creation needs to tie them both).
    // DEBUG: 
    // DEBUG:     // (Optional) Renderer functions (e.g. DirectX, OpenGL, Vulkan)
    // DEBUG:     void    (*Renderer_CreateWindow)(ImGuiViewport* vp);                    // . . U . .  // Create swap chain, frame buffers etc. (called after Platform_CreateWindow)
    // DEBUG:     void    (*Renderer_DestroyWindow)(ImGuiViewport* vp);                   // N . U . D  // Destroy swap chain, frame buffers etc. (called before Platform_DestroyWindow)
    // DEBUG:     void    (*Renderer_SetWindowSize)(ImGuiViewport* vp, ImVec2 size);      // . . U . .  // Resize swap chain, frame buffers etc. (called after Platform_SetWindowSize)
    // DEBUG:     void    (*Renderer_RenderWindow)(ImGuiViewport* vp, void* render_arg);  // . . . R .  // (Optional) Clear framebuffer, setup render target, then render the viewport->DrawData. 'render_arg' is the value passed to RenderPlatformWindowsDefault().
    // DEBUG:     void    (*Renderer_SwapBuffers)(ImGuiViewport* vp, void* render_arg);   // . . . R .  // (Optional) Call Present/SwapBuffers. 'render_arg' is the value passed to RenderPlatformWindowsDefault().
    // DEBUG: 
    // DEBUG:     // (Optional) Monitor list
    // DEBUG:     // - Updated by: app/backend. Update every frame to dynamically support changing monitor or DPI configuration.
    // DEBUG:     // - Used by: dear imgui to query DPI info, clamp popups/tooltips within same monitor and not have them straddle monitors.
    // DEBUG:     ImVector<ImGuiPlatformMonitor>  Monitors;
    // DEBUG: 
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG:     // Output - List of viewports to render into platform windows
    // DEBUG:     //------------------------------------------------------------------
    // DEBUG: 
    // DEBUG:     // Viewports list (the list is updated by calling ImGui::EndFrame or ImGui::Render)
    // DEBUG:     // (in the future we will attempt to organize this feature to remove the need for a "main viewport")
    // DEBUG:     ImVector<ImGuiViewport*>        Viewports;                              // Main viewports, followed by all secondary viewports.
    // DEBUG:     ImGuiPlatformIO()               { memset(this, 0, sizeof(*this)); }     // Zero clear
    // DEBUG: }
    public unsafe partial class ImGuiPlatformIO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal IntPtr Platform_CreateWindow;
            internal IntPtr Platform_DestroyWindow;
            internal IntPtr Platform_ShowWindow;
            internal IntPtr Platform_SetWindowPos;
            internal IntPtr Platform_GetWindowPos;
            internal IntPtr Platform_SetWindowSize;
            internal IntPtr Platform_GetWindowSize;
            internal IntPtr Platform_SetWindowFocus;
            internal IntPtr Platform_GetWindowFocus;
            internal IntPtr Platform_GetWindowMinimized;
            internal IntPtr Platform_SetWindowTitle;
            internal IntPtr Platform_SetWindowAlpha;
            internal IntPtr Platform_UpdateWindow;
            internal IntPtr Platform_RenderWindow;
            internal IntPtr Platform_SwapBuffers;
            internal IntPtr Platform_GetWindowDpiScale;
            internal IntPtr Platform_OnChangedViewport;
            internal IntPtr Platform_CreateVkSurface;
            internal IntPtr Renderer_CreateWindow;
            internal IntPtr Renderer_DestroyWindow;
            internal IntPtr Renderer_SetWindowSize;
            internal IntPtr Renderer_RenderWindow;
            internal IntPtr Renderer_SwapBuffers;
            internal ImVector.__Internal Monitors;
            internal ImVector.__Internal Viewports;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPlatformIO@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPlatformIO@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImGuiPlatformIO@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern void dtor(IntPtr __instance);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPlatformIO@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPlatformIO@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??1ImGuiPlatformIO@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void dtor(IntPtr __instance);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiPlatformIO>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiPlatformIO>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiPlatformIO managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiPlatformIO>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiPlatformIO managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiPlatformIO __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiPlatformIO(native.ToPointer(), skipVTables);
        }

        internal static ImGuiPlatformIO __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiPlatformIO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiPlatformIO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiPlatformIO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiPlatformIO(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiPlatformIO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary>Zero clear.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3340"/></summary>
        // DEBUG: ImGuiPlatformIO()               { memset(this, 0, sizeof(*this)); }
        public ImGuiPlatformIO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiPlatformIO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>(Optional) Access via ImGui::GetPlatformIO().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3282"/></summary>
        // DEBUG: ImGuiPlatformIO
        public ImGuiPlatformIO(ImGuiPlatformIO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiPlatformIO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImGuiPlatformIO()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                if (Environment.Is64BitProcess)
                {
                    __Internal64.dtor(__Instance);
                }
                else
                {
                    __Internal32.dtor(__Instance);
                }

            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>U.<br/>Create a new platform window for the given viewport.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3302"/></summary>
        public Action_IntPtr PlatformCreateWindow
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_CreateWindow;
                return __ptr0 == IntPtr.Zero ? null : (Action_IntPtr)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Action_IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_CreateWindow = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>N . U . D.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3303"/></summary>
        public Action_IntPtr PlatformDestroyWindow
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_DestroyWindow;
                return __ptr0 == IntPtr.Zero ? null : (Action_IntPtr)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Action_IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_DestroyWindow = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>U.<br/>Newly created windows are initially hidden so SetWindowPos/Size/Title can be called on them before showing the window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3304"/></summary>
        public Action_IntPtr PlatformShowWindow
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_ShowWindow;
                return __ptr0 == IntPtr.Zero ? null : (Action_IntPtr)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Action_IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_ShowWindow = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>U.<br/>Set platform window position (given the upper-left corner of client area).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3305"/></summary>
        public Action_IntPtr_Numerics_Vector2 PlatformSetWindowPos
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_SetWindowPos;
                return __ptr0 == IntPtr.Zero ? null : (Action_IntPtr_Numerics_Vector2)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Action_IntPtr_Numerics_Vector2));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_SetWindowPos = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>N.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3306"/></summary>
        public Func_Numerics_Vector2_IntPtr PlatformGetWindowPos
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_GetWindowPos;
                return __ptr0 == IntPtr.Zero ? null : (Func_Numerics_Vector2_IntPtr)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Func_Numerics_Vector2_IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_GetWindowPos = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>U.<br/>Set platform window client area size (ignoring OS decorations such as OS title bar etc.).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3307"/></summary>
        public Action_IntPtr_Numerics_Vector2 PlatformSetWindowSize
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_SetWindowSize;
                return __ptr0 == IntPtr.Zero ? null : (Action_IntPtr_Numerics_Vector2)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Action_IntPtr_Numerics_Vector2));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_SetWindowSize = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>N.<br/>Get platform window client area size.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3308"/></summary>
        public Func_Numerics_Vector2_IntPtr PlatformGetWindowSize
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_GetWindowSize;
                return __ptr0 == IntPtr.Zero ? null : (Func_Numerics_Vector2_IntPtr)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Func_Numerics_Vector2_IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_GetWindowSize = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>N.<br/>Move window to front and set input focus.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3309"/></summary>
        public Action_IntPtr PlatformSetWindowFocus
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_SetWindowFocus;
                return __ptr0 == IntPtr.Zero ? null : (Action_IntPtr)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Action_IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_SetWindowFocus = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>U.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3310"/></summary>
        public Func_bool_IntPtr PlatformGetWindowFocus
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_GetWindowFocus;
                return __ptr0 == IntPtr.Zero ? null : (Func_bool_IntPtr)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Func_bool_IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_GetWindowFocus = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>N.<br/>Get platform window minimized state. When minimized, we generally won't attempt to get/set size and contents will be culled more easily.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3311"/></summary>
        public Func_bool_IntPtr PlatformGetWindowMinimized
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_GetWindowMinimized;
                return __ptr0 == IntPtr.Zero ? null : (Func_bool_IntPtr)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Func_bool_IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_GetWindowMinimized = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>U.<br/>Set platform window title (given an UTF-8 string).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3312"/></summary>
        public ImSetClipboardTextHandler PlatformSetWindowTitle
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_SetWindowTitle;
                return __ptr0 == IntPtr.Zero ? null : (ImSetClipboardTextHandler)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(ImSetClipboardTextHandler));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_SetWindowTitle = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>U.<br/>(Optional) Setup global transparency (not per-pixel transparency).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3313"/></summary>
        public Action_IntPtr_float PlatformSetWindowAlpha
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_SetWindowAlpha;
                return __ptr0 == IntPtr.Zero ? null : (Action_IntPtr_float)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Action_IntPtr_float));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_SetWindowAlpha = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>U.<br/>(Optional) Called by UpdatePlatformWindows(). Optional hook to allow the platform backend from doing general book-keeping every frame.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3314"/></summary>
        public Action_IntPtr PlatformUpdateWindow
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_UpdateWindow;
                return __ptr0 == IntPtr.Zero ? null : (Action_IntPtr)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Action_IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_UpdateWindow = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>R.<br/>(Optional) Main rendering (platform side! This is often unused, or just setting a "current" context for OpenGL bindings). 'render_arg' is the value passed to RenderPlatformWindowsDefault().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3315"/></summary>
        public ImSetPlatformImeDataHandler PlatformRenderWindow
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_RenderWindow;
                return __ptr0 == IntPtr.Zero ? null : (ImSetPlatformImeDataHandler)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(ImSetPlatformImeDataHandler));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_RenderWindow = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>R.<br/>(Optional) Call Present/SwapBuffers (platform side! This is often unused!). 'render_arg' is the value passed to RenderPlatformWindowsDefault().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3316"/></summary>
        public ImSetPlatformImeDataHandler PlatformSwapBuffers
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_SwapBuffers;
                return __ptr0 == IntPtr.Zero ? null : (ImSetPlatformImeDataHandler)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(ImSetPlatformImeDataHandler));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_SwapBuffers = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>N.<br/>(Optional) [BETA] FIXME-DPI: DPI handling: Return DPI scale for this viewport. 1.0f = 96 DPI.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3317"/></summary>
        public Func_float_IntPtr PlatformGetWindowDpiScale
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_GetWindowDpiScale;
                return __ptr0 == IntPtr.Zero ? null : (Func_float_IntPtr)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Func_float_IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_GetWindowDpiScale = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>F.<br/>(Optional) [BETA] FIXME-DPI: DPI handling: Called during Begin() every time the viewport we are outputting into changes, so backend has a chance to swap fonts to adjust style.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3318"/></summary>
        public Action_IntPtr PlatformOnChangedViewport
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_OnChangedViewport;
                return __ptr0 == IntPtr.Zero ? null : (Action_IntPtr)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Action_IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_OnChangedViewport = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>(Optional) For a Vulkan Renderer to call into Platform code (since the surface creation needs to tie them both).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3319"/></summary>
        public Func_int_IntPtr_ulong_IntPtr_ulongPtr PlatformCreateVkSurface
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Platform_CreateVkSurface;
                return __ptr0 == IntPtr.Zero ? null : (Func_int_IntPtr_ulong_IntPtr_ulongPtr)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Func_int_IntPtr_ulong_IntPtr_ulongPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Platform_CreateVkSurface = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>U.<br/>Create swap chain, frame buffers etc. (called after Platform_CreateWindow).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3322"/></summary>
        public Action_IntPtr RendererCreateWindow
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Renderer_CreateWindow;
                return __ptr0 == IntPtr.Zero ? null : (Action_IntPtr)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Action_IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Renderer_CreateWindow = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>N . U . D.<br/>Destroy swap chain, frame buffers etc. (called before Platform_DestroyWindow).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3323"/></summary>
        public Action_IntPtr RendererDestroyWindow
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Renderer_DestroyWindow;
                return __ptr0 == IntPtr.Zero ? null : (Action_IntPtr)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Action_IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Renderer_DestroyWindow = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>U.<br/>Resize swap chain, frame buffers etc. (called after Platform_SetWindowSize).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3324"/></summary>
        public Action_IntPtr_Numerics_Vector2 RendererSetWindowSize
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Renderer_SetWindowSize;
                return __ptr0 == IntPtr.Zero ? null : (Action_IntPtr_Numerics_Vector2)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(Action_IntPtr_Numerics_Vector2));
            }

            set
            {
                ((__Internal*)__Instance)->Renderer_SetWindowSize = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>R.<br/>(Optional) Clear framebuffer, setup render target, then render the viewport-&gt;DrawData. 'render_arg' is the value passed to RenderPlatformWindowsDefault().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3325"/></summary>
        public ImSetPlatformImeDataHandler RendererRenderWindow
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Renderer_RenderWindow;
                return __ptr0 == IntPtr.Zero ? null : (ImSetPlatformImeDataHandler)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(ImSetPlatformImeDataHandler));
            }

            set
            {
                ((__Internal*)__Instance)->Renderer_RenderWindow = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>R.<br/>(Optional) Call Present/SwapBuffers. 'render_arg' is the value passed to RenderPlatformWindowsDefault().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3326"/></summary>
        public ImSetPlatformImeDataHandler RendererSwapBuffers
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Renderer_SwapBuffers;
                return __ptr0 == IntPtr.Zero ? null : (ImSetPlatformImeDataHandler)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(ImSetPlatformImeDataHandler));
            }

            set
            {
                ((__Internal*)__Instance)->Renderer_SwapBuffers = value == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>(Optional) Monitor list.<br/>- Updated by: app/backend. Update every frame to dynamically support changing monitor or DPI configuration.<br/>- Used by: dear imgui to query DPI info, clamp popups/tooltips within same monitor and not have them straddle monitors.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3331"/></summary>
        public ImVector<ImGuiPlatformMonitor> Monitors
        {
            get
            {
                return new ImVector<ImGuiPlatformMonitor>(Unsafe.As<ImVector.__Internal, ImVector<ImGuiPlatformMonitor>.__Internal>(ref ((__Internal*)__Instance)->Monitors))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Main viewports, followed by all secondary viewports.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3339"/></summary>
        public ImVector<ImGuiViewport> Viewports
        {
            get
            {
                return new ImVector<ImGuiViewport>(Unsafe.As<ImVector.__Internal, ImVector<ImGuiViewport>.__Internal>(ref ((__Internal*)__Instance)->Viewports))
                /* DEBUG: TypeMapImVector.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }
        }
    }

    /// <summary>(Optional) This is required when enabling multi-viewport. Represent the bounds of each connected monitor/display and their DPI.<br/>We use this information for multiple DPI support + clamping the position of popups and tooltips so they don't straddle multiple monitors.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3345"/></summary>
    // DEBUG: struct ImGuiPlatformMonitor
    // DEBUG: {
    // DEBUG:     ImVec2  MainPos, MainSize;      // Coordinates of the area displayed on this monitor (Min = upper left, Max = bottom right)
    // DEBUG:     ImVec2  WorkPos, WorkSize;      // Coordinates without task bars / side bars / menu bars. Used to avoid positioning popups/tooltips inside this region. If you don't have this info, please copy the value for MainPos/MainSize.
    // DEBUG:     float   DpiScale;               // 1.0f = 96 DPI
    // DEBUG:     void*   PlatformHandle;         // Backend dependant data (e.g. HMONITOR, GLFWmonitor*, SDL Display Index, NSScreen*)
    // DEBUG:     ImGuiPlatformMonitor()          { MainPos = MainSize = WorkPos = WorkSize = ImVec2(0, 0); DpiScale = 1.0f; PlatformHandle = NULL; }
    // DEBUG: }
    public unsafe partial class ImGuiPlatformMonitor : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal Vector2 MainPos;
            internal Vector2 MainSize;
            internal Vector2 WorkPos;
            internal Vector2 WorkSize;
            internal float DpiScale;
            internal IntPtr PlatformHandle;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPlatformMonitor@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPlatformMonitor@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPlatformMonitor@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPlatformMonitor@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiPlatformMonitor>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiPlatformMonitor>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiPlatformMonitor managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiPlatformMonitor>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiPlatformMonitor managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiPlatformMonitor __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiPlatformMonitor(native.ToPointer(), skipVTables);
        }

        internal static ImGuiPlatformMonitor __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiPlatformMonitor)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiPlatformMonitor __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiPlatformMonitor(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiPlatformMonitor(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiPlatformMonitor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3351"/></summary>
        // DEBUG: ImGuiPlatformMonitor()          { MainPos = MainSize = WorkPos = WorkSize = ImVec2(0, 0); DpiScale = 1.0f; PlatformHandle = NULL; }
        public ImGuiPlatformMonitor()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiPlatformMonitor.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>(Optional) This is required when enabling multi-viewport. Represent the bounds of each connected monitor/display and their DPI.<br/>We use this information for multiple DPI support + clamping the position of popups and tooltips so they don't straddle multiple monitors.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3345"/></summary>
        // DEBUG: ImGuiPlatformMonitor
        public ImGuiPlatformMonitor(ImGuiPlatformMonitor _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiPlatformMonitor.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImGuiPlatformMonitor()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Coordinates of the area displayed on this monitor (Min = upper left, Max = bottom right).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3347"/></summary>
        public Vector2 MainPos
        {
            get
            {
                return ((__Internal*)__Instance)->MainPos
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->MainPos = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Coordinates of the area displayed on this monitor (Min = upper left, Max = bottom right).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3347"/></summary>
        public Vector2 MainSize
        {
            get
            {
                return ((__Internal*)__Instance)->MainSize
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->MainSize = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Coordinates without task bars / side bars / menu bars. Used to avoid positioning popups/tooltips inside this region. If you don't have this info, please copy the value for MainPos/MainSize.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3348"/></summary>
        public Vector2 WorkPos
        {
            get
            {
                return ((__Internal*)__Instance)->WorkPos
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->WorkPos = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Coordinates without task bars / side bars / menu bars. Used to avoid positioning popups/tooltips inside this region. If you don't have this info, please copy the value for MainPos/MainSize.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3348"/></summary>
        public Vector2 WorkSize
        {
            get
            {
                return ((__Internal*)__Instance)->WorkSize
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->WorkSize = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>1.0f = 96 DPI.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3349"/></summary>
        public float DpiScale
        {
            get
            {
                return ((__Internal*)__Instance)->DpiScale;
            }

            set
            {
                ((__Internal*)__Instance)->DpiScale = value;
            }
        }

        /// <summary>Backend dependant data (e.g. HMONITOR, GLFWmonitor*, SDL Display Index, NSScreen*).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3350"/></summary>
        public IntPtr PlatformHandle
        {
            get
            {
                return ((__Internal*)__Instance)->PlatformHandle;
            }

            set
            {
                ((__Internal*)__Instance)->PlatformHandle = (IntPtr)value;
            }
        }
    }

    /// <summary>(Optional) Support for IME (Input Method Editor) via the io.SetPlatformImeDataFn() function.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3355"/></summary>
    // DEBUG: struct ImGuiPlatformImeData
    // DEBUG: {
    // DEBUG:     bool    WantVisible;        // A widget wants the IME to be visible
    // DEBUG:     ImVec2  InputPos;           // Position of the input cursor
    // DEBUG:     float   InputLineHeight;    // Line height
    // DEBUG: 
    // DEBUG:     ImGuiPlatformImeData() { memset(this, 0, sizeof(*this)); }
    // DEBUG: }
    public unsafe partial class ImGuiPlatformImeData : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Internal
        {
            internal byte WantVisible;
            internal Vector2 InputPos;
            internal float InputLineHeight;
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPlatformImeData@@QAE@XZ", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPlatformImeData@@QAE@$$QAU0@@Z", CallingConvention = CallingConvention.ThisCall)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPlatformImeData@@QEAA@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "??0ImGuiPlatformImeData@@QEAA@$$QEAU0@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr ctor(IntPtr __instance, IntPtr _0);

        }

        internal IntPtr __Instance { get; set; }

        internal static readonly new ConcurrentDictionary<IntPtr, WeakReference<ImGuiPlatformImeData>> NativeToManagedMap = new ConcurrentDictionary<IntPtr, WeakReference<ImGuiPlatformImeData>>();
        internal static void __RecordNativeToManagedMapping(IntPtr native, ImGuiPlatformImeData managed)
        {
            NativeToManagedMap[native] = new WeakReference<ImGuiPlatformImeData>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out ImGuiPlatformImeData managed)
        {
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private protected bool __ownsNativeInstance;
        internal static ImGuiPlatformImeData __CreateInstance(IntPtr native, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            return new ImGuiPlatformImeData(native.ToPointer(), skipVTables);
        }

        internal static ImGuiPlatformImeData __GetOrCreateInstance(IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ImGuiPlatformImeData)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ImGuiPlatformImeData __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ImGuiPlatformImeData(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*)ret = native;
            return ret.ToPointer();
        }

        private ImGuiPlatformImeData(__Internal native, bool skipVTables = false) : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        private protected ImGuiPlatformImeData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new IntPtr(native);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3361"/></summary>
        // DEBUG: ImGuiPlatformImeData() { memset(this, 0, sizeof(*this)); }
        public ImGuiPlatformImeData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiPlatformImeData.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance);
            }
            else
            {
                __Internal32.ctor(__Instance);
            }
        }

        /// <summary>(Optional) Support for IME (Input Method Editor) via the io.SetPlatformImeDataFn() function.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3355"/></summary>
        // DEBUG: ImGuiPlatformImeData
        public ImGuiPlatformImeData(ImGuiPlatformImeData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(ImGuiPlatformImeData.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ctor(__Instance, __arg0);
            }
            else
            {
                __Internal32.ctor(__Instance, __arg0);
            }
        }

        /// <inheritdoc/>
        ~ImGuiPlatformImeData()
        {
            Dispose(false, callNativeDtor: __ownsNativeInstance);
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor: __ownsNativeInstance);
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);
        private protected virtual void Dispose(bool disposing, bool callNativeDtor)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>A widget wants the IME to be visible.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3357"/></summary>
        public bool WantVisible
        {
            get
            {
                return ((__Internal*)__Instance)->WantVisible != 0;
            }

            set
            {
                ((__Internal*)__Instance)->WantVisible = (byte)(value ? 1 : 0);
            }
        }

        /// <summary>Position of the input cursor.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3358"/></summary>
        public Vector2 InputPos
        {
            get
            {
                return ((__Internal*)__Instance)->InputPos
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: False, ReturnVarName: True */
                ;
            }

            set
            {
                ((__Internal*)__Instance)->InputPos = value
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 2 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: False, ReturnVarName: True */
                ;
            }
        }

        /// <summary>Line height.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3359"/></summary>
        public float InputLineHeight
        {
            get
            {
                return ((__Internal*)__Instance)->InputLineHeight;
            }

            set
            {
                ((__Internal*)__Instance)->InputLineHeight = value;
            }
        }
    }

    public unsafe partial class ImGui
    {
        internal partial struct __Internal
        {
        }

        private partial struct __Internal32
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CreateContext@ImGui@@YAPAUImGuiContext@@PAUImFontAtlas@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr CreateContext(IntPtr shared_font_atlas);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DestroyContext@ImGui@@YAXPAUImGuiContext@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void DestroyContext(IntPtr ctx);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCurrentContext@ImGui@@YAPAUImGuiContext@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetCurrentContext();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetCurrentContext@ImGui@@YAXPAUImGuiContext@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetCurrentContext(IntPtr ctx);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetIO@ImGui@@YAAAUImGuiIO@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetIO();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetStyle@ImGui@@YAAAUImGuiStyle@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetStyle();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?NewFrame@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void NewFrame();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndFrame@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndFrame();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Render@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Render();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetDrawData@ImGui@@YAPAUImDrawData@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetDrawData();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowDemoWindow@ImGui@@YAXPA_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowDemoWindow(bool* p_open);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowMetricsWindow@ImGui@@YAXPA_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowMetricsWindow(bool* p_open);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowDebugLogWindow@ImGui@@YAXPA_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowDebugLogWindow(bool* p_open);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowIDStackToolWindow@ImGui@@YAXPA_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowIDStackToolWindow(bool* p_open);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowAboutWindow@ImGui@@YAXPA_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowAboutWindow(bool* p_open);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowStyleEditor(IntPtr @ref);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowStyleSelector@ImGui@@YA_NPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ShowStyleSelector([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowFontSelector@ImGui@@YAXPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowFontSelector([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowUserGuide@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowUserGuide();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetVersion@ImGui@@YAPBDXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetVersion();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?StyleColorsDark@ImGui@@YAXPAUImGuiStyle@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void StyleColorsDark(IntPtr dst);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?StyleColorsLight@ImGui@@YAXPAUImGuiStyle@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void StyleColorsLight(IntPtr dst);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?StyleColorsClassic@ImGui@@YAXPAUImGuiStyle@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void StyleColorsClassic(IntPtr dst);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Begin@ImGui@@YA_NPBDPA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Begin([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, bool* p_open, ImGuiWindowFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?End@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void End();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginChild([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, IntPtr size, bool border, ImGuiWindowFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginChild@ImGui@@YA_NIABUImVec2@@_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginChild_1(uint id, IntPtr size, bool border, ImGuiWindowFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndChild@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndChild();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsWindowAppearing@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowAppearing();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsWindowCollapsed@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowCollapsed();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsWindowFocused@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowFocused(ImGuiFocusedFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsWindowHovered@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowHovered(ImGuiHoveredFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowDrawList@ImGui@@YAPAUImDrawList@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetWindowDrawList();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowDpiScale@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetWindowDpiScale();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowPos@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetWindowPos(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowSize@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetWindowSize(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowWidth@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetWindowWidth();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowHeight@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetWindowHeight();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowViewport@ImGui@@YAPAUImGuiViewport@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetWindowViewport();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowPos@ImGui@@YAXABUImVec2@@H0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowPos(IntPtr pos, ImGuiCond cond, IntPtr pivot);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowSize@ImGui@@YAXABUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowSize(IntPtr size, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowSizeConstraints@ImGui@@YAXABUImVec2@@0P6AXPAUImGuiSizeCallbackData@@@ZPAX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowSizeConstraints(IntPtr size_min, IntPtr size_max, IntPtr custom_callback, IntPtr custom_callback_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowContentSize@ImGui@@YAXABUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowContentSize(IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowCollapsed@ImGui@@YAX_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowCollapsed(bool collapsed, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowFocus@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowFocus();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowScroll@ImGui@@YAXABUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowScroll(IntPtr scroll);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowBgAlpha@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowBgAlpha(float alpha);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowViewport@ImGui@@YAXI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowViewport(uint viewport_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowPos@ImGui@@YAXABUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowPos(IntPtr pos, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowSize@ImGui@@YAXABUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowSize(IntPtr size, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowCollapsed@ImGui@@YAX_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowCollapsed(bool collapsed, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowFocus@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowFocus();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowFontScale@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowFontScale(float scale);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowPos@ImGui@@YAXPBDABUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowPos([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, IntPtr pos, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowSize@ImGui@@YAXPBDABUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowSize([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, IntPtr size, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowCollapsed@ImGui@@YAXPBD_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowCollapsed([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, bool collapsed, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowFocus@ImGui@@YAXPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowFocus([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetContentRegionAvail(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetContentRegionMax@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetContentRegionMax(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowContentRegionMin@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetWindowContentRegionMin(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowContentRegionMax@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetWindowContentRegionMax(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetScrollX@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetScrollX();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetScrollY@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetScrollY();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetScrollX@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetScrollX(float scroll_x);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetScrollY@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetScrollY(float scroll_y);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetScrollMaxX@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetScrollMaxX();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetScrollMaxY@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetScrollMaxY();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetScrollHereX@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetScrollHereX(float center_x_ratio);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetScrollHereY@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetScrollHereY(float center_y_ratio);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetScrollFromPosX@ImGui@@YAXMM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetScrollFromPosX(float local_x, float center_x_ratio);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetScrollFromPosY@ImGui@@YAXMM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetScrollFromPosY(float local_y, float center_y_ratio);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushFont@ImGui@@YAXPAUImFont@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushFont(IntPtr font);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopFont@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopFont();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushStyleColor@ImGui@@YAXHI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushStyleColor(ImGuiCol idx, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushStyleColor@ImGui@@YAXHABUImVec4@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushStyleColor(ImGuiCol idx, IntPtr col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopStyleColor@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopStyleColor(int count);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushStyleVar@ImGui@@YAXHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushStyleVar(ImGuiStyleVar idx, float val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushStyleVar@ImGui@@YAXHABUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushStyleVar(ImGuiStyleVar idx, IntPtr val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopStyleVar@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopStyleVar(int count);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushTabStop@ImGui@@YAX_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushTabStop(bool tab_stop);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopTabStop@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopTabStop();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushButtonRepeat@ImGui@@YAX_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushButtonRepeat(bool repeat);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopButtonRepeat@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopButtonRepeat();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushItemWidth@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushItemWidth(float item_width);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopItemWidth@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopItemWidth();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextItemWidth@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextItemWidth(float item_width);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CalcItemWidth@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float CalcItemWidth();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushTextWrapPos@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushTextWrapPos(float wrap_local_pos_x);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopTextWrapPos@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopTextWrapPos();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFont@ImGui@@YAPAUImFont@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetFont();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFontSize@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetFontSize();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFontTexUvWhitePixel@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetFontTexUvWhitePixel(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetColorU32@ImGui@@YAIHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetColorU32(ImGuiCol idx, float alpha_mul);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetColorU32@ImGui@@YAIABUImVec4@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetColorU32(IntPtr col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetColorU32@ImGui@@YAII@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetColorU32(uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetStyleColorVec4@ImGui@@YAABUImVec4@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetStyleColorVec4(ImGuiCol idx);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetCursorScreenPos(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetCursorScreenPos@ImGui@@YAXABUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetCursorScreenPos(IntPtr pos);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCursorPos@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetCursorPos(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCursorPosX@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetCursorPosX();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCursorPosY@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetCursorPosY();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetCursorPos@ImGui@@YAXABUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetCursorPos(IntPtr local_pos);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetCursorPosX@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetCursorPosX(float local_x);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetCursorPosY@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetCursorPosY(float local_y);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCursorStartPos@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetCursorStartPos(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Separator@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Separator();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SameLine@ImGui@@YAXMM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SameLine(float offset_from_start_x, float spacing);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?NewLine@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void NewLine();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Spacing@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Spacing();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Dummy@ImGui@@YAXABUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Dummy(IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Indent@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Indent(float indent_w);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Unindent@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Unindent(float indent_w);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginGroup@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void BeginGroup();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndGroup@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndGroup();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AlignTextToFramePadding@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AlignTextToFramePadding();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetTextLineHeight@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetTextLineHeight();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetTextLineHeightWithSpacing@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetTextLineHeightWithSpacing();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFrameHeight@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetFrameHeight();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFrameHeightWithSpacing@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetFrameHeightWithSpacing();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushID@ImGui@@YAXPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushID([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushID@ImGui@@YAXPBD0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushID([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id_begin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushID@ImGui@@YAXPBX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushID(IntPtr ptr_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushID@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushID_1(int int_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopID@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopID();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetID@ImGui@@YAIPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetID([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetID@ImGui@@YAIPBD0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetID([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id_begin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetID@ImGui@@YAIPBX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetID(IntPtr ptr_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextUnformatted@ImGui@@YAXPBD0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextUnformatted([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Text@ImGui@@YAXPBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Text([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextV@ImGui@@YAXPBDPAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextColored@ImGui@@YAXABUImVec4@@PBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextColored(IntPtr col, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextColoredV@ImGui@@YAXABUImVec4@@PBDPAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextColoredV(IntPtr col, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextDisabled@ImGui@@YAXPBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextDisabled([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextDisabledV@ImGui@@YAXPBDPAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextDisabledV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextWrapped@ImGui@@YAXPBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextWrapped([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextWrappedV@ImGui@@YAXPBDPAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextWrappedV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LabelText@ImGui@@YAXPBD0ZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LabelText([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LabelTextV@ImGui@@YAXPBD0PAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LabelTextV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BulletText@ImGui@@YAXPBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void BulletText([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BulletTextV@ImGui@@YAXPBDPAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void BulletTextV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SeparatorText@ImGui@@YAXPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SeparatorText([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Button@ImGui@@YA_NPBDABUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Button([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SmallButton@ImGui@@YA_NPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SmallButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InvisibleButton@ImGui@@YA_NPBDABUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InvisibleButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, IntPtr size, ImGuiButtonFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ArrowButton@ImGui@@YA_NPBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ArrowButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiDir dir);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Checkbox@ImGui@@YA_NPBDPA_N@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Checkbox([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, bool* v);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CheckboxFlags@ImGui@@YA_NPBDPAHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckboxFlags([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* flags, int flags_value);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CheckboxFlags@ImGui@@YA_NPBDPAII@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckboxFlags_1([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, uint* flags, uint flags_value);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?RadioButton@ImGui@@YA_NPBD_N@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool RadioButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, bool active);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?RadioButton@ImGui@@YA_NPBDPAHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool RadioButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, int v_button);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ProgressBar@ImGui@@YAXMABUImVec2@@PBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ProgressBar(float fraction, IntPtr size_arg, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string overlay);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Bullet@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Bullet();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Image@ImGui@@YAXPAXABUImVec2@@11ABUImVec4@@2@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Image(IntPtr user_texture_id, IntPtr size, IntPtr uv0, IntPtr uv1, IntPtr tint_col, IntPtr border_col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ImageButton@ImGui@@YA_NPBDPAXABUImVec2@@22ABUImVec4@@3@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImageButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, IntPtr user_texture_id, IntPtr image_size, IntPtr uv0, IntPtr uv1, IntPtr bg_col, IntPtr tint_col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginCombo@ImGui@@YA_NPBD0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginCombo([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string preview_value, ImGuiComboFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndCombo@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndCombo();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Combo@ImGui@@YA_NPBDPAHQBQBDHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Combo([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* current_item, [MarshalAs(UnmanagedType.LPArray)] string[] items, int items_count, int popup_max_height_in_items);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Combo@ImGui@@YA_NPBDPAH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Combo([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* current_item, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string items_separated_by_zeros, int popup_max_height_in_items);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Combo@ImGui@@YA_NPBDPAHP6APBDPAXH@Z2HH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Combo([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* current_item, IntPtr getter, IntPtr user_data, int items_count, int popup_max_height_in_items);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragFloat@ImGui@@YA_NPBDPAMMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragFloat([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_speed, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragFloat2@ImGui@@YA_NPBDQAMMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragFloat2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_speed, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragFloat3@ImGui@@YA_NPBDQAMMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragFloat3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_speed, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragFloat4@ImGui@@YA_NPBDQAMMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragFloat4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_speed, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragFloatRange2@ImGui@@YA_NPBDPAM1MMM00H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragFloatRange2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format_max, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragInt@ImGui@@YA_NPBDPAHMHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragInt([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, float v_speed, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragInt2@ImGui@@YA_NPBDQAHMHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragInt2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, float v_speed, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragInt3@ImGui@@YA_NPBDQAHMHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragInt3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, float v_speed, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragInt4@ImGui@@YA_NPBDQAHMHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragInt4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, float v_speed, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragIntRange2@ImGui@@YA_NPBDPAH1MHH00H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragIntRange2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format_max, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragScalar@ImGui@@YA_NPBDHPAXMPBX20H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragScalar([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiDataType data_type, IntPtr p_data, float v_speed, IntPtr p_min, IntPtr p_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragScalarN@ImGui@@YA_NPBDHPAXHMPBX20H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragScalarN([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed, IntPtr p_min, IntPtr p_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderFloat@ImGui@@YA_NPBDPAMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderFloat([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderFloat2@ImGui@@YA_NPBDQAMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderFloat2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderFloat3@ImGui@@YA_NPBDQAMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderFloat3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderFloat4@ImGui@@YA_NPBDQAMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderFloat4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderAngle@ImGui@@YA_NPBDPAMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderAngle([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v_rad, float v_degrees_min, float v_degrees_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderInt@ImGui@@YA_NPBDPAHHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderInt([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderInt2@ImGui@@YA_NPBDQAHHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderInt2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderInt3@ImGui@@YA_NPBDQAHHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderInt3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderInt4@ImGui@@YA_NPBDQAHHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderInt4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderScalar@ImGui@@YA_NPBDHPAXPBX20H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderScalar([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderScalarN@ImGui@@YA_NPBDHPAXHPBX20H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderScalarN([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, IntPtr p_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?VSliderFloat@ImGui@@YA_NPBDABUImVec2@@PAMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool VSliderFloat([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, IntPtr size, float* v, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?VSliderInt@ImGui@@YA_NPBDABUImVec2@@PAHHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool VSliderInt([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, IntPtr size, int* v, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?VSliderScalar@ImGui@@YA_NPBDABUImVec2@@HPAXPBX30H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool VSliderScalar([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, IntPtr size, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputText([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, sbyte* buf, UIntPtr buf_size, ImGuiInputTextFlags flags, IntPtr callback, IntPtr user_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputTextMultiline@ImGui@@YA_NPBDPADIABUImVec2@@HP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputTextMultiline([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, sbyte* buf, UIntPtr buf_size, IntPtr size, ImGuiInputTextFlags flags, IntPtr callback, IntPtr user_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputTextWithHint@ImGui@@YA_NPBD0PADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputTextWithHint([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string hint, sbyte* buf, UIntPtr buf_size, ImGuiInputTextFlags flags, IntPtr callback, IntPtr user_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputFloat@ImGui@@YA_NPBDPAMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputFloat([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float step, float step_fast, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputFloat2@ImGui@@YA_NPBDQAM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputFloat2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputFloat3@ImGui@@YA_NPBDQAM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputFloat3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputFloat4@ImGui@@YA_NPBDQAM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputFloat4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputInt@ImGui@@YA_NPBDPAHHHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputInt([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, int step, int step_fast, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputInt2@ImGui@@YA_NPBDQAHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputInt2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputInt3@ImGui@@YA_NPBDQAHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputInt3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputInt4@ImGui@@YA_NPBDQAHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputInt4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputDouble@ImGui@@YA_NPBDPANNN0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputDouble([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, double* v, double step, double step_fast, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputScalar@ImGui@@YA_NPBDHPAXPBX20H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputScalar([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_step, IntPtr p_step_fast, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputScalarN@ImGui@@YA_NPBDHPAXHPBX20H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputScalarN([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_step, IntPtr p_step_fast, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorEdit3@ImGui@@YA_NPBDQAMH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColorEdit3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* col, ImGuiColorEditFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorEdit4@ImGui@@YA_NPBDQAMH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColorEdit4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* col, ImGuiColorEditFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorPicker3@ImGui@@YA_NPBDQAMH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColorPicker3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* col, ImGuiColorEditFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorPicker4@ImGui@@YA_NPBDQAMHPBM@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColorPicker4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* col, ImGuiColorEditFlags flags, float* ref_col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorButton@ImGui@@YA_NPBDABUImVec4@@HABUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColorButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string desc_id, IntPtr col, ImGuiColorEditFlags flags, IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetColorEditOptions@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetColorEditOptions(ImGuiColorEditFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNode@ImGui@@YA_NPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNode([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNode@ImGui@@YA_NPBD0ZZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNode([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNode@ImGui@@YA_NPBXPBDZZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNode(IntPtr ptr_id, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNodeV@ImGui@@YA_NPBD0PAD@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNodeV@ImGui@@YA_NPBXPBDPAD@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeV(IntPtr ptr_id, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNodeEx@ImGui@@YA_NPBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeEx([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiTreeNodeFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNodeEx@ImGui@@YA_NPBDH0ZZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeEx([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiTreeNodeFlags flags, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNodeEx@ImGui@@YA_NPBXHPBDZZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeEx(IntPtr ptr_id, ImGuiTreeNodeFlags flags, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNodeExV@ImGui@@YA_NPBDH0PAD@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeExV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiTreeNodeFlags flags, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNodeExV@ImGui@@YA_NPBXHPBDPAD@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeExV(IntPtr ptr_id, ImGuiTreeNodeFlags flags, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreePush@ImGui@@YAXPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TreePush([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreePush@ImGui@@YAXPBX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TreePush(IntPtr ptr_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreePop@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TreePop();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetTreeNodeToLabelSpacing();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CollapsingHeader@ImGui@@YA_NPBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CollapsingHeader([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiTreeNodeFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CollapsingHeader@ImGui@@YA_NPBDPA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CollapsingHeader([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, bool* p_visible, ImGuiTreeNodeFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextItemOpen@ImGui@@YAX_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextItemOpen(bool is_open, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Selectable([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, bool selected, ImGuiSelectableFlags flags, IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Selectable@ImGui@@YA_NPBDPA_NHABUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Selectable_1([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, bool* p_selected, ImGuiSelectableFlags flags, IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginListBox@ImGui@@YA_NPBDABUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginListBox([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndListBox@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndListBox();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ListBox@ImGui@@YA_NPBDPAHQBQBDHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ListBox([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* current_item, [MarshalAs(UnmanagedType.LPArray)] string[] items, int items_count, int height_in_items);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ListBox@ImGui@@YA_NPBDPAHP6APBDPAXH@Z2HH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ListBox([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* current_item, IntPtr getter, IntPtr user_data, int items_count, int height_in_items);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PlotLines@ImGui@@YAXPBDPBMHH0MMUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PlotLines([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* values, int values_count, int values_offset, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string overlay_text, float scale_min, float scale_max, Vector2 graph_size, int stride);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PlotLines@ImGui@@YAXPBDP6AMPAXH@Z1HH0MMUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PlotLines([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string overlay_text, float scale_min, float scale_max, Vector2 graph_size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PlotHistogram@ImGui@@YAXPBDPBMHH0MMUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PlotHistogram([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* values, int values_count, int values_offset, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string overlay_text, float scale_min, float scale_max, Vector2 graph_size, int stride);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PlotHistogram@ImGui@@YAXPBDP6AMPAXH@Z1HH0MMUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PlotHistogram([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string overlay_text, float scale_min, float scale_max, Vector2 graph_size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Value@ImGui@@YAXPBD_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Value([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string prefix, bool b);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Value@ImGui@@YAXPBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Value_1([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string prefix, int v);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Value@ImGui@@YAXPBDI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Value_2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string prefix, uint v);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Value@ImGui@@YAXPBDM0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Value([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string prefix, float v, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string float_format);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginMenuBar@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginMenuBar();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndMenuBar@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndMenuBar();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginMainMenuBar@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginMainMenuBar();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndMainMenuBar@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndMainMenuBar();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginMenu@ImGui@@YA_NPBD_N@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginMenu([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, bool enabled);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndMenu@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndMenu();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?MenuItem@ImGui@@YA_NPBD0_N1@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool MenuItem([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string shortcut, bool selected, bool enabled);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool MenuItem_1([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string shortcut, bool* p_selected, bool enabled);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginTooltip@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginTooltip();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndTooltip@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndTooltip();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetTooltip@ImGui@@YAXPBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetTooltip([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetTooltipV@ImGui@@YAXPBDPAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetTooltipV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginItemTooltip@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginItemTooltip();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetItemTooltip@ImGui@@YAXPBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetItemTooltip([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetItemTooltipV@ImGui@@YAXPBDPAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetItemTooltipV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginPopup@ImGui@@YA_NPBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopup([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiWindowFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginPopupModal@ImGui@@YA_NPBDPA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopupModal([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, bool* p_open, ImGuiWindowFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndPopup@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndPopup();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?OpenPopup@ImGui@@YAXPBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void OpenPopup([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiPopupFlags popup_flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?OpenPopup@ImGui@@YAXIH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void OpenPopup_1(uint id, ImGuiPopupFlags popup_flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?OpenPopupOnItemClick@ImGui@@YAXPBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void OpenPopupOnItemClick([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiPopupFlags popup_flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CloseCurrentPopup@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void CloseCurrentPopup();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginPopupContextItem@ImGui@@YA_NPBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopupContextItem([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiPopupFlags popup_flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginPopupContextWindow@ImGui@@YA_NPBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopupContextWindow([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiPopupFlags popup_flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginPopupContextVoid@ImGui@@YA_NPBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopupContextVoid([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiPopupFlags popup_flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsPopupOpen@ImGui@@YA_NPBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPopupOpen([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiPopupFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginTable@ImGui@@YA_NPBDHHABUImVec2@@M@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginTable([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, int column, ImGuiTableFlags flags, IntPtr outer_size, float inner_width);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndTable@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndTable();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableNextRow@ImGui@@YAXHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableNextRow(ImGuiTableRowFlags row_flags, float min_row_height);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableNextColumn@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TableNextColumn();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableSetColumnIndex@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TableSetColumnIndex(int column_n);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableSetupColumn@ImGui@@YAXPBDHMI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableSetupColumn([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiTableColumnFlags flags, float init_width_or_weight, uint user_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableSetupScrollFreeze@ImGui@@YAXHH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableSetupScrollFreeze(int cols, int rows);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableHeader@ImGui@@YAXPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableHeader([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableHeadersRow@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableHeadersRow();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableAngledHeadersRow@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableAngledHeadersRow();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableGetSortSpecs@ImGui@@YAPAUImGuiTableSortSpecs@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr TableGetSortSpecs();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableGetColumnCount@ImGui@@YAHXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int TableGetColumnCount();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableGetColumnIndex@ImGui@@YAHXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int TableGetColumnIndex();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableGetRowIndex@ImGui@@YAHXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int TableGetRowIndex();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableGetColumnName@ImGui@@YAPBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr TableGetColumnName(int column_n);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableGetColumnFlags@ImGui@@YAHH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern ImGuiTableColumnFlags TableGetColumnFlags(int column_n);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableSetColumnEnabled@ImGui@@YAXH_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableSetColumnEnabled(int column_n, bool v);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableSetBgColor@ImGui@@YAXHIH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableSetBgColor(ImGuiTableBgTarget target, uint color, int column_n);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Columns@ImGui@@YAXHPBD_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Columns(int count, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string id, bool border);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?NextColumn@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void NextColumn();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetColumnIndex@ImGui@@YAHXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int GetColumnIndex();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetColumnWidth@ImGui@@YAMH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetColumnWidth(int column_index);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetColumnWidth@ImGui@@YAXHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetColumnWidth(int column_index, float width);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetColumnOffset@ImGui@@YAMH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetColumnOffset(int column_index);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetColumnOffset@ImGui@@YAXHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetColumnOffset(int column_index, float offset_x);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetColumnsCount@ImGui@@YAHXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int GetColumnsCount();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginTabBar@ImGui@@YA_NPBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginTabBar([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiTabBarFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndTabBar@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndTabBar();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginTabItem([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, bool* p_open, ImGuiTabItemFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndTabItem@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndTabItem();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TabItemButton@ImGui@@YA_NPBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TabItemButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiTabItemFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetTabItemClosed@ImGui@@YAXPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetTabItemClosed([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string tab_or_docked_window_label);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DockSpace@ImGui@@YAIIABUImVec2@@HPBUImGuiWindowClass@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint DockSpace(uint id, IntPtr size, ImGuiDockNodeFlags flags, IntPtr window_class);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DockSpaceOverViewport@ImGui@@YAIPBUImGuiViewport@@HPBUImGuiWindowClass@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint DockSpaceOverViewport(IntPtr viewport, ImGuiDockNodeFlags flags, IntPtr window_class);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowDockID@ImGui@@YAXIH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowDockID(uint dock_id, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowClass@ImGui@@YAXPBUImGuiWindowClass@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowClass(IntPtr window_class);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowDockID@ImGui@@YAIXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetWindowDockID();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsWindowDocked@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowDocked();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LogToTTY@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LogToTTY(int auto_open_depth);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LogToFile@ImGui@@YAXHPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LogToFile(int auto_open_depth, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LogToClipboard@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LogToClipboard(int auto_open_depth);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LogFinish@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LogFinish();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LogButtons@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LogButtons();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LogText@ImGui@@YAXPBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LogText([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LogTextV@ImGui@@YAXPBDPAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LogTextV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginDragDropSource@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginDragDropSource(ImGuiDragDropFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetDragDropPayload@ImGui@@YA_NPBDPBXIH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetDragDropPayload([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string type, IntPtr data, UIntPtr sz, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndDragDropSource@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndDragDropSource();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginDragDropTarget@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginDragDropTarget();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AcceptDragDropPayload@ImGui@@YAPBUImGuiPayload@@PBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr AcceptDragDropPayload([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string type, ImGuiDragDropFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndDragDropTarget@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndDragDropTarget();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetDragDropPayload@ImGui@@YAPBUImGuiPayload@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetDragDropPayload();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginDisabled@ImGui@@YAX_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void BeginDisabled(bool disabled);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndDisabled@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndDisabled();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushClipRect@ImGui@@YAXABUImVec2@@0_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushClipRect(IntPtr clip_rect_min, IntPtr clip_rect_max, bool intersect_with_current_clip_rect);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopClipRect@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopClipRect();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetItemDefaultFocus@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetItemDefaultFocus();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetKeyboardFocusHere@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetKeyboardFocusHere(int offset);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextItemAllowOverlap@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextItemAllowOverlap();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemHovered@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemHovered(ImGuiHoveredFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemActive@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemActive();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemFocused@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemFocused();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemClicked@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemClicked(ImGuiMouseButton mouse_button);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemVisible@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemVisible();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemEdited@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemEdited();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemActivated@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemActivated();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemDeactivated@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemDeactivated();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemDeactivatedAfterEdit@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemDeactivatedAfterEdit();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemToggledOpen@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemToggledOpen();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsAnyItemHovered@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAnyItemHovered();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsAnyItemActive@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAnyItemActive();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsAnyItemFocused@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAnyItemFocused();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetItemID@ImGui@@YAIXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetItemID();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetItemRectMin(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetItemRectMax(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetItemRectSize@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetItemRectSize(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetMainViewport@ImGui@@YAPAUImGuiViewport@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetMainViewport();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetBackgroundDrawList@ImGui@@YAPAUImDrawList@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetBackgroundDrawList();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetForegroundDrawList@ImGui@@YAPAUImDrawList@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetForegroundDrawList();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetBackgroundDrawList@ImGui@@YAPAUImDrawList@@PAUImGuiViewport@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetBackgroundDrawList(IntPtr viewport);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetForegroundDrawList@ImGui@@YAPAUImDrawList@@PAUImGuiViewport@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetForegroundDrawList(IntPtr viewport);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsRectVisible@ImGui@@YA_NABUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsRectVisible(IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsRectVisible@ImGui@@YA_NABUImVec2@@0@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsRectVisible(IntPtr rect_min, IntPtr rect_max);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetTime@ImGui@@YANXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern double GetTime();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFrameCount@ImGui@@YAHXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int GetFrameCount();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetDrawListSharedData@ImGui@@YAPAUImDrawListSharedData@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetDrawListSharedData();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetStyleColorName@ImGui@@YAPBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetStyleColorName(ImGuiCol idx);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetStateStorage@ImGui@@YAXPAUImGuiStorage@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetStateStorage(IntPtr storage);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetStateStorage@ImGui@@YAPAUImGuiStorage@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetStateStorage();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginChildFrame@ImGui@@YA_NIABUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginChildFrame(uint id, IntPtr size, ImGuiWindowFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndChildFrame@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndChildFrame();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CalcTextSize@ImGui@@YA?AUImVec2@@PBD0_NM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void CalcTextSize(IntPtr @return, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end, bool hide_text_after_double_hash, float wrap_width);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorConvertU32ToFloat4@ImGui@@YA?AUImVec4@@I@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ColorConvertU32ToFloat4(IntPtr @return, uint @in);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorConvertFloat4ToU32@ImGui@@YAIABUImVec4@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint ColorConvertFloat4ToU32(IntPtr @in);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorConvertRGBtoHSV@ImGui@@YAXMMMAAM00@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ColorConvertRGBtoHSV(float r, float g, float b, float* out_h, float* out_s, float* out_v);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorConvertHSVtoRGB@ImGui@@YAXMMMAAM00@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ColorConvertHSVtoRGB(float h, float s, float v, float* out_r, float* out_g, float* out_b);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsKeyDown@ImGui@@YA_NW4ImGuiKey@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsKeyDown(ImGuiKey key);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsKeyPressed@ImGui@@YA_NW4ImGuiKey@@_N@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsKeyPressed(ImGuiKey key, bool repeat);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsKeyReleased@ImGui@@YA_NW4ImGuiKey@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsKeyReleased(ImGuiKey key);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetKeyPressedAmount@ImGui@@YAHW4ImGuiKey@@MM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetKeyName@ImGui@@YAPBDW4ImGuiKey@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetKeyName(ImGuiKey key);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextFrameWantCaptureKeyboard@ImGui@@YAX_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsMouseDown@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseDown(ImGuiMouseButton button);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsMouseClicked@ImGui@@YA_NH_N@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseClicked(ImGuiMouseButton button, bool repeat);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsMouseReleased@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseReleased(ImGuiMouseButton button);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsMouseDoubleClicked@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseDoubleClicked(ImGuiMouseButton button);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetMouseClickedCount@ImGui@@YAHH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int GetMouseClickedCount(ImGuiMouseButton button);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsMouseHoveringRect@ImGui@@YA_NABUImVec2@@0_N@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseHoveringRect(IntPtr r_min, IntPtr r_max, bool clip);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsMousePosValid@ImGui@@YA_NPBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMousePosValid(IntPtr mouse_pos);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsAnyMouseDown@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAnyMouseDown();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetMousePos@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetMousePos(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetMousePosOnOpeningCurrentPopup@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetMousePosOnOpeningCurrentPopup(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsMouseDragging@ImGui@@YA_NHM@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseDragging(ImGuiMouseButton button, float lock_threshold);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetMouseDragDelta(IntPtr @return, ImGuiMouseButton button, float lock_threshold);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ResetMouseDragDelta@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ResetMouseDragDelta(ImGuiMouseButton button);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetMouseCursor@ImGui@@YAHXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern ImGuiMouseCursor GetMouseCursor();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetMouseCursor@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetMouseCursor(ImGuiMouseCursor cursor_type);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextFrameWantCaptureMouse@ImGui@@YAX_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextFrameWantCaptureMouse(bool want_capture_mouse);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetClipboardText@ImGui@@YAPBDXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetClipboardText();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetClipboardText@ImGui@@YAXPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetClipboardText([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LoadIniSettingsFromDisk@ImGui@@YAXPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LoadIniSettingsFromDisk([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string ini_filename);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LoadIniSettingsFromMemory@ImGui@@YAXPBDI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LoadIniSettingsFromMemory([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string ini_data, UIntPtr ini_size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SaveIniSettingsToDisk@ImGui@@YAXPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SaveIniSettingsToDisk([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string ini_filename);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SaveIniSettingsToMemory@ImGui@@YAPBDPAI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr SaveIniSettingsToMemory(UIntPtr* out_ini_size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DebugTextEncoding@ImGui@@YAXPBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void DebugTextEncoding([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DebugCheckVersionAndDataLayout@ImGui@@YA_NPBDIIIIII@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DebugCheckVersionAndDataLayout([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string version_str, UIntPtr sz_io, UIntPtr sz_style, UIntPtr sz_vec2, UIntPtr sz_vec4, UIntPtr sz_drawvert, UIntPtr sz_drawidx);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetAllocatorFunctions@ImGui@@YAXP6APAXIPAX@ZP6AX00@Z0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetAllocatorFunctions(IntPtr alloc_func, IntPtr free_func, IntPtr user_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetAllocatorFunctions@ImGui@@YAXPAP6APAXIPAX@ZPAP6AX00@ZPAPAX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetAllocatorFunctions(IntPtr p_alloc_func, IntPtr p_free_func, IntPtr* p_user_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?MemAlloc@ImGui@@YAPAXI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr MemAlloc(UIntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?MemFree@ImGui@@YAXPAX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void MemFree(IntPtr ptr);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetPlatformIO@ImGui@@YAAAUImGuiPlatformIO@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetPlatformIO();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?UpdatePlatformWindows@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void UpdatePlatformWindows();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?RenderPlatformWindowsDefault@ImGui@@YAXPAX0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void RenderPlatformWindowsDefault(IntPtr platform_render_arg, IntPtr renderer_render_arg);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DestroyPlatformWindows@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void DestroyPlatformWindows();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?FindViewportByID@ImGui@@YAPAUImGuiViewport@@I@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr FindViewportByID(uint id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?FindViewportByPlatformHandle@ImGui@@YAPAUImGuiViewport@@PAX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr FindViewportByPlatformHandle(IntPtr platform_handle);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetKeyIndex@ImGui@@YA?AW4ImGuiKey@@W42@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern ImGuiKey GetKeyIndex(ImGuiKey key);

        }

        private partial struct __Internal64
        {
            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CreateContext@ImGui@@YAPEAUImGuiContext@@PEAUImFontAtlas@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr CreateContext(IntPtr shared_font_atlas);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DestroyContext@ImGui@@YAXPEAUImGuiContext@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void DestroyContext(IntPtr ctx);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCurrentContext@ImGui@@YAPEAUImGuiContext@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetCurrentContext();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetCurrentContext@ImGui@@YAXPEAUImGuiContext@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetCurrentContext(IntPtr ctx);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetIO@ImGui@@YAAEAUImGuiIO@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetIO();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetStyle();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?NewFrame@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void NewFrame();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndFrame@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndFrame();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Render@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Render();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetDrawData@ImGui@@YAPEAUImDrawData@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetDrawData();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowDemoWindow@ImGui@@YAXPEA_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowDemoWindow(bool* p_open);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowMetricsWindow@ImGui@@YAXPEA_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowMetricsWindow(bool* p_open);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowDebugLogWindow@ImGui@@YAXPEA_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowDebugLogWindow(bool* p_open);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowIDStackToolWindow@ImGui@@YAXPEA_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowIDStackToolWindow(bool* p_open);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowAboutWindow@ImGui@@YAXPEA_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowAboutWindow(bool* p_open);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowStyleEditor(IntPtr @ref);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowStyleSelector@ImGui@@YA_NPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ShowStyleSelector([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowFontSelector@ImGui@@YAXPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowFontSelector([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ShowUserGuide@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ShowUserGuide();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetVersion@ImGui@@YAPEBDXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetVersion();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void StyleColorsDark(IntPtr dst);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void StyleColorsLight(IntPtr dst);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void StyleColorsClassic(IntPtr dst);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Begin@ImGui@@YA_NPEBDPEA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Begin([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, bool* p_open, ImGuiWindowFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?End@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void End();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginChild([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, IntPtr size, bool border, ImGuiWindowFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginChild@ImGui@@YA_NIAEBUImVec2@@_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginChild_1(uint id, IntPtr size, bool border, ImGuiWindowFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndChild@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndChild();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsWindowAppearing@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowAppearing();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsWindowCollapsed@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowCollapsed();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsWindowFocused@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowFocused(ImGuiFocusedFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsWindowHovered@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowHovered(ImGuiHoveredFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetWindowDrawList();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowDpiScale@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetWindowDpiScale();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowPos@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetWindowPos(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowSize@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetWindowSize(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowWidth@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetWindowWidth();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowHeight@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetWindowHeight();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowViewport@ImGui@@YAPEAUImGuiViewport@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetWindowViewport();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowPos(IntPtr pos, ImGuiCond cond, IntPtr pivot);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowSize(IntPtr size, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowSizeConstraints(IntPtr size_min, IntPtr size_max, IntPtr custom_callback, IntPtr custom_callback_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowContentSize@ImGui@@YAXAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowContentSize(IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowCollapsed@ImGui@@YAX_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowCollapsed(bool collapsed, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowFocus@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowFocus();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowScroll@ImGui@@YAXAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowScroll(IntPtr scroll);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowBgAlpha@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowBgAlpha(float alpha);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowViewport@ImGui@@YAXI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowViewport(uint viewport_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowPos@ImGui@@YAXAEBUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowPos(IntPtr pos, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowSize@ImGui@@YAXAEBUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowSize(IntPtr size, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowCollapsed@ImGui@@YAX_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowCollapsed(bool collapsed, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowFocus@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowFocus();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowFontScale@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowFontScale(float scale);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowPos@ImGui@@YAXPEBDAEBUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowPos([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, IntPtr pos, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowSize@ImGui@@YAXPEBDAEBUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowSize([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, IntPtr size, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowCollapsed@ImGui@@YAXPEBD_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowCollapsed([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, bool collapsed, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetWindowFocus@ImGui@@YAXPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetWindowFocus([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetContentRegionAvail(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetContentRegionMax@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetContentRegionMax(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowContentRegionMin@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetWindowContentRegionMin(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowContentRegionMax@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetWindowContentRegionMax(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetScrollX@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetScrollX();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetScrollY@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetScrollY();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetScrollX@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetScrollX(float scroll_x);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetScrollY@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetScrollY(float scroll_y);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetScrollMaxX@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetScrollMaxX();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetScrollMaxY@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetScrollMaxY();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetScrollHereX@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetScrollHereX(float center_x_ratio);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetScrollHereY@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetScrollHereY(float center_y_ratio);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetScrollFromPosX@ImGui@@YAXMM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetScrollFromPosX(float local_x, float center_x_ratio);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetScrollFromPosY@ImGui@@YAXMM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetScrollFromPosY(float local_y, float center_y_ratio);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushFont@ImGui@@YAXPEAUImFont@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushFont(IntPtr font);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopFont@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopFont();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushStyleColor@ImGui@@YAXHI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushStyleColor(ImGuiCol idx, uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushStyleColor(ImGuiCol idx, IntPtr col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopStyleColor@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopStyleColor(int count);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushStyleVar@ImGui@@YAXHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushStyleVar(ImGuiStyleVar idx, float val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushStyleVar(ImGuiStyleVar idx, IntPtr val);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopStyleVar@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopStyleVar(int count);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushTabStop@ImGui@@YAX_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushTabStop(bool tab_stop);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopTabStop@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopTabStop();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushButtonRepeat@ImGui@@YAX_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushButtonRepeat(bool repeat);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopButtonRepeat@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopButtonRepeat();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushItemWidth@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushItemWidth(float item_width);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopItemWidth@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopItemWidth();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextItemWidth@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextItemWidth(float item_width);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CalcItemWidth@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float CalcItemWidth();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushTextWrapPos@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushTextWrapPos(float wrap_local_pos_x);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopTextWrapPos@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopTextWrapPos();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFont@ImGui@@YAPEAUImFont@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetFont();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFontSize@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetFontSize();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFontTexUvWhitePixel@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetFontTexUvWhitePixel(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetColorU32@ImGui@@YAIHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetColorU32(ImGuiCol idx, float alpha_mul);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetColorU32(IntPtr col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetColorU32@ImGui@@YAII@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetColorU32(uint col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetStyleColorVec4@ImGui@@YAAEBUImVec4@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetStyleColorVec4(ImGuiCol idx);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetCursorScreenPos(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetCursorScreenPos@ImGui@@YAXAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetCursorScreenPos(IntPtr pos);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCursorPos@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetCursorPos(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCursorPosX@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetCursorPosX();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCursorPosY@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetCursorPosY();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetCursorPos@ImGui@@YAXAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetCursorPos(IntPtr local_pos);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetCursorPosX@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetCursorPosX(float local_x);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetCursorPosY@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetCursorPosY(float local_y);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetCursorStartPos@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetCursorStartPos(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Separator@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Separator();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SameLine@ImGui@@YAXMM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SameLine(float offset_from_start_x, float spacing);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?NewLine@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void NewLine();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Spacing@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Spacing();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Dummy@ImGui@@YAXAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Dummy(IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Indent@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Indent(float indent_w);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Unindent@ImGui@@YAXM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Unindent(float indent_w);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginGroup@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void BeginGroup();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndGroup@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndGroup();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AlignTextToFramePadding@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void AlignTextToFramePadding();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetTextLineHeight@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetTextLineHeight();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetTextLineHeightWithSpacing@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetTextLineHeightWithSpacing();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFrameHeight@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetFrameHeight();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFrameHeightWithSpacing@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetFrameHeightWithSpacing();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushID@ImGui@@YAXPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushID([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushID@ImGui@@YAXPEBD0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushID([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id_begin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushID@ImGui@@YAXPEBX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushID(IntPtr ptr_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushID@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushID_1(int int_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopID@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopID();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetID@ImGui@@YAIPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetID([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetID@ImGui@@YAIPEBD0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetID([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id_begin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetID@ImGui@@YAIPEBX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetID(IntPtr ptr_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextUnformatted@ImGui@@YAXPEBD0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextUnformatted([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Text@ImGui@@YAXPEBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Text([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextV@ImGui@@YAXPEBDPEAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextColored(IntPtr col, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextColoredV@ImGui@@YAXAEBUImVec4@@PEBDPEAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextColoredV(IntPtr col, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextDisabled@ImGui@@YAXPEBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextDisabled([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextDisabledV@ImGui@@YAXPEBDPEAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextDisabledV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextWrapped@ImGui@@YAXPEBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextWrapped([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TextWrappedV@ImGui@@YAXPEBDPEAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TextWrappedV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LabelText@ImGui@@YAXPEBD0ZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LabelText([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LabelTextV@ImGui@@YAXPEBD0PEAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LabelTextV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BulletText@ImGui@@YAXPEBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void BulletText([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BulletTextV@ImGui@@YAXPEBDPEAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void BulletTextV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SeparatorText@ImGui@@YAXPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SeparatorText([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Button([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SmallButton@ImGui@@YA_NPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SmallButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InvisibleButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, IntPtr size, ImGuiButtonFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ArrowButton@ImGui@@YA_NPEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ArrowButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiDir dir);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Checkbox@ImGui@@YA_NPEBDPEA_N@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Checkbox([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, bool* v);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckboxFlags([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* flags, int flags_value);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CheckboxFlags@ImGui@@YA_NPEBDPEAII@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckboxFlags_1([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, uint* flags, uint flags_value);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?RadioButton@ImGui@@YA_NPEBD_N@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool RadioButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, bool active);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?RadioButton@ImGui@@YA_NPEBDPEAHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool RadioButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, int v_button);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ProgressBar(float fraction, IntPtr size_arg, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string overlay);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Bullet@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Bullet();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Image(IntPtr user_texture_id, IntPtr size, IntPtr uv0, IntPtr uv1, IntPtr tint_col, IntPtr border_col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ImageButton@ImGui@@YA_NPEBDPEAXAEBUImVec2@@22AEBUImVec4@@3@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImageButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, IntPtr user_texture_id, IntPtr image_size, IntPtr uv0, IntPtr uv1, IntPtr bg_col, IntPtr tint_col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginCombo@ImGui@@YA_NPEBD0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginCombo([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string preview_value, ImGuiComboFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndCombo@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndCombo();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Combo([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* current_item, [MarshalAs(UnmanagedType.LPArray)] string[] items, int items_count, int popup_max_height_in_items);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Combo@ImGui@@YA_NPEBDPEAH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Combo([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* current_item, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string items_separated_by_zeros, int popup_max_height_in_items);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Combo@ImGui@@YA_NPEBDPEAHP6APEBDPEAXH@Z2HH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Combo([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* current_item, IntPtr getter, IntPtr user_data, int items_count, int popup_max_height_in_items);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragFloat([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_speed, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragFloat2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_speed, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragFloat3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_speed, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragFloat4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_speed, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragFloatRange2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format_max, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragInt([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, float v_speed, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragInt2@ImGui@@YA_NPEBDQEAHMHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragInt2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, float v_speed, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragInt3@ImGui@@YA_NPEBDQEAHMHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragInt3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, float v_speed, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragInt4@ImGui@@YA_NPEBDQEAHMHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragInt4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, float v_speed, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragIntRange2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format_max, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragScalar([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiDataType data_type, IntPtr p_data, float v_speed, IntPtr p_min, IntPtr p_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragScalarN([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed, IntPtr p_min, IntPtr p_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderFloat([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderFloat2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderFloat3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderFloat4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderAngle([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v_rad, float v_degrees_min, float v_degrees_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderInt([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderInt2@ImGui@@YA_NPEBDQEAHHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderInt2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderInt3@ImGui@@YA_NPEBDQEAHHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderInt3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderInt4@ImGui@@YA_NPEBDQEAHHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderInt4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderScalar([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderScalarN([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, IntPtr p_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool VSliderFloat([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, IntPtr size, float* v, float v_min, float v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool VSliderInt([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, IntPtr size, int* v, int v_min, int v_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool VSliderScalar([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, IntPtr size, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiSliderFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputText([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, sbyte* buf, UIntPtr buf_size, ImGuiInputTextFlags flags, IntPtr callback, IntPtr user_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputTextMultiline([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, sbyte* buf, UIntPtr buf_size, IntPtr size, ImGuiInputTextFlags flags, IntPtr callback, IntPtr user_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputTextWithHint([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string hint, sbyte* buf, UIntPtr buf_size, ImGuiInputTextFlags flags, IntPtr callback, IntPtr user_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputFloat([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, float step, float step_fast, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputFloat2@ImGui@@YA_NPEBDQEAM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputFloat2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputFloat3@ImGui@@YA_NPEBDQEAM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputFloat3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputFloat4@ImGui@@YA_NPEBDQEAM0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputFloat4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* v, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputInt([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, int step, int step_fast, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputInt2@ImGui@@YA_NPEBDQEAHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputInt2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputInt3@ImGui@@YA_NPEBDQEAHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputInt3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputInt4@ImGui@@YA_NPEBDQEAHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputInt4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* v, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputDouble@ImGui@@YA_NPEBDPEANNN0H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputDouble([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, double* v, double step, double step_fast, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputScalar([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_step, IntPtr p_step_fast, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputScalarN([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_step, IntPtr p_step_fast, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format, ImGuiInputTextFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColorEdit3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* col, ImGuiColorEditFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColorEdit4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* col, ImGuiColorEditFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColorPicker3([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* col, ImGuiColorEditFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColorPicker4([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* col, ImGuiColorEditFlags flags, float* ref_col);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColorButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string desc_id, IntPtr col, ImGuiColorEditFlags flags, IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetColorEditOptions@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetColorEditOptions(ImGuiColorEditFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNode@ImGui@@YA_NPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNode([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNode@ImGui@@YA_NPEBD0ZZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNode([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNode@ImGui@@YA_NPEBXPEBDZZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNode(IntPtr ptr_id, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNodeV@ImGui@@YA_NPEBD0PEAD@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNodeV@ImGui@@YA_NPEBXPEBDPEAD@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeV(IntPtr ptr_id, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNodeEx@ImGui@@YA_NPEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeEx([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiTreeNodeFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeEx([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiTreeNodeFlags flags, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeEx(IntPtr ptr_id, ImGuiTreeNodeFlags flags, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeExV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiTreeNodeFlags flags, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeExV(IntPtr ptr_id, ImGuiTreeNodeFlags flags, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreePush@ImGui@@YAXPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TreePush([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreePush@ImGui@@YAXPEBX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TreePush(IntPtr ptr_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TreePop@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TreePop();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetTreeNodeToLabelSpacing();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CollapsingHeader@ImGui@@YA_NPEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CollapsingHeader([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiTreeNodeFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CollapsingHeader([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, bool* p_visible, ImGuiTreeNodeFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextItemOpen@ImGui@@YAX_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextItemOpen(bool is_open, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Selectable([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, bool selected, ImGuiSelectableFlags flags, IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Selectable_1([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, bool* p_selected, ImGuiSelectableFlags flags, IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginListBox([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndListBox@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndListBox();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ListBox@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ListBox([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* current_item, [MarshalAs(UnmanagedType.LPArray)] string[] items, int items_count, int height_in_items);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ListBox@ImGui@@YA_NPEBDPEAHP6APEBDPEAXH@Z2HH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ListBox([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, int* current_item, IntPtr getter, IntPtr user_data, int items_count, int height_in_items);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PlotLines([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* values, int values_count, int values_offset, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string overlay_text, float scale_min, float scale_max, Vector2 graph_size, int stride);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PlotLines([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string overlay_text, float scale_min, float scale_max, Vector2 graph_size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PlotHistogram([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, float* values, int values_count, int values_offset, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string overlay_text, float scale_min, float scale_max, Vector2 graph_size, int stride);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PlotHistogram([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, IntPtr values_getter, IntPtr data, int values_count, int values_offset, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string overlay_text, float scale_min, float scale_max, Vector2 graph_size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Value@ImGui@@YAXPEBD_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Value([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string prefix, bool b);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Value@ImGui@@YAXPEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Value_1([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string prefix, int v);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Value@ImGui@@YAXPEBDI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Value_2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string prefix, uint v);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Value@ImGui@@YAXPEBDM0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Value([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string prefix, float v, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string float_format);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginMenuBar@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginMenuBar();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndMenuBar@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndMenuBar();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginMainMenuBar@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginMainMenuBar();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndMainMenuBar@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndMainMenuBar();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginMenu@ImGui@@YA_NPEBD_N@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginMenu([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, bool enabled);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndMenu@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndMenu();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?MenuItem@ImGui@@YA_NPEBD0_N1@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool MenuItem([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string shortcut, bool selected, bool enabled);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool MenuItem_1([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string shortcut, bool* p_selected, bool enabled);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginTooltip@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginTooltip();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndTooltip@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndTooltip();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetTooltip@ImGui@@YAXPEBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetTooltip([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetTooltipV@ImGui@@YAXPEBDPEAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetTooltipV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginItemTooltip@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginItemTooltip();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetItemTooltip@ImGui@@YAXPEBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetItemTooltip([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetItemTooltipV@ImGui@@YAXPEBDPEAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetItemTooltipV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginPopup@ImGui@@YA_NPEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopup([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiWindowFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginPopupModal@ImGui@@YA_NPEBDPEA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopupModal([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, bool* p_open, ImGuiWindowFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndPopup@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndPopup();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?OpenPopup@ImGui@@YAXPEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void OpenPopup([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiPopupFlags popup_flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?OpenPopup@ImGui@@YAXIH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void OpenPopup_1(uint id, ImGuiPopupFlags popup_flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?OpenPopupOnItemClick@ImGui@@YAXPEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void OpenPopupOnItemClick([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiPopupFlags popup_flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CloseCurrentPopup@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void CloseCurrentPopup();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginPopupContextItem@ImGui@@YA_NPEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopupContextItem([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiPopupFlags popup_flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginPopupContextWindow@ImGui@@YA_NPEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopupContextWindow([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiPopupFlags popup_flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginPopupContextVoid@ImGui@@YA_NPEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopupContextVoid([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiPopupFlags popup_flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsPopupOpen@ImGui@@YA_NPEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPopupOpen([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiPopupFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginTable([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, int column, ImGuiTableFlags flags, IntPtr outer_size, float inner_width);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndTable@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndTable();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableNextRow@ImGui@@YAXHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableNextRow(ImGuiTableRowFlags row_flags, float min_row_height);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableNextColumn@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TableNextColumn();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableSetColumnIndex@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TableSetColumnIndex(int column_n);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableSetupColumn@ImGui@@YAXPEBDHMI@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableSetupColumn([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiTableColumnFlags flags, float init_width_or_weight, uint user_id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableSetupScrollFreeze@ImGui@@YAXHH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableSetupScrollFreeze(int cols, int rows);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableHeader@ImGui@@YAXPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableHeader([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableHeadersRow@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableHeadersRow();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableAngledHeadersRow@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableAngledHeadersRow();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr TableGetSortSpecs();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableGetColumnCount@ImGui@@YAHXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int TableGetColumnCount();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableGetColumnIndex@ImGui@@YAHXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int TableGetColumnIndex();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableGetRowIndex@ImGui@@YAHXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int TableGetRowIndex();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableGetColumnName@ImGui@@YAPEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr TableGetColumnName(int column_n);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableGetColumnFlags@ImGui@@YAHH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern ImGuiTableColumnFlags TableGetColumnFlags(int column_n);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableSetColumnEnabled@ImGui@@YAXH_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableSetColumnEnabled(int column_n, bool v);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TableSetBgColor@ImGui@@YAXHIH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void TableSetBgColor(ImGuiTableBgTarget target, uint color, int column_n);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?Columns@ImGui@@YAXHPEBD_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void Columns(int count, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string id, bool border);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?NextColumn@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void NextColumn();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetColumnIndex@ImGui@@YAHXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int GetColumnIndex();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetColumnWidth@ImGui@@YAMH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetColumnWidth(int column_index);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetColumnWidth@ImGui@@YAXHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetColumnWidth(int column_index, float width);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetColumnOffset@ImGui@@YAMH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern float GetColumnOffset(int column_index);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetColumnOffset@ImGui@@YAXHM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetColumnOffset(int column_index, float offset_x);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetColumnsCount@ImGui@@YAHXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int GetColumnsCount();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginTabBar@ImGui@@YA_NPEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginTabBar([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str_id, ImGuiTabBarFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndTabBar@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndTabBar();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginTabItem([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, bool* p_open, ImGuiTabItemFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndTabItem@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndTabItem();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?TabItemButton@ImGui@@YA_NPEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TabItemButton([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string label, ImGuiTabItemFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetTabItemClosed@ImGui@@YAXPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetTabItemClosed([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string tab_or_docked_window_label);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DockSpace@ImGui@@YAIIAEBUImVec2@@HPEBUImGuiWindowClass@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint DockSpace(uint id, IntPtr size, ImGuiDockNodeFlags flags, IntPtr window_class);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DockSpaceOverViewport@ImGui@@YAIPEBUImGuiViewport@@HPEBUImGuiWindowClass@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint DockSpaceOverViewport(IntPtr viewport, ImGuiDockNodeFlags flags, IntPtr window_class);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowDockID@ImGui@@YAXIH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowDockID(uint dock_id, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextWindowClass@ImGui@@YAXPEBUImGuiWindowClass@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextWindowClass(IntPtr window_class);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetWindowDockID@ImGui@@YAIXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetWindowDockID();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsWindowDocked@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowDocked();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LogToTTY@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LogToTTY(int auto_open_depth);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LogToFile@ImGui@@YAXHPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LogToFile(int auto_open_depth, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LogToClipboard@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LogToClipboard(int auto_open_depth);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LogFinish@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LogFinish();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LogButtons@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LogButtons();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LogText@ImGui@@YAXPEBDZZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LogText([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LogTextV@ImGui@@YAXPEBDPEAD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LogTextV([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt, Object args);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginDragDropSource@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginDragDropSource(ImGuiDragDropFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetDragDropPayload@ImGui@@YA_NPEBDPEBX_KH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetDragDropPayload([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string type, IntPtr data, UIntPtr sz, ImGuiCond cond);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndDragDropSource@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndDragDropSource();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginDragDropTarget@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginDragDropTarget();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?AcceptDragDropPayload@ImGui@@YAPEBUImGuiPayload@@PEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr AcceptDragDropPayload([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string type, ImGuiDragDropFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndDragDropTarget@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndDragDropTarget();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetDragDropPayload@ImGui@@YAPEBUImGuiPayload@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetDragDropPayload();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginDisabled@ImGui@@YAX_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void BeginDisabled(bool disabled);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndDisabled@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndDisabled();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PushClipRect@ImGui@@YAXAEBUImVec2@@0_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PushClipRect(IntPtr clip_rect_min, IntPtr clip_rect_max, bool intersect_with_current_clip_rect);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?PopClipRect@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void PopClipRect();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetItemDefaultFocus@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetItemDefaultFocus();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetKeyboardFocusHere@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetKeyboardFocusHere(int offset);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextItemAllowOverlap@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextItemAllowOverlap();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemHovered@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemHovered(ImGuiHoveredFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemActive@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemActive();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemFocused@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemFocused();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemClicked@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemClicked(ImGuiMouseButton mouse_button);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemVisible@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemVisible();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemEdited@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemEdited();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemActivated@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemActivated();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemDeactivated@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemDeactivated();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemDeactivatedAfterEdit@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemDeactivatedAfterEdit();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsItemToggledOpen@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemToggledOpen();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsAnyItemHovered@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAnyItemHovered();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsAnyItemActive@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAnyItemActive();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsAnyItemFocused@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAnyItemFocused();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetItemID@ImGui@@YAIXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint GetItemID();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetItemRectMin(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetItemRectMax(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetItemRectSize@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetItemRectSize(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetMainViewport@ImGui@@YAPEAUImGuiViewport@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetMainViewport();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetBackgroundDrawList@ImGui@@YAPEAUImDrawList@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetBackgroundDrawList();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetForegroundDrawList@ImGui@@YAPEAUImDrawList@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetForegroundDrawList();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetBackgroundDrawList@ImGui@@YAPEAUImDrawList@@PEAUImGuiViewport@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetBackgroundDrawList(IntPtr viewport);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetForegroundDrawList@ImGui@@YAPEAUImDrawList@@PEAUImGuiViewport@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetForegroundDrawList(IntPtr viewport);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsRectVisible@ImGui@@YA_NAEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsRectVisible(IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsRectVisible@ImGui@@YA_NAEBUImVec2@@0@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsRectVisible(IntPtr rect_min, IntPtr rect_max);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetTime@ImGui@@YANXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern double GetTime();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetFrameCount@ImGui@@YAHXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int GetFrameCount();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetDrawListSharedData@ImGui@@YAPEAUImDrawListSharedData@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetDrawListSharedData();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetStyleColorName@ImGui@@YAPEBDH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetStyleColorName(ImGuiCol idx);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetStateStorage@ImGui@@YAXPEAUImGuiStorage@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetStateStorage(IntPtr storage);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetStateStorage@ImGui@@YAPEAUImGuiStorage@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetStateStorage();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?BeginChildFrame@ImGui@@YA_NIAEBUImVec2@@H@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginChildFrame(uint id, IntPtr size, ImGuiWindowFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?EndChildFrame@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void EndChildFrame();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void CalcTextSize(IntPtr @return, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text_end, bool hide_text_after_double_hash, float wrap_width);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorConvertU32ToFloat4@ImGui@@YA?AUImVec4@@I@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ColorConvertU32ToFloat4(IntPtr @return, uint @in);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorConvertFloat4ToU32@ImGui@@YAIAEBUImVec4@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern uint ColorConvertFloat4ToU32(IntPtr @in);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorConvertRGBtoHSV@ImGui@@YAXMMMAEAM00@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ColorConvertRGBtoHSV(float r, float g, float b, float* out_h, float* out_s, float* out_v);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ColorConvertHSVtoRGB(float h, float s, float v, float* out_r, float* out_g, float* out_b);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsKeyDown@ImGui@@YA_NW4ImGuiKey@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsKeyDown(ImGuiKey key);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsKeyPressed@ImGui@@YA_NW4ImGuiKey@@_N@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsKeyPressed(ImGuiKey key, bool repeat);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsKeyReleased@ImGui@@YA_NW4ImGuiKey@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsKeyReleased(ImGuiKey key);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetKeyPressedAmount@ImGui@@YAHW4ImGuiKey@@MM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetKeyName@ImGui@@YAPEBDW4ImGuiKey@@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetKeyName(ImGuiKey key);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextFrameWantCaptureKeyboard@ImGui@@YAX_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsMouseDown@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseDown(ImGuiMouseButton button);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsMouseClicked@ImGui@@YA_NH_N@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseClicked(ImGuiMouseButton button, bool repeat);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsMouseReleased@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseReleased(ImGuiMouseButton button);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsMouseDoubleClicked@ImGui@@YA_NH@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseDoubleClicked(ImGuiMouseButton button);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetMouseClickedCount@ImGui@@YAHH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern int GetMouseClickedCount(ImGuiMouseButton button);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsMouseHoveringRect@ImGui@@YA_NAEBUImVec2@@0_N@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseHoveringRect(IntPtr r_min, IntPtr r_max, bool clip);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsMousePosValid@ImGui@@YA_NPEBUImVec2@@@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMousePosValid(IntPtr mouse_pos);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsAnyMouseDown@ImGui@@YA_NXZ", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAnyMouseDown();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetMousePos@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetMousePos(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetMousePosOnOpeningCurrentPopup@ImGui@@YA?AUImVec2@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetMousePosOnOpeningCurrentPopup(IntPtr @return);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?IsMouseDragging@ImGui@@YA_NHM@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseDragging(ImGuiMouseButton button, float lock_threshold);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetMouseDragDelta(IntPtr @return, ImGuiMouseButton button, float lock_threshold);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?ResetMouseDragDelta@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void ResetMouseDragDelta(ImGuiMouseButton button);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetMouseCursor@ImGui@@YAHXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern ImGuiMouseCursor GetMouseCursor();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetMouseCursor@ImGui@@YAXH@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetMouseCursor(ImGuiMouseCursor cursor_type);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetNextFrameWantCaptureMouse@ImGui@@YAX_N@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetNextFrameWantCaptureMouse(bool want_capture_mouse);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetClipboardText@ImGui@@YAPEBDXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetClipboardText();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetClipboardText@ImGui@@YAXPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetClipboardText([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LoadIniSettingsFromDisk@ImGui@@YAXPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LoadIniSettingsFromDisk([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string ini_filename);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?LoadIniSettingsFromMemory@ImGui@@YAXPEBD_K@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void LoadIniSettingsFromMemory([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string ini_data, UIntPtr ini_size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SaveIniSettingsToDisk@ImGui@@YAXPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SaveIniSettingsToDisk([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string ini_filename);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SaveIniSettingsToMemory@ImGui@@YAPEBDPEA_K@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr SaveIniSettingsToMemory(UIntPtr* out_ini_size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DebugTextEncoding@ImGui@@YAXPEBD@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void DebugTextEncoding([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string text);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DebugCheckVersionAndDataLayout@ImGui@@YA_NPEBD_K11111@Z", CallingConvention = CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DebugCheckVersionAndDataLayout([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string version_str, UIntPtr sz_io, UIntPtr sz_style, UIntPtr sz_vec2, UIntPtr sz_vec4, UIntPtr sz_drawvert, UIntPtr sz_drawidx);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?SetAllocatorFunctions@ImGui@@YAXP6APEAX_KPEAX@ZP6AX11@Z1@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void SetAllocatorFunctions(IntPtr alloc_func, IntPtr free_func, IntPtr user_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetAllocatorFunctions@ImGui@@YAXPEAP6APEAX_KPEAX@ZPEAP6AX11@ZPEAPEAX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void GetAllocatorFunctions(IntPtr p_alloc_func, IntPtr p_free_func, IntPtr* p_user_data);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?MemAlloc@ImGui@@YAPEAX_K@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr MemAlloc(UIntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?MemFree@ImGui@@YAXPEAX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void MemFree(IntPtr ptr);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetPlatformIO@ImGui@@YAAEAUImGuiPlatformIO@@XZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr GetPlatformIO();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?UpdatePlatformWindows@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void UpdatePlatformWindows();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?RenderPlatformWindowsDefault@ImGui@@YAXPEAX0@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void RenderPlatformWindowsDefault(IntPtr platform_render_arg, IntPtr renderer_render_arg);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?DestroyPlatformWindows@ImGui@@YAXXZ", CallingConvention = CallingConvention.Cdecl)]
            internal static extern void DestroyPlatformWindows();

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?FindViewportByID@ImGui@@YAPEAUImGuiViewport@@I@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr FindViewportByID(uint id);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?FindViewportByPlatformHandle@ImGui@@YAPEAUImGuiViewport@@PEAX@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern IntPtr FindViewportByPlatformHandle(IntPtr platform_handle);

            [SuppressUnmanagedCodeSecurity, DllImport("imgui", EntryPoint = "?GetKeyIndex@ImGui@@YA?AW4ImGuiKey@@W42@@Z", CallingConvention = CallingConvention.Cdecl)]
            internal static extern ImGuiKey GetKeyIndex(ImGuiKey key);

        }

        /// <summary>Context creation and access.<br/>- Each context create its own ImFontAtlas by default. You may instance one yourself and pass it to CreateContext() to share a font atlas between contexts.<br/>- DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions().<br/>For each static/DLL boundary you are calling from. Read "Context and Memory Allocators" section of imgui.cpp for details.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L299"/></summary>
        // DEBUG: ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas = NULL)
        public static IntPtr CreateContext(ImFontAtlas shared_font_atlas = default)
        {
            var __arg0 = shared_font_atlas is null ? IntPtr.Zero : shared_font_atlas.__Instance;
            var ___ret = Environment.Is64BitProcess ? __Internal64.CreateContext(__arg0) : __Internal32.CreateContext(__arg0);
            return ___ret
            /* DEBUG: TypeMapContext.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>NULL = destroy current context.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L300"/></summary>
        // DEBUG: void          DestroyContext(ImGuiContext* ctx = NULL)
        public static void DestroyContext(IntPtr ctx = default)
        {
            var __arg0 = ctx
            /* DEBUG: TypeMapContext.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.DestroyContext(__arg0);
            }
            else
            {
                __Internal32.DestroyContext(__arg0);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L301"/></summary>
        // DEBUG: ImGuiContext* GetCurrentContext()
        public static IntPtr GetCurrentContext()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetCurrentContext() : __Internal32.GetCurrentContext();
            return ___ret
            /* DEBUG: TypeMapContext.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L302"/></summary>
        // DEBUG: void          SetCurrentContext(ImGuiContext* ctx)
        public static void SetCurrentContext(IntPtr ctx)
        {
            var __arg0 = ctx
            /* DEBUG: TypeMapContext.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetCurrentContext(__arg0);
            }
            else
            {
                __Internal32.SetCurrentContext(__arg0);
            }
        }

        /// <summary>Access the IO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L305"/></summary>
        // DEBUG: ImGuiIO&      GetIO()
        public static ImGuiIO GetIO()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetIO() : __Internal32.GetIO();
            var __result0 = ImGuiIO.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Access the Style structure (colors, sizes). Always use PushStyleCol(), PushStyleVar() to modify style mid-frame!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L306"/></summary>
        // DEBUG: ImGuiStyle&   GetStyle()
        public static ImGuiStyle GetStyle()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetStyle() : __Internal32.GetStyle();
            var __result0 = ImGuiStyle.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L307"/></summary>
        // DEBUG: void          NewFrame()
        public static void NewFrame()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.NewFrame();
            }
            else
            {
                __Internal32.NewFrame();
            }
        }

        /// <summary>Ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L308"/></summary>
        // DEBUG: void          EndFrame()
        public static void EndFrame()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndFrame();
            }
            else
            {
                __Internal32.EndFrame();
            }
        }

        /// <summary>Ends the Dear ImGui frame, finalize the draw data. You can then get call GetDrawData().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L309"/></summary>
        // DEBUG: void          Render()
        public static void Render()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Render();
            }
            else
            {
                __Internal32.Render();
            }
        }

        /// <summary>Valid after Render() and until the next call to NewFrame(). this is what you have to render.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L310"/></summary>
        // DEBUG: ImDrawData*   GetDrawData()
        public static ImDrawData GetDrawData()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetDrawData() : __Internal32.GetDrawData();
            var __result0 = ___ret != IntPtr.Zero ? ImDrawData.__CreateInstance(___ret) : default;
            return __result0;
        }

        /// <summary>Create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L313"/></summary>
        // DEBUG: void          ShowDemoWindow(bool* p_open = NULL)
        public static void ShowDemoWindow(ref bool p_open)
        {
            fixed (bool* __p_open0 = &p_open)
            {
                var __arg0 = __p_open0;
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ShowDemoWindow(__arg0);
                }
                else
                {
                    __Internal32.ShowDemoWindow(__arg0);
                }
            }
        }

        /// <summary>Create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L314"/></summary>
        // DEBUG: void          ShowMetricsWindow(bool* p_open = NULL)
        public static void ShowMetricsWindow(ref bool p_open)
        {
            fixed (bool* __p_open0 = &p_open)
            {
                var __arg0 = __p_open0;
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ShowMetricsWindow(__arg0);
                }
                else
                {
                    __Internal32.ShowMetricsWindow(__arg0);
                }
            }
        }

        /// <summary>Create Debug Log window. display a simplified log of important dear imgui events.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L315"/></summary>
        // DEBUG: void          ShowDebugLogWindow(bool* p_open = NULL)
        public static void ShowDebugLogWindow(ref bool p_open)
        {
            fixed (bool* __p_open0 = &p_open)
            {
                var __arg0 = __p_open0;
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ShowDebugLogWindow(__arg0);
                }
                else
                {
                    __Internal32.ShowDebugLogWindow(__arg0);
                }
            }
        }

        /// <summary>Create Stack Tool window. hover items with mouse to query information about the source of their unique ID.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L316"/></summary>
        // DEBUG: void          ShowIDStackToolWindow(bool* p_open = NULL)
        public static void ShowIDStackToolWindow(ref bool p_open)
        {
            fixed (bool* __p_open0 = &p_open)
            {
                var __arg0 = __p_open0;
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ShowIDStackToolWindow(__arg0);
                }
                else
                {
                    __Internal32.ShowIDStackToolWindow(__arg0);
                }
            }
        }

        /// <summary>Create About window. display Dear ImGui version, credits and build/system information.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L317"/></summary>
        // DEBUG: void          ShowAboutWindow(bool* p_open = NULL)
        public static void ShowAboutWindow(ref bool p_open)
        {
            fixed (bool* __p_open0 = &p_open)
            {
                var __arg0 = __p_open0;
                if (Environment.Is64BitProcess)
                {
                    __Internal64.ShowAboutWindow(__arg0);
                }
                else
                {
                    __Internal32.ShowAboutWindow(__arg0);
                }
            }
        }

        /// <summary>Add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L318"/></summary>
        // DEBUG: void          ShowStyleEditor(ImGuiStyle* ref = NULL)
        public static void ShowStyleEditor(ImGuiStyle @ref = default)
        {
            var __arg0 = @ref is null ? IntPtr.Zero : @ref.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ShowStyleEditor(__arg0);
            }
            else
            {
                __Internal32.ShowStyleEditor(__arg0);
            }
        }

        /// <summary>Add style selector block (not a window), essentially a combo listing the default styles.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L319"/></summary>
        // DEBUG: bool          ShowStyleSelector(const char* label)
        public static bool ShowStyleSelector(string label)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.ShowStyleSelector(label) : __Internal32.ShowStyleSelector(label);
            return ___ret;
        }

        /// <summary>Add font selector block (not a window), essentially a combo listing the loaded fonts.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L320"/></summary>
        // DEBUG: void          ShowFontSelector(const char* label)
        public static void ShowFontSelector(string label)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.ShowFontSelector(label);
            }
            else
            {
                __Internal32.ShowFontSelector(label);
            }
        }

        /// <summary>Add basic help/info block (not a window): how to manipulate ImGui as an end-user (mouse/keyboard controls).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L321"/></summary>
        // DEBUG: void          ShowUserGuide()
        public static void ShowUserGuide()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.ShowUserGuide();
            }
            else
            {
                __Internal32.ShowUserGuide();
            }
        }

        /// <summary>Get the compiled version string e.g. "1.80 WIP" (essentially the value for IMGUI_VERSION from the compiled version of imgui.cpp).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L322"/></summary>
        // DEBUG: const char*   GetVersion()
        public static string GetVersion()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetVersion() : __Internal32.GetVersion();
            return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ___ret);
        }

        /// <summary>New, recommended style (default).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L325"/></summary>
        // DEBUG: void          StyleColorsDark(ImGuiStyle* dst = NULL)
        public static void StyleColorsDark(ImGuiStyle dst = default)
        {
            var __arg0 = dst is null ? IntPtr.Zero : dst.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.StyleColorsDark(__arg0);
            }
            else
            {
                __Internal32.StyleColorsDark(__arg0);
            }
        }

        /// <summary>Best used with borders and a custom, thicker font.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L326"/></summary>
        // DEBUG: void          StyleColorsLight(ImGuiStyle* dst = NULL)
        public static void StyleColorsLight(ImGuiStyle dst = default)
        {
            var __arg0 = dst is null ? IntPtr.Zero : dst.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.StyleColorsLight(__arg0);
            }
            else
            {
                __Internal32.StyleColorsLight(__arg0);
            }
        }

        /// <summary>Classic imgui style.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L327"/></summary>
        // DEBUG: void          StyleColorsClassic(ImGuiStyle* dst = NULL)
        public static void StyleColorsClassic(ImGuiStyle dst = default)
        {
            var __arg0 = dst is null ? IntPtr.Zero : dst.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.StyleColorsClassic(__arg0);
            }
            else
            {
                __Internal32.StyleColorsClassic(__arg0);
            }
        }

        /// <summary>Windows.<br/>- Begin() = push window to the stack and start appending to it. End() = pop window from the stack.<br/>- Passing 'bool* p_open != NULL' shows a window-closing widget in the upper-right corner of the window,.<br/>Which clicking will set the boolean to false when clicked.<br/>- You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.<br/>Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin().<br/>- Begin() return false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting.<br/>Anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!<br/>[Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,.<br/>BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function.<br/>Returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.].<br/>- Note that the bottom of window stack always contains a window called "Debug".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L341"/></summary>
        // DEBUG: bool          Begin(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0)
        public static bool Begin(string name, ref bool p_open, ImGuiWindowFlags flags = (ImGuiWindowFlags)(0))
        {
            fixed (bool* __p_open1 = &p_open)
            {
                var __arg1 = __p_open1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.Begin(name, __arg1, flags) : __Internal32.Begin(name, __arg1, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L342"/></summary>
        // DEBUG: void          End()
        public static void End()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.End();
            }
            else
            {
                __Internal32.End();
            }
        }

        /// <summary>Child Windows.<br/>- Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child.<br/>- For each independent axis of 'size': ==0.0f: use remaining host window size / &gt;0.0f: fixed size / &lt;0.0f: use remaining window size minus abs(size) / Each axis can use a different mode, e.g. ImVec2(0,400).<br/>- BeginChild() returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.<br/>Always call a matching EndChild() for each BeginChild() call, regardless of its return value.<br/>[Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,.<br/>BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function.<br/>Returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L352"/></summary>
        // DEBUG: bool          BeginChild(const char* str_id, const ImVec2& size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0)
        public static bool BeginChild(string str_id, Vector2 size, bool border = false, ImGuiWindowFlags flags = (ImGuiWindowFlags)(0))
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginChild(str_id, __arg1, border, flags) : __Internal32.BeginChild(str_id, __arg1, border, flags);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L353"/></summary>
        // DEBUG: bool          BeginChild(ImGuiID id, const ImVec2& size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0)
        public static bool BeginChild(uint id, Vector2 size, bool border = false, ImGuiWindowFlags flags = (ImGuiWindowFlags)(0))
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginChild_1(id, __arg1, border, flags) : __Internal32.BeginChild_1(id, __arg1, border, flags);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L354"/></summary>
        // DEBUG: void          EndChild()
        public static void EndChild()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndChild();
            }
            else
            {
                __Internal32.EndChild();
            }
        }

        /// <summary>Windows Utilities.<br/>- 'current window' = the window we are appending into while inside a Begin()/End() block. 'next window' = next window we will Begin() into.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L358"/></summary>
        // DEBUG: bool          IsWindowAppearing()
        public static bool IsWindowAppearing()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsWindowAppearing() : __Internal32.IsWindowAppearing();
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L359"/></summary>
        // DEBUG: bool          IsWindowCollapsed()
        public static bool IsWindowCollapsed()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsWindowCollapsed() : __Internal32.IsWindowCollapsed();
            return ___ret;
        }

        /// <summary>Is current window focused? or its root/child, depending on flags. see flags for options.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L360"/></summary>
        // DEBUG: bool          IsWindowFocused(ImGuiFocusedFlags flags=0)
        public static bool IsWindowFocused(ImGuiFocusedFlags flags = (ImGuiFocusedFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsWindowFocused(flags) : __Internal32.IsWindowFocused(flags);
            return ___ret;
        }

        /// <summary>Is current window hovered (and typically: not blocked by a popup/modal)? see flags for options. NB: If you are trying to check whether your mouse should be dispatched to imgui or to your app, you should use the 'io.WantCaptureMouse' boolean for that! Please read the FAQ!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L361"/></summary>
        // DEBUG: bool          IsWindowHovered(ImGuiHoveredFlags flags=0)
        public static bool IsWindowHovered(ImGuiHoveredFlags flags = (ImGuiHoveredFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsWindowHovered(flags) : __Internal32.IsWindowHovered(flags);
            return ___ret;
        }

        /// <summary>Get draw list associated to the current window, to append your own drawing primitives.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L362"/></summary>
        // DEBUG: ImDrawList*   GetWindowDrawList()
        public static ImDrawList GetWindowDrawList()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetWindowDrawList() : __Internal32.GetWindowDrawList();
            var __result0 = ___ret != IntPtr.Zero ? ImDrawList.__CreateInstance(___ret) : default;
            return __result0;
        }

        /// <summary>Get DPI scale currently associated to the current window's viewport.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L363"/></summary>
        // DEBUG: float         GetWindowDpiScale()
        public static float GetWindowDpiScale()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetWindowDpiScale() : __Internal32.GetWindowDpiScale();
            return ___ret;
        }

        /// <summary>Get current window position in screen space (note: it is unlikely you need to use this. Consider using current layout pos instead, GetCursorScreenPos()).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L364"/></summary>
        // DEBUG: ImVec2        GetWindowPos()
        public static Vector2 GetWindowPos()
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetWindowPos(new IntPtr(&___ret));
            }
            else
            {
                __Internal32.GetWindowPos(new IntPtr(&___ret));
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Get current window size (note: it is unlikely you need to use this. Consider using GetCursorScreenPos() and e.g. GetContentRegionAvail() instead).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L365"/></summary>
        // DEBUG: ImVec2        GetWindowSize()
        public static Vector2 GetWindowSize()
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetWindowSize(new IntPtr(&___ret));
            }
            else
            {
                __Internal32.GetWindowSize(new IntPtr(&___ret));
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Get current window width (shortcut for GetWindowSize().x).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L366"/></summary>
        // DEBUG: float         GetWindowWidth()
        public static float GetWindowWidth()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetWindowWidth() : __Internal32.GetWindowWidth();
            return ___ret;
        }

        /// <summary>Get current window height (shortcut for GetWindowSize().y).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L367"/></summary>
        // DEBUG: float         GetWindowHeight()
        public static float GetWindowHeight()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetWindowHeight() : __Internal32.GetWindowHeight();
            return ___ret;
        }

        /// <summary>Get viewport currently associated to the current window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L368"/></summary>
        // DEBUG: ImGuiViewport*GetWindowViewport()
        public static ImGuiViewport GetWindowViewport()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetWindowViewport() : __Internal32.GetWindowViewport();
            var __result0 = ImGuiViewport.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L372"/></summary>
        // DEBUG: void          SetNextWindowPos(const ImVec2& pos, ImGuiCond cond = 0, const ImVec2& pivot = ImVec2(0, 0))
        public static void SetNextWindowPos(Vector2 pos, ImGuiCond cond, Vector2 pivot)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref pos))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref pivot))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextWindowPos(__arg0, cond, __arg2);
            }
            else
            {
                __Internal32.SetNextWindowPos(__arg0, cond, __arg2);
            }
        }

        /// <summary>Set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L373"/></summary>
        // DEBUG: void          SetNextWindowSize(const ImVec2& size, ImGuiCond cond = 0)
        public static void SetNextWindowSize(Vector2 size, ImGuiCond cond = (ImGuiCond)(0))
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextWindowSize(__arg0, cond);
            }
            else
            {
                __Internal32.SetNextWindowSize(__arg0, cond);
            }
        }

        /// <summary>Set next window size limits. use -1,-1 on either X/Y axis to preserve the current size. Sizes will be rounded down. Use callback to apply non-trivial programmatic constraints.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L374"/></summary>
        // DEBUG: void          SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback = NULL, void* custom_callback_data = NULL)
        public static void SetNextWindowSizeConstraints(Vector2 size_min, Vector2 size_max, ImGuiSizeCallback custom_callback = null, IntPtr custom_callback_data = default)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref size_min))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref size_max))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = custom_callback == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(custom_callback);
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextWindowSizeConstraints(__arg0, __arg1, __arg2, custom_callback_data);
            }
            else
            {
                __Internal32.SetNextWindowSizeConstraints(__arg0, __arg1, __arg2, custom_callback_data);
            }
        }

        /// <summary>Set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0f to leave it automatic. call before Begin().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L375"/></summary>
        // DEBUG: void          SetNextWindowContentSize(const ImVec2& size)
        public static void SetNextWindowContentSize(Vector2 size)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextWindowContentSize(__arg0);
            }
            else
            {
                __Internal32.SetNextWindowContentSize(__arg0);
            }
        }

        /// <summary>Set next window collapsed state. call before Begin().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L376"/></summary>
        // DEBUG: void          SetNextWindowCollapsed(bool collapsed, ImGuiCond cond = 0)
        public static void SetNextWindowCollapsed(bool collapsed, ImGuiCond cond = (ImGuiCond)(0))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextWindowCollapsed(collapsed, cond);
            }
            else
            {
                __Internal32.SetNextWindowCollapsed(collapsed, cond);
            }
        }

        /// <summary>Set next window to be focused / top-most. call before Begin().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L377"/></summary>
        // DEBUG: void          SetNextWindowFocus()
        public static void SetNextWindowFocus()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextWindowFocus();
            }
            else
            {
                __Internal32.SetNextWindowFocus();
            }
        }

        /// <summary>Set next window scrolling value (use &lt; 0.0f to not affect a given axis).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L378"/></summary>
        // DEBUG: void          SetNextWindowScroll(const ImVec2& scroll)
        public static void SetNextWindowScroll(Vector2 scroll)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref scroll))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextWindowScroll(__arg0);
            }
            else
            {
                __Internal32.SetNextWindowScroll(__arg0);
            }
        }

        /// <summary>Set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L379"/></summary>
        // DEBUG: void          SetNextWindowBgAlpha(float alpha)
        public static void SetNextWindowBgAlpha(float alpha)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextWindowBgAlpha(alpha);
            }
            else
            {
                __Internal32.SetNextWindowBgAlpha(alpha);
            }
        }

        /// <summary>Set next window viewport.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L380"/></summary>
        // DEBUG: void          SetNextWindowViewport(ImGuiID viewport_id)
        public static void SetNextWindowViewport(uint viewport_id)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextWindowViewport(viewport_id);
            }
            else
            {
                __Internal32.SetNextWindowViewport(viewport_id);
            }
        }

        /// <summary>(not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L381"/></summary>
        // DEBUG: void          SetWindowPos(const ImVec2& pos, ImGuiCond cond = 0)
        public static void SetWindowPos(Vector2 pos, ImGuiCond cond = (ImGuiCond)(0))
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref pos))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetWindowPos(__arg0, cond);
            }
            else
            {
                __Internal32.SetWindowPos(__arg0, cond);
            }
        }

        /// <summary>(not recommended) set current window size - call within Begin()/End(). set to ImVec2(0, 0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L382"/></summary>
        // DEBUG: void          SetWindowSize(const ImVec2& size, ImGuiCond cond = 0)
        public static void SetWindowSize(Vector2 size, ImGuiCond cond = (ImGuiCond)(0))
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetWindowSize(__arg0, cond);
            }
            else
            {
                __Internal32.SetWindowSize(__arg0, cond);
            }
        }

        /// <summary>(not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L383"/></summary>
        // DEBUG: void          SetWindowCollapsed(bool collapsed, ImGuiCond cond = 0)
        public static void SetWindowCollapsed(bool collapsed, ImGuiCond cond = (ImGuiCond)(0))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetWindowCollapsed(collapsed, cond);
            }
            else
            {
                __Internal32.SetWindowCollapsed(collapsed, cond);
            }
        }

        /// <summary>(not recommended) set current window to be focused / top-most. prefer using SetNextWindowFocus().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L384"/></summary>
        // DEBUG: void          SetWindowFocus()
        public static void SetWindowFocus()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetWindowFocus();
            }
            else
            {
                __Internal32.SetWindowFocus();
            }
        }

        /// <summary>[OBSOLETE] set font scale. Adjust IO.FontGlobalScale if you want to scale all windows. This is an old API! For correct scaling, prefer to reload font + rebuild ImFontAtlas + call style.ScaleAllSizes().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L385"/></summary>
        // DEBUG: void          SetWindowFontScale(float scale)
        public static void SetWindowFontScale(float scale)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetWindowFontScale(scale);
            }
            else
            {
                __Internal32.SetWindowFontScale(scale);
            }
        }

        /// <summary>Set named window position.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L386"/></summary>
        // DEBUG: void          SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond = 0)
        public static void SetWindowPos(string name, Vector2 pos, ImGuiCond cond = (ImGuiCond)(0))
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref pos))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetWindowPos(name, __arg1, cond);
            }
            else
            {
                __Internal32.SetWindowPos(name, __arg1, cond);
            }
        }

        /// <summary>Set named window size. set axis to 0.0f to force an auto-fit on this axis.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L387"/></summary>
        // DEBUG: void          SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond = 0)
        public static void SetWindowSize(string name, Vector2 size, ImGuiCond cond = (ImGuiCond)(0))
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetWindowSize(name, __arg1, cond);
            }
            else
            {
                __Internal32.SetWindowSize(name, __arg1, cond);
            }
        }

        /// <summary>Set named window collapsed state.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L388"/></summary>
        // DEBUG: void          SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond = 0)
        public static void SetWindowCollapsed(string name, bool collapsed, ImGuiCond cond = (ImGuiCond)(0))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetWindowCollapsed(name, collapsed, cond);
            }
            else
            {
                __Internal32.SetWindowCollapsed(name, collapsed, cond);
            }
        }

        /// <summary>Set named window to be focused / top-most. use NULL to remove focus.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L389"/></summary>
        // DEBUG: void          SetWindowFocus(const char* name)
        public static void SetWindowFocus(string name)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetWindowFocus(name);
            }
            else
            {
                __Internal32.SetWindowFocus(name);
            }
        }

        /// <summary>== GetContentRegionMax() - GetCursorPos().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L394"/></summary>
        // DEBUG: ImVec2        GetContentRegionAvail()
        public static Vector2 GetContentRegionAvail()
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetContentRegionAvail(new IntPtr(&___ret));
            }
            else
            {
                __Internal32.GetContentRegionAvail(new IntPtr(&___ret));
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L395"/></summary>
        // DEBUG: ImVec2        GetContentRegionMax()
        public static Vector2 GetContentRegionMax()
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetContentRegionMax(new IntPtr(&___ret));
            }
            else
            {
                __Internal32.GetContentRegionMax(new IntPtr(&___ret));
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Content boundaries min for the full window (roughly (0,0)-Scroll), in window coordinates.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L396"/></summary>
        // DEBUG: ImVec2        GetWindowContentRegionMin()
        public static Vector2 GetWindowContentRegionMin()
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetWindowContentRegionMin(new IntPtr(&___ret));
            }
            else
            {
                __Internal32.GetWindowContentRegionMin(new IntPtr(&___ret));
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Content boundaries max for the full window (roughly (0,0)+Size-Scroll) where Size can be overridden with SetNextWindowContentSize(), in window coordinates.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L397"/></summary>
        // DEBUG: ImVec2        GetWindowContentRegionMax()
        public static Vector2 GetWindowContentRegionMax()
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetWindowContentRegionMax(new IntPtr(&___ret));
            }
            else
            {
                __Internal32.GetWindowContentRegionMax(new IntPtr(&___ret));
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Get scrolling amount [0 .. GetScrollMaxX()].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L402"/></summary>
        // DEBUG: float         GetScrollX()
        public static float GetScrollX()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetScrollX() : __Internal32.GetScrollX();
            return ___ret;
        }

        /// <summary>Get scrolling amount [0 .. GetScrollMaxY()].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L403"/></summary>
        // DEBUG: float         GetScrollY()
        public static float GetScrollY()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetScrollY() : __Internal32.GetScrollY();
            return ___ret;
        }

        /// <summary>Set scrolling amount [0 .. GetScrollMaxX()].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L404"/></summary>
        // DEBUG: void          SetScrollX(float scroll_x)
        public static void SetScrollX(float scroll_x)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetScrollX(scroll_x);
            }
            else
            {
                __Internal32.SetScrollX(scroll_x);
            }
        }

        /// <summary>Set scrolling amount [0 .. GetScrollMaxY()].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L405"/></summary>
        // DEBUG: void          SetScrollY(float scroll_y)
        public static void SetScrollY(float scroll_y)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetScrollY(scroll_y);
            }
            else
            {
                __Internal32.SetScrollY(scroll_y);
            }
        }

        /// <summary>Get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L406"/></summary>
        // DEBUG: float         GetScrollMaxX()
        public static float GetScrollMaxX()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetScrollMaxX() : __Internal32.GetScrollMaxX();
            return ___ret;
        }

        /// <summary>Get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L407"/></summary>
        // DEBUG: float         GetScrollMaxY()
        public static float GetScrollMaxY()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetScrollMaxY() : __Internal32.GetScrollMaxY();
            return ___ret;
        }

        /// <summary>Adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L408"/></summary>
        // DEBUG: void          SetScrollHereX(float center_x_ratio = 0.5f)
        public static void SetScrollHereX(float center_x_ratio = 0.5F)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetScrollHereX(center_x_ratio);
            }
            else
            {
                __Internal32.SetScrollHereX(center_x_ratio);
            }
        }

        /// <summary>Adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L409"/></summary>
        // DEBUG: void          SetScrollHereY(float center_y_ratio = 0.5f)
        public static void SetScrollHereY(float center_y_ratio = 0.5F)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetScrollHereY(center_y_ratio);
            }
            else
            {
                __Internal32.SetScrollHereY(center_y_ratio);
            }
        }

        /// <summary>Adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L410"/></summary>
        // DEBUG: void          SetScrollFromPosX(float local_x, float center_x_ratio = 0.5f)
        public static void SetScrollFromPosX(float local_x, float center_x_ratio = 0.5F)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetScrollFromPosX(local_x, center_x_ratio);
            }
            else
            {
                __Internal32.SetScrollFromPosX(local_x, center_x_ratio);
            }
        }

        /// <summary>Adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L411"/></summary>
        // DEBUG: void          SetScrollFromPosY(float local_y, float center_y_ratio = 0.5f)
        public static void SetScrollFromPosY(float local_y, float center_y_ratio = 0.5F)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetScrollFromPosY(local_y, center_y_ratio);
            }
            else
            {
                __Internal32.SetScrollFromPosY(local_y, center_y_ratio);
            }
        }

        /// <summary>Use NULL as a shortcut to push default font.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L414"/></summary>
        // DEBUG: void          PushFont(ImFont* font)
        public static void PushFont(ImFont font)
        {
            var __arg0 = font is null ? IntPtr.Zero : font.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.PushFont(__arg0);
            }
            else
            {
                __Internal32.PushFont(__arg0);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L415"/></summary>
        // DEBUG: void          PopFont()
        public static void PopFont()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PopFont();
            }
            else
            {
                __Internal32.PopFont();
            }
        }

        /// <summary>Modify a style color. always use this if you modify the style after NewFrame().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L416"/></summary>
        // DEBUG: void          PushStyleColor(ImGuiCol idx, ImU32 col)
        public static void PushStyleColor(ImGuiCol idx, uint col)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PushStyleColor(idx, col);
            }
            else
            {
                __Internal32.PushStyleColor(idx, col);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L417"/></summary>
        // DEBUG: void          PushStyleColor(ImGuiCol idx, const ImVec4& col)
        public static void PushStyleColor(ImGuiCol idx, Vector4 col)
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref col))
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.PushStyleColor(idx, __arg1);
            }
            else
            {
                __Internal32.PushStyleColor(idx, __arg1);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L418"/></summary>
        // DEBUG: void          PopStyleColor(int count = 1)
        public static void PopStyleColor(int count = (int)(1))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PopStyleColor(count);
            }
            else
            {
                __Internal32.PopStyleColor(count);
            }
        }

        /// <summary>Modify a style float variable. always use this if you modify the style after NewFrame().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L419"/></summary>
        // DEBUG: void          PushStyleVar(ImGuiStyleVar idx, float val)
        public static void PushStyleVar(ImGuiStyleVar idx, float val)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PushStyleVar(idx, val);
            }
            else
            {
                __Internal32.PushStyleVar(idx, val);
            }
        }

        /// <summary>Modify a style ImVec2 variable. always use this if you modify the style after NewFrame().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L420"/></summary>
        // DEBUG: void          PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)
        public static void PushStyleVar(ImGuiStyleVar idx, Vector2 val)
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref val))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.PushStyleVar(idx, __arg1);
            }
            else
            {
                __Internal32.PushStyleVar(idx, __arg1);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L421"/></summary>
        // DEBUG: void          PopStyleVar(int count = 1)
        public static void PopStyleVar(int count = (int)(1))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PopStyleVar(count);
            }
            else
            {
                __Internal32.PopStyleVar(count);
            }
        }

        /// <summary>== tab stop enable. Allow focusing using TAB/Shift-TAB, enabled by default but you can disable it for certain widgets.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L422"/></summary>
        // DEBUG: void          PushTabStop(bool tab_stop)
        public static void PushTabStop(bool tab_stop)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PushTabStop(tab_stop);
            }
            else
            {
                __Internal32.PushTabStop(tab_stop);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L423"/></summary>
        // DEBUG: void          PopTabStop()
        public static void PopTabStop()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PopTabStop();
            }
            else
            {
                __Internal32.PopTabStop();
            }
        }

        /// <summary>In 'repeat' mode, Button*() functions return repeated true in a typematic manner (using io.KeyRepeatDelay/io.KeyRepeatRate setting). Note that you can call IsItemActive() after any Button() to tell if the button is held in the current frame.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L424"/></summary>
        // DEBUG: void          PushButtonRepeat(bool repeat)
        public static void PushButtonRepeat(bool repeat)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PushButtonRepeat(repeat);
            }
            else
            {
                __Internal32.PushButtonRepeat(repeat);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L425"/></summary>
        // DEBUG: void          PopButtonRepeat()
        public static void PopButtonRepeat()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PopButtonRepeat();
            }
            else
            {
                __Internal32.PopButtonRepeat();
            }
        }

        /// <summary>Push width of items for common large "item+label" widgets. &gt;0.0f: width in pixels, &lt;0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L428"/></summary>
        // DEBUG: void          PushItemWidth(float item_width)
        public static void PushItemWidth(float item_width)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PushItemWidth(item_width);
            }
            else
            {
                __Internal32.PushItemWidth(item_width);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L429"/></summary>
        // DEBUG: void          PopItemWidth()
        public static void PopItemWidth()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PopItemWidth();
            }
            else
            {
                __Internal32.PopItemWidth();
            }
        }

        /// <summary>Set width of the _next_ common large "item+label" widget. &gt;0.0f: width in pixels, &lt;0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L430"/></summary>
        // DEBUG: void          SetNextItemWidth(float item_width)
        public static void SetNextItemWidth(float item_width)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextItemWidth(item_width);
            }
            else
            {
                __Internal32.SetNextItemWidth(item_width);
            }
        }

        /// <summary>Width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L431"/></summary>
        // DEBUG: float         CalcItemWidth()
        public static float CalcItemWidth()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.CalcItemWidth() : __Internal32.CalcItemWidth();
            return ___ret;
        }

        /// <summary>Push word-wrapping position for Text*() commands. &lt; 0.0f: no wrapping; 0.0f: wrap to end of window (or column); &gt; 0.0f: wrap at 'wrap_pos_x' position in window local space.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L432"/></summary>
        // DEBUG: void          PushTextWrapPos(float wrap_local_pos_x = 0.0f)
        public static void PushTextWrapPos(float wrap_local_pos_x = 0.0F)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PushTextWrapPos(wrap_local_pos_x);
            }
            else
            {
                __Internal32.PushTextWrapPos(wrap_local_pos_x);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L433"/></summary>
        // DEBUG: void          PopTextWrapPos()
        public static void PopTextWrapPos()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PopTextWrapPos();
            }
            else
            {
                __Internal32.PopTextWrapPos();
            }
        }

        /// <summary>Get current font.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L437"/></summary>
        // DEBUG: ImFont*       GetFont()
        public static ImFont GetFont()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetFont() : __Internal32.GetFont();
            var __result0 = ImFont.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Get current font size (= height in pixels) of current font with current scale applied.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L438"/></summary>
        // DEBUG: float         GetFontSize()
        public static float GetFontSize()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetFontSize() : __Internal32.GetFontSize();
            return ___ret;
        }

        /// <summary>Get UV coordinate for a while pixel, useful to draw custom shapes via the ImDrawList API.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L439"/></summary>
        // DEBUG: ImVec2        GetFontTexUvWhitePixel()
        public static Vector2 GetFontTexUvWhitePixel()
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetFontTexUvWhitePixel(new IntPtr(&___ret));
            }
            else
            {
                __Internal32.GetFontTexUvWhitePixel(new IntPtr(&___ret));
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L440"/></summary>
        // DEBUG: ImU32         GetColorU32(ImGuiCol idx, float alpha_mul = 1.0f)
        public static uint GetColorU32(ImGuiCol idx, float alpha_mul = 1.0F)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetColorU32(idx, alpha_mul) : __Internal32.GetColorU32(idx, alpha_mul);
            return ___ret;
        }

        /// <summary>Retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L441"/></summary>
        // DEBUG: ImU32         GetColorU32(const ImVec4& col)
        public static uint GetColorU32(Vector4 col)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref col))
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetColorU32(__arg0) : __Internal32.GetColorU32(__arg0);
            return ___ret;
        }

        /// <summary>Retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L442"/></summary>
        // DEBUG: ImU32         GetColorU32(ImU32 col)
        public static uint GetColorU32(uint col)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetColorU32(col) : __Internal32.GetColorU32(col);
            return ___ret;
        }

        /// <summary>Retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L443"/></summary>
        // DEBUG: const ImVec4& GetStyleColorVec4(ImGuiCol idx)
        public static Vector4 GetStyleColorVec4(ImGuiCol idx)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetStyleColorVec4(idx) : __Internal32.GetStyleColorVec4(idx);
            return Unsafe.Read<Vector4>(___ret.ToPointer())
            /* DEBUG: TypeMapImVec4.CSharpMarshalToManaged: Case 5 */
            /* DEBUG: TypeMapImVec4.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Cursor position in absolute coordinates (prefer using this, also more useful to work with ImDrawList API).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L453"/></summary>
        // DEBUG: ImVec2        GetCursorScreenPos()
        public static Vector2 GetCursorScreenPos()
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetCursorScreenPos(new IntPtr(&___ret));
            }
            else
            {
                __Internal32.GetCursorScreenPos(new IntPtr(&___ret));
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Cursor position in absolute coordinates.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L454"/></summary>
        // DEBUG: void          SetCursorScreenPos(const ImVec2& pos)
        public static void SetCursorScreenPos(Vector2 pos)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref pos))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetCursorScreenPos(__arg0);
            }
            else
            {
                __Internal32.SetCursorScreenPos(__arg0);
            }
        }

        /// <summary>[window-local] cursor position in window coordinates (relative to window position).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L455"/></summary>
        // DEBUG: ImVec2        GetCursorPos()
        public static Vector2 GetCursorPos()
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetCursorPos(new IntPtr(&___ret));
            }
            else
            {
                __Internal32.GetCursorPos(new IntPtr(&___ret));
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>[window-local] ".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L456"/></summary>
        // DEBUG: float         GetCursorPosX()
        public static float GetCursorPosX()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetCursorPosX() : __Internal32.GetCursorPosX();
            return ___ret;
        }

        /// <summary>[window-local] ".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L457"/></summary>
        // DEBUG: float         GetCursorPosY()
        public static float GetCursorPosY()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetCursorPosY() : __Internal32.GetCursorPosY();
            return ___ret;
        }

        /// <summary>[window-local] ".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L458"/></summary>
        // DEBUG: void          SetCursorPos(const ImVec2& local_pos)
        public static void SetCursorPos(Vector2 local_pos)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref local_pos))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetCursorPos(__arg0);
            }
            else
            {
                __Internal32.SetCursorPos(__arg0);
            }
        }

        /// <summary>[window-local] ".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L459"/></summary>
        // DEBUG: void          SetCursorPosX(float local_x)
        public static void SetCursorPosX(float local_x)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetCursorPosX(local_x);
            }
            else
            {
                __Internal32.SetCursorPosX(local_x);
            }
        }

        /// <summary>[window-local] ".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L460"/></summary>
        // DEBUG: void          SetCursorPosY(float local_y)
        public static void SetCursorPosY(float local_y)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetCursorPosY(local_y);
            }
            else
            {
                __Internal32.SetCursorPosY(local_y);
            }
        }

        /// <summary>[window-local] initial cursor position, in window coordinates.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L461"/></summary>
        // DEBUG: ImVec2        GetCursorStartPos()
        public static Vector2 GetCursorStartPos()
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetCursorStartPos(new IntPtr(&___ret));
            }
            else
            {
                __Internal32.GetCursorStartPos(new IntPtr(&___ret));
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L464"/></summary>
        // DEBUG: void          Separator()
        public static void Separator()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Separator();
            }
            else
            {
                __Internal32.Separator();
            }
        }

        /// <summary>Call between widgets or groups to layout them horizontally. X position given in window coordinates.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L465"/></summary>
        // DEBUG: void          SameLine(float offset_from_start_x=0.0f, float spacing=-1.0f)
        public static void SameLine(float offset_from_start_x = 0.0F, float spacing = -1.0F)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SameLine(offset_from_start_x, spacing);
            }
            else
            {
                __Internal32.SameLine(offset_from_start_x, spacing);
            }
        }

        /// <summary>Undo a SameLine() or force a new line when in a horizontal-layout context.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L466"/></summary>
        // DEBUG: void          NewLine()
        public static void NewLine()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.NewLine();
            }
            else
            {
                __Internal32.NewLine();
            }
        }

        /// <summary>Add vertical spacing.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L467"/></summary>
        // DEBUG: void          Spacing()
        public static void Spacing()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Spacing();
            }
            else
            {
                __Internal32.Spacing();
            }
        }

        /// <summary>Add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L468"/></summary>
        // DEBUG: void          Dummy(const ImVec2& size)
        public static void Dummy(Vector2 size)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.Dummy(__arg0);
            }
            else
            {
                __Internal32.Dummy(__arg0);
            }
        }

        /// <summary>Move content position toward the right, by indent_w, or style.IndentSpacing if indent_w &lt;= 0.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L469"/></summary>
        // DEBUG: void          Indent(float indent_w = 0.0f)
        public static void Indent(float indent_w = 0.0F)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Indent(indent_w);
            }
            else
            {
                __Internal32.Indent(indent_w);
            }
        }

        /// <summary>Move content position back to the left, by indent_w, or style.IndentSpacing if indent_w &lt;= 0.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L470"/></summary>
        // DEBUG: void          Unindent(float indent_w = 0.0f)
        public static void Unindent(float indent_w = 0.0F)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Unindent(indent_w);
            }
            else
            {
                __Internal32.Unindent(indent_w);
            }
        }

        /// <summary>Lock horizontal starting position.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L471"/></summary>
        // DEBUG: void          BeginGroup()
        public static void BeginGroup()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.BeginGroup();
            }
            else
            {
                __Internal32.BeginGroup();
            }
        }

        /// <summary>Unlock horizontal starting position + capture the whole group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L472"/></summary>
        // DEBUG: void          EndGroup()
        public static void EndGroup()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndGroup();
            }
            else
            {
                __Internal32.EndGroup();
            }
        }

        /// <summary>Vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L473"/></summary>
        // DEBUG: void          AlignTextToFramePadding()
        public static void AlignTextToFramePadding()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.AlignTextToFramePadding();
            }
            else
            {
                __Internal32.AlignTextToFramePadding();
            }
        }

        /// <summary>~ FontSize.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L474"/></summary>
        // DEBUG: float         GetTextLineHeight()
        public static float GetTextLineHeight()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetTextLineHeight() : __Internal32.GetTextLineHeight();
            return ___ret;
        }

        /// <summary>~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L475"/></summary>
        // DEBUG: float         GetTextLineHeightWithSpacing()
        public static float GetTextLineHeightWithSpacing()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetTextLineHeightWithSpacing() : __Internal32.GetTextLineHeightWithSpacing();
            return ___ret;
        }

        /// <summary>~ FontSize + style.FramePadding.y * 2.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L476"/></summary>
        // DEBUG: float         GetFrameHeight()
        public static float GetFrameHeight()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetFrameHeight() : __Internal32.GetFrameHeight();
            return ___ret;
        }

        /// <summary>~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L477"/></summary>
        // DEBUG: float         GetFrameHeightWithSpacing()
        public static float GetFrameHeightWithSpacing()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetFrameHeightWithSpacing() : __Internal32.GetFrameHeightWithSpacing();
            return ___ret;
        }

        /// <summary>Push string into the ID stack (will hash string).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L490"/></summary>
        // DEBUG: void          PushID(const char* str_id)
        public static void PushID(string str_id)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PushID(str_id);
            }
            else
            {
                __Internal32.PushID(str_id);
            }
        }

        /// <summary>Push string into the ID stack (will hash string).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L491"/></summary>
        // DEBUG: void          PushID(const char* str_id_begin, const char* str_id_end)
        public static void PushID(string str_id_begin, string str_id_end)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PushID(str_id_begin, str_id_end);
            }
            else
            {
                __Internal32.PushID(str_id_begin, str_id_end);
            }
        }

        /// <summary>Push pointer into the ID stack (will hash pointer).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L492"/></summary>
        // DEBUG: void          PushID(const void* ptr_id)
        public static void PushID(IntPtr ptr_id)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PushID(ptr_id);
            }
            else
            {
                __Internal32.PushID(ptr_id);
            }
        }

        /// <summary>Push integer into the ID stack (will hash integer).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L493"/></summary>
        // DEBUG: void          PushID(int int_id)
        public static void PushID(int int_id)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PushID_1(int_id);
            }
            else
            {
                __Internal32.PushID_1(int_id);
            }
        }

        /// <summary>Pop from the ID stack.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L494"/></summary>
        // DEBUG: void          PopID()
        public static void PopID()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PopID();
            }
            else
            {
                __Internal32.PopID();
            }
        }

        /// <summary>Calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L495"/></summary>
        // DEBUG: ImGuiID       GetID(const char* str_id)
        public static uint GetID(string str_id)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetID(str_id) : __Internal32.GetID(str_id);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L496"/></summary>
        // DEBUG: ImGuiID       GetID(const char* str_id_begin, const char* str_id_end)
        public static uint GetID(string str_id_begin, string str_id_end)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetID(str_id_begin, str_id_end) : __Internal32.GetID(str_id_begin, str_id_end);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L497"/></summary>
        // DEBUG: ImGuiID       GetID(const void* ptr_id)
        public static uint GetID(IntPtr ptr_id)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetID(ptr_id) : __Internal32.GetID(ptr_id);
            return ___ret;
        }

        /// <summary>Raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L500"/></summary>
        // DEBUG: void          TextUnformatted(const char* text, const char* text_end = NULL)
        public static void TextUnformatted(string text, string text_end = default)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TextUnformatted(text, text_end);
            }
            else
            {
                __Internal32.TextUnformatted(text, text_end);
            }
        }

        /// <summary>Formatted text.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L501"/></summary>
        // DEBUG: void          Text(const char* fmt, ...)                                      IM_FMTARGS(1)
        public static void Text(string fmt)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Text(fmt);
            }
            else
            {
                __Internal32.Text(fmt);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L502"/></summary>
        // DEBUG: void          TextV(const char* fmt, va_list args)                            IM_FMTLIST(1)
        public static void TextV(string fmt, Object args)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TextV(fmt, args);
            }
            else
            {
                __Internal32.TextV(fmt, args);
            }
        }

        /// <summary>Shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L503"/></summary>
        // DEBUG: void          TextColored(const ImVec4& col, const char* fmt, ...)            IM_FMTARGS(2)
        public static void TextColored(Vector4 col, string fmt)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref col))
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.TextColored(__arg0, fmt);
            }
            else
            {
                __Internal32.TextColored(__arg0, fmt);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L504"/></summary>
        // DEBUG: void          TextColoredV(const ImVec4& col, const char* fmt, va_list args)  IM_FMTLIST(2)
        public static void TextColoredV(Vector4 col, string fmt, Object args)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref col))
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.TextColoredV(__arg0, fmt, args);
            }
            else
            {
                __Internal32.TextColoredV(__arg0, fmt, args);
            }
        }

        /// <summary>Shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L505"/></summary>
        // DEBUG: void          TextDisabled(const char* fmt, ...)                              IM_FMTARGS(1)
        public static void TextDisabled(string fmt)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TextDisabled(fmt);
            }
            else
            {
                __Internal32.TextDisabled(fmt);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L506"/></summary>
        // DEBUG: void          TextDisabledV(const char* fmt, va_list args)                    IM_FMTLIST(1)
        public static void TextDisabledV(string fmt, Object args)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TextDisabledV(fmt, args);
            }
            else
            {
                __Internal32.TextDisabledV(fmt, args);
            }
        }

        /// <summary>Shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L507"/></summary>
        // DEBUG: void          TextWrapped(const char* fmt, ...)                               IM_FMTARGS(1)
        public static void TextWrapped(string fmt)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TextWrapped(fmt);
            }
            else
            {
                __Internal32.TextWrapped(fmt);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L508"/></summary>
        // DEBUG: void          TextWrappedV(const char* fmt, va_list args)                     IM_FMTLIST(1)
        public static void TextWrappedV(string fmt, Object args)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TextWrappedV(fmt, args);
            }
            else
            {
                __Internal32.TextWrappedV(fmt, args);
            }
        }

        /// <summary>Display text+label aligned the same way as value+label widgets.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L509"/></summary>
        // DEBUG: void          LabelText(const char* label, const char* fmt, ...)              IM_FMTARGS(2)
        public static void LabelText(string label, string fmt)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.LabelText(label, fmt);
            }
            else
            {
                __Internal32.LabelText(label, fmt);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L510"/></summary>
        // DEBUG: void          LabelTextV(const char* label, const char* fmt, va_list args)    IM_FMTLIST(2)
        public static void LabelTextV(string label, string fmt, Object args)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.LabelTextV(label, fmt, args);
            }
            else
            {
                __Internal32.LabelTextV(label, fmt, args);
            }
        }

        /// <summary>Shortcut for Bullet()+Text().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L511"/></summary>
        // DEBUG: void          BulletText(const char* fmt, ...)                                IM_FMTARGS(1)
        public static void BulletText(string fmt)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.BulletText(fmt);
            }
            else
            {
                __Internal32.BulletText(fmt);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L512"/></summary>
        // DEBUG: void          BulletTextV(const char* fmt, va_list args)                      IM_FMTLIST(1)
        public static void BulletTextV(string fmt, Object args)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.BulletTextV(fmt, args);
            }
            else
            {
                __Internal32.BulletTextV(fmt, args);
            }
        }

        /// <summary>Currently: formatted text with an horizontal line.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L513"/></summary>
        // DEBUG: void          SeparatorText(const char* label)
        public static void SeparatorText(string label)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SeparatorText(label);
            }
            else
            {
                __Internal32.SeparatorText(label);
            }
        }

        /// <summary>Button.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L518"/></summary>
        // DEBUG: bool          Button(const char* label, const ImVec2& size = ImVec2(0, 0))
        public static bool Button(string label, Vector2 size)
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.Button(label, __arg1) : __Internal32.Button(label, __arg1);
            return ___ret;
        }

        /// <summary>Button with (FramePadding.y == 0) to easily embed within text.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L519"/></summary>
        // DEBUG: bool          SmallButton(const char* label)
        public static bool SmallButton(string label)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.SmallButton(label) : __Internal32.SmallButton(label);
            return ___ret;
        }

        /// <summary>Flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L520"/></summary>
        // DEBUG: bool          InvisibleButton(const char* str_id, const ImVec2& size, ImGuiButtonFlags flags = 0)
        public static bool InvisibleButton(string str_id, Vector2 size, ImGuiButtonFlags flags = (ImGuiButtonFlags)(0))
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.InvisibleButton(str_id, __arg1, flags) : __Internal32.InvisibleButton(str_id, __arg1, flags);
            return ___ret;
        }

        /// <summary>Square button with an arrow shape.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L521"/></summary>
        // DEBUG: bool          ArrowButton(const char* str_id, ImGuiDir dir)
        public static bool ArrowButton(string str_id, ImGuiDir dir)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.ArrowButton(str_id, dir) : __Internal32.ArrowButton(str_id, dir);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L522"/></summary>
        // DEBUG: bool          Checkbox(const char* label, bool* v)
        public static bool Checkbox(string label, ref bool v)
        {
            fixed (bool* __v1 = &v)
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.Checkbox(label, __arg1) : __Internal32.Checkbox(label, __arg1);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L523"/></summary>
        // DEBUG: bool          CheckboxFlags(const char* label, int* flags, int flags_value)
        public static bool CheckboxFlags(string label, ref int flags, int flags_value)
        {
            fixed (int* __flags1 = &flags)
            {
                var __arg1 = __flags1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.CheckboxFlags(label, __arg1, flags_value) : __Internal32.CheckboxFlags(label, __arg1, flags_value);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L524"/></summary>
        // DEBUG: bool          CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)
        public static bool CheckboxFlags(string label, ref uint flags, uint flags_value)
        {
            fixed (uint* __flags1 = &flags)
            {
                var __arg1 = __flags1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.CheckboxFlags_1(label, __arg1, flags_value) : __Internal32.CheckboxFlags_1(label, __arg1, flags_value);
                return ___ret;
            }
        }

        /// <summary>Use with e.g. if (RadioButton("one", my_value==1)) { my_value = 1; }.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L525"/></summary>
        // DEBUG: bool          RadioButton(const char* label, bool active)
        public static bool RadioButton(string label, bool active)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.RadioButton(label, active) : __Internal32.RadioButton(label, active);
            return ___ret;
        }

        /// <summary>Shortcut to handle the above pattern when value is an integer.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L526"/></summary>
        // DEBUG: bool          RadioButton(const char* label, int* v, int v_button)
        public static bool RadioButton(string label, ref int v, int v_button)
        {
            fixed (int* __v1 = &v)
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.RadioButton(label, __arg1, v_button) : __Internal32.RadioButton(label, __arg1, v_button);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L527"/></summary>
        // DEBUG: void          ProgressBar(float fraction, const ImVec2& size_arg = ImVec2(-FLT_MIN, 0), const char* overlay = NULL)
        public static void ProgressBar(float fraction, Vector2 size_arg, string overlay = default)
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref size_arg))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.ProgressBar(fraction, __arg1, overlay);
            }
            else
            {
                __Internal32.ProgressBar(fraction, __arg1, overlay);
            }
        }

        /// <summary>Draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L528"/></summary>
        // DEBUG: void          Bullet()
        public static void Bullet()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Bullet();
            }
            else
            {
                __Internal32.Bullet();
            }
        }

        /// <summary>Widgets: Images.<br/>- Read about ImTextureID here: https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples.<br/>- Note that ImageButton() adds style.FramePadding*2.0f to provided size. This is in order to facilitate fitting an image in a button.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L533"/></summary>
        // DEBUG: void          Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), const ImVec4& tint_col = ImVec4(1, 1, 1, 1), const ImVec4& border_col = ImVec4(0, 0, 0, 0))
        public static void Image(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, Vector4 tint_col, Vector4 border_col)
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref uv0))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg3 = new IntPtr(Unsafe.AsPointer(ref uv1))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg4 = new IntPtr(Unsafe.AsPointer(ref tint_col))
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg5 = new IntPtr(Unsafe.AsPointer(ref border_col))
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.Image(user_texture_id, __arg1, __arg2, __arg3, __arg4, __arg5);
            }
            else
            {
                __Internal32.Image(user_texture_id, __arg1, __arg2, __arg3, __arg4, __arg5);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L534"/></summary>
        // DEBUG: bool          ImageButton(const char* str_id, ImTextureID user_texture_id, const ImVec2& image_size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), const ImVec4& bg_col = ImVec4(0, 0, 0, 0), const ImVec4& tint_col = ImVec4(1, 1, 1, 1))
        public static bool ImageButton(string str_id, IntPtr user_texture_id, Vector2 image_size, Vector2 uv0, Vector2 uv1, Vector4 bg_col, Vector4 tint_col)
        {
            var __arg2 = new IntPtr(Unsafe.AsPointer(ref image_size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg3 = new IntPtr(Unsafe.AsPointer(ref uv0))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg4 = new IntPtr(Unsafe.AsPointer(ref uv1))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg5 = new IntPtr(Unsafe.AsPointer(ref bg_col))
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg6 = new IntPtr(Unsafe.AsPointer(ref tint_col))
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.ImageButton(str_id, user_texture_id, __arg2, __arg3, __arg4, __arg5, __arg6) : __Internal32.ImageButton(str_id, user_texture_id, __arg2, __arg3, __arg4, __arg5, __arg6);
            return ___ret;
        }

        /// <summary>Widgets: Combo Box (Dropdown).<br/>- The BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() items.<br/>- The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose. This is analogous to how ListBox are created.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L539"/></summary>
        // DEBUG: bool          BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags = 0)
        public static bool BeginCombo(string label, string preview_value, ImGuiComboFlags flags = (ImGuiComboFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginCombo(label, preview_value, flags) : __Internal32.BeginCombo(label, preview_value, flags);
            return ___ret;
        }

        /// <summary>Only call EndCombo() if BeginCombo() returns true!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L540"/></summary>
        // DEBUG: void          EndCombo()
        public static void EndCombo()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndCombo();
            }
            else
            {
                __Internal32.EndCombo();
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L541"/></summary>
        // DEBUG: bool          Combo(const char* label, int* current_item, const char* const items[], int items_count, int popup_max_height_in_items = -1)
        public static bool Combo(string label, ref int current_item, string[] items, int items_count, int popup_max_height_in_items = (int)(-1))
        {
            fixed (int* __current_item1 = &current_item)
            {
                var __arg1 = __current_item1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.Combo(label, __arg1, items, items_count, popup_max_height_in_items) : __Internal32.Combo(label, __arg1, items, items_count, popup_max_height_in_items);
                return ___ret;
            }
        }

        /// <summary>Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L542"/></summary>
        // DEBUG: bool          Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items = -1)
        public static bool Combo(string label, ref int current_item, string items_separated_by_zeros, int popup_max_height_in_items = (int)(-1))
        {
            fixed (int* __current_item1 = &current_item)
            {
                var __arg1 = __current_item1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.Combo(label, __arg1, items_separated_by_zeros, popup_max_height_in_items) : __Internal32.Combo(label, __arg1, items_separated_by_zeros, popup_max_height_in_items);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L543"/></summary>
        // DEBUG: bool          Combo(const char* label, int* current_item, const char* (*getter)(void* user_data, int idx), void* user_data, int items_count, int popup_max_height_in_items = -1)
        public static bool Combo(string label, ref int current_item, Func_IntPtr_IntPtr_int getter, IntPtr user_data, int items_count, int popup_max_height_in_items = (int)(-1))
        {
            fixed (int* __current_item1 = &current_item)
            {
                var __arg1 = __current_item1;
                var __arg2 = getter == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(getter);
                var ___ret = Environment.Is64BitProcess ? __Internal64.Combo(label, __arg1, __arg2, user_data, items_count, popup_max_height_in_items) : __Internal32.Combo(label, __arg1, __arg2, user_data, items_count, popup_max_height_in_items);
                return ___ret;
            }
        }

        /// <summary>If v_min &gt;= v_max we have no bound.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L557"/></summary>
        // DEBUG: bool          DragFloat(const char* label, float* v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
        public static bool DragFloat(string label, ref float v, float v_speed = 1.0F, float v_min = 0.0F, float v_max = 0.0F, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            fixed (float* __v1 = &v)
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.DragFloat(label, __arg1, v_speed, v_min, v_max, format, flags) : __Internal32.DragFloat(label, __arg1, v_speed, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L558"/></summary>
        // DEBUG: bool          DragFloat2(const char* label, float v[2], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
        public static bool DragFloat2(string label, Span<float> v, float v_speed = 1.0F, float v_min = 0.0F, float v_max = 0.0F, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            if (v == null || v.Length != 2)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (float* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.DragFloat2(label, __arg1, v_speed, v_min, v_max, format, flags) : __Internal32.DragFloat2(label, __arg1, v_speed, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L559"/></summary>
        // DEBUG: bool          DragFloat3(const char* label, float v[3], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
        public static bool DragFloat3(string label, Span<float> v, float v_speed = 1.0F, float v_min = 0.0F, float v_max = 0.0F, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            if (v == null || v.Length != 3)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (float* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.DragFloat3(label, __arg1, v_speed, v_min, v_max, format, flags) : __Internal32.DragFloat3(label, __arg1, v_speed, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L560"/></summary>
        // DEBUG: bool          DragFloat4(const char* label, float v[4], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
        public static bool DragFloat4(string label, Span<float> v, float v_speed = 1.0F, float v_min = 0.0F, float v_max = 0.0F, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            if (v == null || v.Length != 4)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (float* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.DragFloat4(label, __arg1, v_speed, v_min, v_max, format, flags) : __Internal32.DragFloat4(label, __arg1, v_speed, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L561"/></summary>
        // DEBUG: bool          DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", const char* format_max = NULL, ImGuiSliderFlags flags = 0)
        public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed = 1.0F, float v_min = 0.0F, float v_max = 0.0F, string format = "%.3f", string format_max = default, ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            fixed (float* __v_current_min1 = &v_current_min)
            {
                var __arg1 = __v_current_min1;
                fixed (float* __v_current_max2 = &v_current_max)
                {
                    var __arg2 = __v_current_max2;
                    var ___ret = Environment.Is64BitProcess ? __Internal64.DragFloatRange2(label, __arg1, __arg2, v_speed, v_min, v_max, format, format_max, flags) : __Internal32.DragFloatRange2(label, __arg1, __arg2, v_speed, v_min, v_max, format, format_max, flags);
                    return ___ret;
                }
            }
        }

        /// <summary>If v_min &gt;= v_max we have no bound.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L562"/></summary>
        // DEBUG: bool          DragInt(const char* label, int* v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0)
        public static bool DragInt(string label, ref int v, float v_speed = 1.0F, int v_min = (int)(0), int v_max = (int)(0), string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            fixed (int* __v1 = &v)
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.DragInt(label, __arg1, v_speed, v_min, v_max, format, flags) : __Internal32.DragInt(label, __arg1, v_speed, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L563"/></summary>
        // DEBUG: bool          DragInt2(const char* label, int v[2], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0)
        public static bool DragInt2(string label, Span<int> v, float v_speed = 1.0F, int v_min = (int)(0), int v_max = (int)(0), string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            if (v == null || v.Length != 2)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (int* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.DragInt2(label, __arg1, v_speed, v_min, v_max, format, flags) : __Internal32.DragInt2(label, __arg1, v_speed, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L564"/></summary>
        // DEBUG: bool          DragInt3(const char* label, int v[3], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0)
        public static bool DragInt3(string label, Span<int> v, float v_speed = 1.0F, int v_min = (int)(0), int v_max = (int)(0), string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            if (v == null || v.Length != 3)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (int* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.DragInt3(label, __arg1, v_speed, v_min, v_max, format, flags) : __Internal32.DragInt3(label, __arg1, v_speed, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L565"/></summary>
        // DEBUG: bool          DragInt4(const char* label, int v[4], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0)
        public static bool DragInt4(string label, Span<int> v, float v_speed = 1.0F, int v_min = (int)(0), int v_max = (int)(0), string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            if (v == null || v.Length != 4)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (int* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.DragInt4(label, __arg1, v_speed, v_min, v_max, format, flags) : __Internal32.DragInt4(label, __arg1, v_speed, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L566"/></summary>
        // DEBUG: bool          DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", const char* format_max = NULL, ImGuiSliderFlags flags = 0)
        public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed = 1.0F, int v_min = (int)(0), int v_max = (int)(0), string format = "%d", string format_max = default, ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            fixed (int* __v_current_min1 = &v_current_min)
            {
                var __arg1 = __v_current_min1;
                fixed (int* __v_current_max2 = &v_current_max)
                {
                    var __arg2 = __v_current_max2;
                    var ___ret = Environment.Is64BitProcess ? __Internal64.DragIntRange2(label, __arg1, __arg2, v_speed, v_min, v_max, format, format_max, flags) : __Internal32.DragIntRange2(label, __arg1, __arg2, v_speed, v_min, v_max, format, format_max, flags);
                    return ___ret;
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L567"/></summary>
        // DEBUG: bool          DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed = 1.0f, const void* p_min = NULL, const void* p_max = NULL, const char* format = NULL, ImGuiSliderFlags flags = 0)
        public static bool DragScalar(string label, ImGuiDataType data_type, IntPtr p_data, float v_speed = 1.0F, IntPtr p_min = default, IntPtr p_max = default, string format = default, ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.DragScalar(label, data_type, p_data, v_speed, p_min, p_max, format, flags) : __Internal32.DragScalar(label, data_type, p_data, v_speed, p_min, p_max, format, flags);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L568"/></summary>
        // DEBUG: bool          DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed = 1.0f, const void* p_min = NULL, const void* p_max = NULL, const char* format = NULL, ImGuiSliderFlags flags = 0)
        public static bool DragScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, float v_speed = 1.0F, IntPtr p_min = default, IntPtr p_max = default, string format = default, ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.DragScalarN(label, data_type, p_data, components, v_speed, p_min, p_max, format, flags) : __Internal32.DragScalarN(label, data_type, p_data, components, v_speed, p_min, p_max, format, flags);
            return ___ret;
        }

        /// <summary>Adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L576"/></summary>
        // DEBUG: bool          SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
        public static bool SliderFloat(string label, ref float v, float v_min, float v_max, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            fixed (float* __v1 = &v)
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.SliderFloat(label, __arg1, v_min, v_max, format, flags) : __Internal32.SliderFloat(label, __arg1, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L577"/></summary>
        // DEBUG: bool          SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
        public static bool SliderFloat2(string label, Span<float> v, float v_min, float v_max, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            if (v == null || v.Length != 2)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (float* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.SliderFloat2(label, __arg1, v_min, v_max, format, flags) : __Internal32.SliderFloat2(label, __arg1, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L578"/></summary>
        // DEBUG: bool          SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
        public static bool SliderFloat3(string label, Span<float> v, float v_min, float v_max, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            if (v == null || v.Length != 3)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (float* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.SliderFloat3(label, __arg1, v_min, v_max, format, flags) : __Internal32.SliderFloat3(label, __arg1, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L579"/></summary>
        // DEBUG: bool          SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
        public static bool SliderFloat4(string label, Span<float> v, float v_min, float v_max, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            if (v == null || v.Length != 4)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (float* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.SliderFloat4(label, __arg1, v_min, v_max, format, flags) : __Internal32.SliderFloat4(label, __arg1, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L580"/></summary>
        // DEBUG: bool          SliderAngle(const char* label, float* v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, const char* format = "%.0f deg", ImGuiSliderFlags flags = 0)
        public static bool SliderAngle(string label, ref float v_rad, float v_degrees_min = -360.0F, float v_degrees_max = +360.0F, string format = "%.0f deg", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            fixed (float* __v_rad1 = &v_rad)
            {
                var __arg1 = __v_rad1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.SliderAngle(label, __arg1, v_degrees_min, v_degrees_max, format, flags) : __Internal32.SliderAngle(label, __arg1, v_degrees_min, v_degrees_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L581"/></summary>
        // DEBUG: bool          SliderInt(const char* label, int* v, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0)
        public static bool SliderInt(string label, ref int v, int v_min, int v_max, string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            fixed (int* __v1 = &v)
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.SliderInt(label, __arg1, v_min, v_max, format, flags) : __Internal32.SliderInt(label, __arg1, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L582"/></summary>
        // DEBUG: bool          SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0)
        public static bool SliderInt2(string label, Span<int> v, int v_min, int v_max, string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            if (v == null || v.Length != 2)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (int* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.SliderInt2(label, __arg1, v_min, v_max, format, flags) : __Internal32.SliderInt2(label, __arg1, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L583"/></summary>
        // DEBUG: bool          SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0)
        public static bool SliderInt3(string label, Span<int> v, int v_min, int v_max, string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            if (v == null || v.Length != 3)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (int* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.SliderInt3(label, __arg1, v_min, v_max, format, flags) : __Internal32.SliderInt3(label, __arg1, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L584"/></summary>
        // DEBUG: bool          SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0)
        public static bool SliderInt4(string label, Span<int> v, int v_min, int v_max, string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            if (v == null || v.Length != 4)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (int* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.SliderInt4(label, __arg1, v_min, v_max, format, flags) : __Internal32.SliderInt4(label, __arg1, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L585"/></summary>
        // DEBUG: bool          SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0)
        public static bool SliderScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, string format = default, ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.SliderScalar(label, data_type, p_data, p_min, p_max, format, flags) : __Internal32.SliderScalar(label, data_type, p_data, p_min, p_max, format, flags);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L586"/></summary>
        // DEBUG: bool          SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0)
        public static bool SliderScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_min, IntPtr p_max, string format = default, ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.SliderScalarN(label, data_type, p_data, components, p_min, p_max, format, flags) : __Internal32.SliderScalarN(label, data_type, p_data, components, p_min, p_max, format, flags);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L587"/></summary>
        // DEBUG: bool          VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0)
        public static bool VSliderFloat(string label, Vector2 size, ref float v, float v_min, float v_max, string format = "%.3f", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (float* __v2 = &v)
            {
                var __arg2 = __v2;
                var ___ret = Environment.Is64BitProcess ? __Internal64.VSliderFloat(label, __arg1, __arg2, v_min, v_max, format, flags) : __Internal32.VSliderFloat(label, __arg1, __arg2, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L588"/></summary>
        // DEBUG: bool          VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0)
        public static bool VSliderInt(string label, Vector2 size, ref int v, int v_min, int v_max, string format = "%d", ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            fixed (int* __v2 = &v)
            {
                var __arg2 = __v2;
                var ___ret = Environment.Is64BitProcess ? __Internal64.VSliderInt(label, __arg1, __arg2, v_min, v_max, format, flags) : __Internal32.VSliderInt(label, __arg1, __arg2, v_min, v_max, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L589"/></summary>
        // DEBUG: bool          VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0)
        public static bool VSliderScalar(string label, Vector2 size, ImGuiDataType data_type, IntPtr p_data, IntPtr p_min, IntPtr p_max, string format = default, ImGuiSliderFlags flags = (ImGuiSliderFlags)(0))
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.VSliderScalar(label, __arg1, data_type, p_data, p_min, p_max, format, flags) : __Internal32.VSliderScalar(label, __arg1, data_type, p_data, p_min, p_max, format, flags);
            return ___ret;
        }

        /// <summary>Widgets: Input with Keyboard.<br/>- If you want to use InputText() with std::string or any custom dynamic string type, see misc/cpp/imgui_stdlib.h and comments in imgui_demo.cpp.<br/>- Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L594"/></summary>
        // DEBUG: bool          InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL)
        public static bool InputText(string label, char* buf, UIntPtr buf_size, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)(0), ImGuiInputTextCallback callback = null, IntPtr user_data = default)
        {
            var __arg1 = (sbyte*)buf;
            var __arg2 = buf_size
            /* DEBUG: TypeMapSizeT.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg4 = callback == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            var ___ret = Environment.Is64BitProcess ? __Internal64.InputText(label, __arg1, __arg2, flags, __arg4, user_data) : __Internal32.InputText(label, __arg1, __arg2, flags, __arg4, user_data);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L595"/></summary>
        // DEBUG: bool          InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size = ImVec2(0, 0), ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL)
        public static bool InputTextMultiline(string label, char* buf, UIntPtr buf_size, Vector2 size, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)(0), ImGuiInputTextCallback callback = null, IntPtr user_data = default)
        {
            var __arg1 = (sbyte*)buf;
            var __arg2 = buf_size
            /* DEBUG: TypeMapSizeT.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg3 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg5 = callback == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            var ___ret = Environment.Is64BitProcess ? __Internal64.InputTextMultiline(label, __arg1, __arg2, __arg3, flags, __arg5, user_data) : __Internal32.InputTextMultiline(label, __arg1, __arg2, __arg3, flags, __arg5, user_data);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L596"/></summary>
        // DEBUG: bool          InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL)
        public static bool InputTextWithHint(string label, string hint, char* buf, UIntPtr buf_size, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)(0), ImGuiInputTextCallback callback = null, IntPtr user_data = default)
        {
            var __arg2 = (sbyte*)buf;
            var __arg3 = buf_size
            /* DEBUG: TypeMapSizeT.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg5 = callback == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            var ___ret = Environment.Is64BitProcess ? __Internal64.InputTextWithHint(label, hint, __arg2, __arg3, flags, __arg5, user_data) : __Internal32.InputTextWithHint(label, hint, __arg2, __arg3, flags, __arg5, user_data);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L597"/></summary>
        // DEBUG: bool          InputFloat(const char* label, float* v, float step = 0.0f, float step_fast = 0.0f, const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
        public static bool InputFloat(string label, ref float v, float step = 0.0F, float step_fast = 0.0F, string format = "%.3f", ImGuiInputTextFlags flags = (ImGuiInputTextFlags)(0))
        {
            fixed (float* __v1 = &v)
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.InputFloat(label, __arg1, step, step_fast, format, flags) : __Internal32.InputFloat(label, __arg1, step, step_fast, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L598"/></summary>
        // DEBUG: bool          InputFloat2(const char* label, float v[2], const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
        public static bool InputFloat2(string label, Span<float> v, string format = "%.3f", ImGuiInputTextFlags flags = (ImGuiInputTextFlags)(0))
        {
            if (v == null || v.Length != 2)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (float* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.InputFloat2(label, __arg1, format, flags) : __Internal32.InputFloat2(label, __arg1, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L599"/></summary>
        // DEBUG: bool          InputFloat3(const char* label, float v[3], const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
        public static bool InputFloat3(string label, Span<float> v, string format = "%.3f", ImGuiInputTextFlags flags = (ImGuiInputTextFlags)(0))
        {
            if (v == null || v.Length != 3)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (float* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.InputFloat3(label, __arg1, format, flags) : __Internal32.InputFloat3(label, __arg1, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L600"/></summary>
        // DEBUG: bool          InputFloat4(const char* label, float v[4], const char* format = "%.3f", ImGuiInputTextFlags flags = 0)
        public static bool InputFloat4(string label, Span<float> v, string format = "%.3f", ImGuiInputTextFlags flags = (ImGuiInputTextFlags)(0))
        {
            if (v == null || v.Length != 4)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (float* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.InputFloat4(label, __arg1, format, flags) : __Internal32.InputFloat4(label, __arg1, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L601"/></summary>
        // DEBUG: bool          InputInt(const char* label, int* v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0)
        public static bool InputInt(string label, ref int v, int step = (int)(1), int step_fast = (int)(100), ImGuiInputTextFlags flags = (ImGuiInputTextFlags)(0))
        {
            fixed (int* __v1 = &v)
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.InputInt(label, __arg1, step, step_fast, flags) : __Internal32.InputInt(label, __arg1, step, step_fast, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L602"/></summary>
        // DEBUG: bool          InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags = 0)
        public static bool InputInt2(string label, Span<int> v, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)(0))
        {
            if (v == null || v.Length != 2)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (int* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.InputInt2(label, __arg1, flags) : __Internal32.InputInt2(label, __arg1, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L603"/></summary>
        // DEBUG: bool          InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags = 0)
        public static bool InputInt3(string label, Span<int> v, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)(0))
        {
            if (v == null || v.Length != 3)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (int* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.InputInt3(label, __arg1, flags) : __Internal32.InputInt3(label, __arg1, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L604"/></summary>
        // DEBUG: bool          InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags = 0)
        public static bool InputInt4(string label, Span<int> v, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)(0))
        {
            if (v == null || v.Length != 4)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            fixed (int* __v1 = &MemoryMarshal.GetReference(v))
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.InputInt4(label, __arg1, flags) : __Internal32.InputInt4(label, __arg1, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L605"/></summary>
        // DEBUG: bool          InputDouble(const char* label, double* v, double step = 0.0, double step_fast = 0.0, const char* format = "%.6f", ImGuiInputTextFlags flags = 0)
        public static bool InputDouble(string label, ref double v, double step = 0.0, double step_fast = 0.0, string format = "%.6f", ImGuiInputTextFlags flags = (ImGuiInputTextFlags)(0))
        {
            fixed (double* __v1 = &v)
            {
                var __arg1 = __v1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.InputDouble(label, __arg1, step, step_fast, format, flags) : __Internal32.InputDouble(label, __arg1, step, step_fast, format, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L606"/></summary>
        // DEBUG: bool          InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0)
        public static bool InputScalar(string label, ImGuiDataType data_type, IntPtr p_data, IntPtr p_step = default, IntPtr p_step_fast = default, string format = default, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.InputScalar(label, data_type, p_data, p_step, p_step_fast, format, flags) : __Internal32.InputScalar(label, data_type, p_data, p_step, p_step_fast, format, flags);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L607"/></summary>
        // DEBUG: bool          InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0)
        public static bool InputScalarN(string label, ImGuiDataType data_type, IntPtr p_data, int components, IntPtr p_step = default, IntPtr p_step_fast = default, string format = default, ImGuiInputTextFlags flags = (ImGuiInputTextFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.InputScalarN(label, data_type, p_data, components, p_step, p_step_fast, format, flags) : __Internal32.InputScalarN(label, data_type, p_data, components, p_step, p_step_fast, format, flags);
            return ___ret;
        }

        /// <summary>Widgets: Color Editor/Picker (tip: the ColorEdit* functions have a little color square that can be left-clicked to open a picker, and right-clicked to open an option menu.).<br/>- Note that in C++ a 'float v[X]' function argument is the _same_ as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible.<br/>- You can pass the address of a first float element out of a contiguous structure, e.g. &amp;myvector.x.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L612"/></summary>
        // DEBUG: bool          ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags = 0)
        public static bool ColorEdit3(string label, Span<float> col, ImGuiColorEditFlags flags = (ImGuiColorEditFlags)(0))
        {
            if (col == null || col.Length != 3)
                throw new ArgumentOutOfRangeException("col", "The dimensions of the provided array don't match the required size.");
            fixed (float* __col1 = &MemoryMarshal.GetReference(col))
            {
                var __arg1 = __col1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.ColorEdit3(label, __arg1, flags) : __Internal32.ColorEdit3(label, __arg1, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L613"/></summary>
        // DEBUG: bool          ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags = 0)
        public static bool ColorEdit4(string label, Span<float> col, ImGuiColorEditFlags flags = (ImGuiColorEditFlags)(0))
        {
            if (col == null || col.Length != 4)
                throw new ArgumentOutOfRangeException("col", "The dimensions of the provided array don't match the required size.");
            fixed (float* __col1 = &MemoryMarshal.GetReference(col))
            {
                var __arg1 = __col1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.ColorEdit4(label, __arg1, flags) : __Internal32.ColorEdit4(label, __arg1, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L614"/></summary>
        // DEBUG: bool          ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags = 0)
        public static bool ColorPicker3(string label, Span<float> col, ImGuiColorEditFlags flags = (ImGuiColorEditFlags)(0))
        {
            if (col == null || col.Length != 3)
                throw new ArgumentOutOfRangeException("col", "The dimensions of the provided array don't match the required size.");
            fixed (float* __col1 = &MemoryMarshal.GetReference(col))
            {
                var __arg1 = __col1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.ColorPicker3(label, __arg1, flags) : __Internal32.ColorPicker3(label, __arg1, flags);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L615"/></summary>
        // DEBUG: bool          ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags = 0, const float* ref_col = NULL)
        public static bool ColorPicker4(string label, Span<float> col, ImGuiColorEditFlags flags, ref float ref_col)
        {
            if (col == null || col.Length != 4)
                throw new ArgumentOutOfRangeException("col", "The dimensions of the provided array don't match the required size.");
            fixed (float* __col1 = &MemoryMarshal.GetReference(col))
            {
                var __arg1 = __col1;
                fixed (float* __ref_col3 = &ref_col)
                {
                    var __arg3 = __ref_col3;
                    var ___ret = Environment.Is64BitProcess ? __Internal64.ColorPicker4(label, __arg1, flags, __arg3) : __Internal32.ColorPicker4(label, __arg1, flags, __arg3);
                    return ___ret;
                }
            }
        }

        /// <summary>Display a color square/button, hover for details, return true when pressed.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L616"/></summary>
        // DEBUG: bool          ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags = 0, const ImVec2& size = ImVec2(0, 0))
        public static bool ColorButton(string desc_id, Vector4 col, ImGuiColorEditFlags flags, Vector2 size)
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref col))
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg3 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.ColorButton(desc_id, __arg1, flags, __arg3) : __Internal32.ColorButton(desc_id, __arg1, flags, __arg3);
            return ___ret;
        }

        /// <summary>Initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L617"/></summary>
        // DEBUG: void          SetColorEditOptions(ImGuiColorEditFlags flags)
        public static void SetColorEditOptions(ImGuiColorEditFlags flags)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetColorEditOptions(flags);
            }
            else
            {
                __Internal32.SetColorEditOptions(flags);
            }
        }

        /// <summary>Widgets: Trees.<br/>- TreeNode functions return true when the node is open, in which case you need to also call TreePop() when you are finished displaying the tree node contents.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L621"/></summary>
        // DEBUG: bool          TreeNode(const char* label)
        public static bool TreeNode(string label)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TreeNode(label) : __Internal32.TreeNode(label);
            return ___ret;
        }

        /// <summary>Helper variation to easily decorelate the id from the displayed string. Read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L622"/></summary>
        // DEBUG: bool          TreeNode(const char* str_id, const char* fmt, ...) IM_FMTARGS(2)
        public static bool TreeNode(string str_id, string fmt)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TreeNode(str_id, fmt) : __Internal32.TreeNode(str_id, fmt);
            return ___ret;
        }

        /// <summary>".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L623"/></summary>
        // DEBUG: bool          TreeNode(const void* ptr_id, const char* fmt, ...) IM_FMTARGS(2)
        public static bool TreeNode(IntPtr ptr_id, string fmt)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TreeNode(ptr_id, fmt) : __Internal32.TreeNode(ptr_id, fmt);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L624"/></summary>
        // DEBUG: bool          TreeNodeV(const char* str_id, const char* fmt, va_list args) IM_FMTLIST(2)
        public static bool TreeNodeV(string str_id, string fmt, Object args)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TreeNodeV(str_id, fmt, args) : __Internal32.TreeNodeV(str_id, fmt, args);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L625"/></summary>
        // DEBUG: bool          TreeNodeV(const void* ptr_id, const char* fmt, va_list args) IM_FMTLIST(2)
        public static bool TreeNodeV(IntPtr ptr_id, string fmt, Object args)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TreeNodeV(ptr_id, fmt, args) : __Internal32.TreeNodeV(ptr_id, fmt, args);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L626"/></summary>
        // DEBUG: bool          TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags = 0)
        public static bool TreeNodeEx(string label, ImGuiTreeNodeFlags flags = (ImGuiTreeNodeFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TreeNodeEx(label, flags) : __Internal32.TreeNodeEx(label, flags);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L627"/></summary>
        // DEBUG: bool          TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_FMTARGS(3)
        public static bool TreeNodeEx(string str_id, ImGuiTreeNodeFlags flags, string fmt)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TreeNodeEx(str_id, flags, fmt) : __Internal32.TreeNodeEx(str_id, flags, fmt);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L628"/></summary>
        // DEBUG: bool          TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_FMTARGS(3)
        public static bool TreeNodeEx(IntPtr ptr_id, ImGuiTreeNodeFlags flags, string fmt)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TreeNodeEx(ptr_id, flags, fmt) : __Internal32.TreeNodeEx(ptr_id, flags, fmt);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L629"/></summary>
        // DEBUG: bool          TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) IM_FMTLIST(3)
        public static bool TreeNodeExV(string str_id, ImGuiTreeNodeFlags flags, string fmt, Object args)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TreeNodeExV(str_id, flags, fmt, args) : __Internal32.TreeNodeExV(str_id, flags, fmt, args);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L630"/></summary>
        // DEBUG: bool          TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) IM_FMTLIST(3)
        public static bool TreeNodeExV(IntPtr ptr_id, ImGuiTreeNodeFlags flags, string fmt, Object args)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TreeNodeExV(ptr_id, flags, fmt, args) : __Internal32.TreeNodeExV(ptr_id, flags, fmt, args);
            return ___ret;
        }

        /// <summary>~ Indent()+PushId(). Already called by TreeNode() when returning true, but you can call TreePush/TreePop yourself if desired.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L631"/></summary>
        // DEBUG: void          TreePush(const char* str_id)
        public static void TreePush(string str_id)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TreePush(str_id);
            }
            else
            {
                __Internal32.TreePush(str_id);
            }
        }

        /// <summary>".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L632"/></summary>
        // DEBUG: void          TreePush(const void* ptr_id)
        public static void TreePush(IntPtr ptr_id)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TreePush(ptr_id);
            }
            else
            {
                __Internal32.TreePush(ptr_id);
            }
        }

        /// <summary>~ Unindent()+PopId().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L633"/></summary>
        // DEBUG: void          TreePop()
        public static void TreePop()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TreePop();
            }
            else
            {
                __Internal32.TreePop();
            }
        }

        /// <summary>Horizontal distance preceding label when using TreeNode*() or Bullet() == (g.FontSize + style.FramePadding.x*2) for a regular unframed TreeNode.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L634"/></summary>
        // DEBUG: float         GetTreeNodeToLabelSpacing()
        public static float GetTreeNodeToLabelSpacing()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetTreeNodeToLabelSpacing() : __Internal32.GetTreeNodeToLabelSpacing();
            return ___ret;
        }

        /// <summary>If returning 'true' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L635"/></summary>
        // DEBUG: bool          CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags = 0)
        public static bool CollapsingHeader(string label, ImGuiTreeNodeFlags flags = (ImGuiTreeNodeFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.CollapsingHeader(label, flags) : __Internal32.CollapsingHeader(label, flags);
            return ___ret;
        }

        /// <summary>When 'p_visible != NULL': if '*p_visible==true' display an additional small close button on upper right of the header which will set the bool to false when clicked, if '*p_visible==false' don't display the header.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L636"/></summary>
        // DEBUG: bool          CollapsingHeader(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags = 0)
        public static bool CollapsingHeader(string label, ref bool p_visible, ImGuiTreeNodeFlags flags = (ImGuiTreeNodeFlags)(0))
        {
            fixed (bool* __p_visible1 = &p_visible)
            {
                var __arg1 = __p_visible1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.CollapsingHeader(label, __arg1, flags) : __Internal32.CollapsingHeader(label, __arg1, flags);
                return ___ret;
            }
        }

        /// <summary>Set next TreeNode/CollapsingHeader open state.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L637"/></summary>
        // DEBUG: void          SetNextItemOpen(bool is_open, ImGuiCond cond = 0)
        public static void SetNextItemOpen(bool is_open, ImGuiCond cond = (ImGuiCond)(0))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextItemOpen(is_open, cond);
            }
            else
            {
                __Internal32.SetNextItemOpen(is_open, cond);
            }
        }

        /// <summary>"bool selected" carry the selection state (read-only). Selectable() is clicked is returns true so you can modify your selection state. size.x==0.0: use remaining width, size.x&gt;0.0: specify width. size.y==0.0: use label height, size.y&gt;0.0: specify height.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L642"/></summary>
        // DEBUG: bool          Selectable(const char* label, bool selected = false, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0, 0))
        public static bool Selectable(string label, bool selected, ImGuiSelectableFlags flags, Vector2 size)
        {
            var __arg3 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.Selectable(label, selected, flags, __arg3) : __Internal32.Selectable(label, selected, flags, __arg3);
            return ___ret;
        }

        /// <summary>"bool* p_selected" point to the selection state (read-write), as a convenient helper.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L643"/></summary>
        // DEBUG: bool          Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0, 0))
        public static bool Selectable(string label, ref bool p_selected, ImGuiSelectableFlags flags, Vector2 size)
        {
            fixed (bool* __p_selected1 = &p_selected)
            {
                var __arg1 = __p_selected1;
                var __arg3 = new IntPtr(Unsafe.AsPointer(ref size))
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
                ;
                var ___ret = Environment.Is64BitProcess ? __Internal64.Selectable_1(label, __arg1, flags, __arg3) : __Internal32.Selectable_1(label, __arg1, flags, __arg3);
                return ___ret;
            }
        }

        /// <summary>Open a framed scrolling region.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L651"/></summary>
        // DEBUG: bool          BeginListBox(const char* label, const ImVec2& size = ImVec2(0, 0))
        public static bool BeginListBox(string label, Vector2 size)
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginListBox(label, __arg1) : __Internal32.BeginListBox(label, __arg1);
            return ___ret;
        }

        /// <summary>Only call EndListBox() if BeginListBox() returned true!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L652"/></summary>
        // DEBUG: void          EndListBox()
        public static void EndListBox()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndListBox();
            }
            else
            {
                __Internal32.EndListBox();
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L653"/></summary>
        // DEBUG: bool          ListBox(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items = -1)
        public static bool ListBox(string label, ref int current_item, string[] items, int items_count, int height_in_items = (int)(-1))
        {
            fixed (int* __current_item1 = &current_item)
            {
                var __arg1 = __current_item1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.ListBox(label, __arg1, items, items_count, height_in_items) : __Internal32.ListBox(label, __arg1, items, items_count, height_in_items);
                return ___ret;
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L654"/></summary>
        // DEBUG: bool          ListBox(const char* label, int* current_item, const char* (*getter)(void* user_data, int idx), void* user_data, int items_count, int height_in_items = -1)
        public static bool ListBox(string label, ref int current_item, Func_IntPtr_IntPtr_int getter, IntPtr user_data, int items_count, int height_in_items = (int)(-1))
        {
            fixed (int* __current_item1 = &current_item)
            {
                var __arg1 = __current_item1;
                var __arg2 = getter == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(getter);
                var ___ret = Environment.Is64BitProcess ? __Internal64.ListBox(label, __arg1, __arg2, user_data, items_count, height_in_items) : __Internal32.ListBox(label, __arg1, __arg2, user_data, items_count, height_in_items);
                return ___ret;
            }
        }

        /// <summary>Widgets: Data Plotting.<br/>- Consider using ImPlot (https://github.com/epezent/implot) which is much better!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L658"/></summary>
        // DEBUG: void          PlotLines(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float))
        public static void PlotLines(string label, ref float values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, Vector2 graph_size, int stride = sizeof(float))
        {
            fixed (float* __values1 = &values)
            {
                var __arg1 = __values1;
                var __arg7 = graph_size
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 5 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
                ;
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PlotLines(label, __arg1, values_count, values_offset, overlay_text, scale_min, scale_max, __arg7, stride);
                }
                else
                {
                    __Internal32.PlotLines(label, __arg1, values_count, values_offset, overlay_text, scale_min, scale_max, __arg7, stride);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L659"/></summary>
        // DEBUG: void          PlotLines(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0))
        public static void PlotLines(string label, ImValuesGetterHandler values_getter, IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, Vector2 graph_size)
        {
            var __arg1 = values_getter == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(values_getter);
            var __arg8 = graph_size
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 5 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.PlotLines(label, __arg1, data, values_count, values_offset, overlay_text, scale_min, scale_max, __arg8);
            }
            else
            {
                __Internal32.PlotLines(label, __arg1, data, values_count, values_offset, overlay_text, scale_min, scale_max, __arg8);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L660"/></summary>
        // DEBUG: void          PlotHistogram(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float))
        public static void PlotHistogram(string label, ref float values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, Vector2 graph_size, int stride = sizeof(float))
        {
            fixed (float* __values1 = &values)
            {
                var __arg1 = __values1;
                var __arg7 = graph_size
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 5 */
                /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
                ;
                if (Environment.Is64BitProcess)
                {
                    __Internal64.PlotHistogram(label, __arg1, values_count, values_offset, overlay_text, scale_min, scale_max, __arg7, stride);
                }
                else
                {
                    __Internal32.PlotHistogram(label, __arg1, values_count, values_offset, overlay_text, scale_min, scale_max, __arg7, stride);
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L661"/></summary>
        // DEBUG: void          PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0))
        public static void PlotHistogram(string label, ImValuesGetterHandler values_getter, IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, Vector2 graph_size)
        {
            var __arg1 = values_getter == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(values_getter);
            var __arg8 = graph_size
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 5 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.PlotHistogram(label, __arg1, data, values_count, values_offset, overlay_text, scale_min, scale_max, __arg8);
            }
            else
            {
                __Internal32.PlotHistogram(label, __arg1, data, values_count, values_offset, overlay_text, scale_min, scale_max, __arg8);
            }
        }

        /// <summary>Widgets: Value() Helpers.<br/>- Those are merely shortcut to calling Text() with a format string. Output single value in "name: value" format (tip: freely declare more in your code to handle your types. you can add functions to the ImGui namespace).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L665"/></summary>
        // DEBUG: void          Value(const char* prefix, bool b)
        public static void Value(string prefix, bool b)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Value(prefix, b);
            }
            else
            {
                __Internal32.Value(prefix, b);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L666"/></summary>
        // DEBUG: void          Value(const char* prefix, int v)
        public static void Value(string prefix, int v)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Value_1(prefix, v);
            }
            else
            {
                __Internal32.Value_1(prefix, v);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L667"/></summary>
        // DEBUG: void          Value(const char* prefix, unsigned int v)
        public static void Value(string prefix, uint v)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Value_2(prefix, v);
            }
            else
            {
                __Internal32.Value_2(prefix, v);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L668"/></summary>
        // DEBUG: void          Value(const char* prefix, float v, const char* float_format = NULL)
        public static void Value(string prefix, float v, string float_format = default)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Value(prefix, v, float_format);
            }
            else
            {
                __Internal32.Value(prefix, v, float_format);
            }
        }

        /// <summary>Append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L675"/></summary>
        // DEBUG: bool          BeginMenuBar()
        public static bool BeginMenuBar()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginMenuBar() : __Internal32.BeginMenuBar();
            return ___ret;
        }

        /// <summary>Only call EndMenuBar() if BeginMenuBar() returns true!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L676"/></summary>
        // DEBUG: void          EndMenuBar()
        public static void EndMenuBar()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndMenuBar();
            }
            else
            {
                __Internal32.EndMenuBar();
            }
        }

        /// <summary>Create and append to a full screen menu-bar.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L677"/></summary>
        // DEBUG: bool          BeginMainMenuBar()
        public static bool BeginMainMenuBar()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginMainMenuBar() : __Internal32.BeginMainMenuBar();
            return ___ret;
        }

        /// <summary>Only call EndMainMenuBar() if BeginMainMenuBar() returns true!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L678"/></summary>
        // DEBUG: void          EndMainMenuBar()
        public static void EndMainMenuBar()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndMainMenuBar();
            }
            else
            {
                __Internal32.EndMainMenuBar();
            }
        }

        /// <summary>Create a sub-menu entry. only call EndMenu() if this returns true!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L679"/></summary>
        // DEBUG: bool          BeginMenu(const char* label, bool enabled = true)
        public static bool BeginMenu(string label, bool enabled = true)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginMenu(label, enabled) : __Internal32.BeginMenu(label, enabled);
            return ___ret;
        }

        /// <summary>Only call EndMenu() if BeginMenu() returns true!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L680"/></summary>
        // DEBUG: void          EndMenu()
        public static void EndMenu()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndMenu();
            }
            else
            {
                __Internal32.EndMenu();
            }
        }

        /// <summary>Return true when activated.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L681"/></summary>
        // DEBUG: bool          MenuItem(const char* label, const char* shortcut = NULL, bool selected = false, bool enabled = true)
        public static bool MenuItem(string label, string shortcut = default, bool selected = false, bool enabled = true)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.MenuItem(label, shortcut, selected, enabled) : __Internal32.MenuItem(label, shortcut, selected, enabled);
            return ___ret;
        }

        /// <summary>Return true when activated + toggle (*p_selected) if p_selected != NULL.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L682"/></summary>
        // DEBUG: bool          MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled = true)
        public static bool MenuItem(string label, string shortcut, ref bool p_selected, bool enabled = true)
        {
            fixed (bool* __p_selected2 = &p_selected)
            {
                var __arg2 = __p_selected2;
                var ___ret = Environment.Is64BitProcess ? __Internal64.MenuItem_1(label, shortcut, __arg2, enabled) : __Internal32.MenuItem_1(label, shortcut, __arg2, enabled);
                return ___ret;
            }
        }

        /// <summary>Begin/append a tooltip window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L687"/></summary>
        // DEBUG: bool          BeginTooltip()
        public static bool BeginTooltip()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginTooltip() : __Internal32.BeginTooltip();
            return ___ret;
        }

        /// <summary>Only call EndTooltip() if BeginTooltip()/BeginItemTooltip() returns true!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L688"/></summary>
        // DEBUG: void          EndTooltip()
        public static void EndTooltip()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndTooltip();
            }
            else
            {
                __Internal32.EndTooltip();
            }
        }

        /// <summary>Set a text-only tooltip. Often used after a ImGui::IsItemHovered() check. Override any previous call to SetTooltip().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L689"/></summary>
        // DEBUG: void          SetTooltip(const char* fmt, ...) IM_FMTARGS(1)
        public static void SetTooltip(string fmt)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetTooltip(fmt);
            }
            else
            {
                __Internal32.SetTooltip(fmt);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L690"/></summary>
        // DEBUG: void          SetTooltipV(const char* fmt, va_list args) IM_FMTLIST(1)
        public static void SetTooltipV(string fmt, Object args)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetTooltipV(fmt, args);
            }
            else
            {
                __Internal32.SetTooltipV(fmt, args);
            }
        }

        /// <summary>Begin/append a tooltip window if preceding item was hovered.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L696"/></summary>
        // DEBUG: bool          BeginItemTooltip()
        public static bool BeginItemTooltip()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginItemTooltip() : __Internal32.BeginItemTooltip();
            return ___ret;
        }

        /// <summary>Set a text-only tooltip if preceeding item was hovered. override any previous call to SetTooltip().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L697"/></summary>
        // DEBUG: void          SetItemTooltip(const char* fmt, ...) IM_FMTARGS(1)
        public static void SetItemTooltip(string fmt)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetItemTooltip(fmt);
            }
            else
            {
                __Internal32.SetItemTooltip(fmt);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L698"/></summary>
        // DEBUG: void          SetItemTooltipV(const char* fmt, va_list args) IM_FMTLIST(1)
        public static void SetItemTooltipV(string fmt, Object args)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetItemTooltipV(fmt, args);
            }
            else
            {
                __Internal32.SetItemTooltipV(fmt, args);
            }
        }

        /// <summary>Return true if the popup is open, and you can start outputting to it.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L712"/></summary>
        // DEBUG: bool          BeginPopup(const char* str_id, ImGuiWindowFlags flags = 0)
        public static bool BeginPopup(string str_id, ImGuiWindowFlags flags = (ImGuiWindowFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginPopup(str_id, flags) : __Internal32.BeginPopup(str_id, flags);
            return ___ret;
        }

        /// <summary>Return true if the modal is open, and you can start outputting to it.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L713"/></summary>
        // DEBUG: bool          BeginPopupModal(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0)
        public static bool BeginPopupModal(string name, ref bool p_open, ImGuiWindowFlags flags = (ImGuiWindowFlags)(0))
        {
            fixed (bool* __p_open1 = &p_open)
            {
                var __arg1 = __p_open1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.BeginPopupModal(name, __arg1, flags) : __Internal32.BeginPopupModal(name, __arg1, flags);
                return ___ret;
            }
        }

        /// <summary>Only call EndPopup() if BeginPopupXXX() returns true!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L714"/></summary>
        // DEBUG: void          EndPopup()
        public static void EndPopup()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndPopup();
            }
            else
            {
                __Internal32.EndPopup();
            }
        }

        /// <summary>Call to mark popup as open (don't call every frame!).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L724"/></summary>
        // DEBUG: void          OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags = 0)
        public static void OpenPopup(string str_id, ImGuiPopupFlags popup_flags = (ImGuiPopupFlags)(0))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.OpenPopup(str_id, popup_flags);
            }
            else
            {
                __Internal32.OpenPopup(str_id, popup_flags);
            }
        }

        /// <summary>Id overload to facilitate calling from nested stacks.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L725"/></summary>
        // DEBUG: void          OpenPopup(ImGuiID id, ImGuiPopupFlags popup_flags = 0)
        public static void OpenPopup(uint id, ImGuiPopupFlags popup_flags = (ImGuiPopupFlags)(0))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.OpenPopup_1(id, popup_flags);
            }
            else
            {
                __Internal32.OpenPopup_1(id, popup_flags);
            }
        }

        /// <summary>Helper to open popup when clicked on last item. Default to ImGuiPopupFlags_MouseButtonRight == 1. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L726"/></summary>
        // DEBUG: void          OpenPopupOnItemClick(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1)
        public static void OpenPopupOnItemClick(string str_id = default, ImGuiPopupFlags popup_flags = (ImGuiPopupFlags)(1))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.OpenPopupOnItemClick(str_id, popup_flags);
            }
            else
            {
                __Internal32.OpenPopupOnItemClick(str_id, popup_flags);
            }
        }

        /// <summary>Manually close the popup we have begin-ed into.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L727"/></summary>
        // DEBUG: void          CloseCurrentPopup()
        public static void CloseCurrentPopup()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.CloseCurrentPopup();
            }
            else
            {
                __Internal32.CloseCurrentPopup();
            }
        }

        /// <summary>Open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L734"/></summary>
        // DEBUG: bool          BeginPopupContextItem(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1)
        public static bool BeginPopupContextItem(string str_id = default, ImGuiPopupFlags popup_flags = (ImGuiPopupFlags)(1))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginPopupContextItem(str_id, popup_flags) : __Internal32.BeginPopupContextItem(str_id, popup_flags);
            return ___ret;
        }

        /// <summary>Open+begin popup when clicked on current window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L735"/></summary>
        // DEBUG: bool          BeginPopupContextWindow(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1)
        public static bool BeginPopupContextWindow(string str_id = default, ImGuiPopupFlags popup_flags = (ImGuiPopupFlags)(1))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginPopupContextWindow(str_id, popup_flags) : __Internal32.BeginPopupContextWindow(str_id, popup_flags);
            return ___ret;
        }

        /// <summary>Open+begin popup when clicked in void (where there are no windows).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L736"/></summary>
        // DEBUG: bool          BeginPopupContextVoid(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1)
        public static bool BeginPopupContextVoid(string str_id = default, ImGuiPopupFlags popup_flags = (ImGuiPopupFlags)(1))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginPopupContextVoid(str_id, popup_flags) : __Internal32.BeginPopupContextVoid(str_id, popup_flags);
            return ___ret;
        }

        /// <summary>Return true if the popup is open.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L742"/></summary>
        // DEBUG: bool          IsPopupOpen(const char* str_id, ImGuiPopupFlags flags = 0)
        public static bool IsPopupOpen(string str_id, ImGuiPopupFlags flags = (ImGuiPopupFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsPopupOpen(str_id, flags) : __Internal32.IsPopupOpen(str_id, flags);
            return ___ret;
        }

        /// <summary>Tables.<br/>- Full-featured replacement for old Columns API.<br/>- See Demo-&gt;Tables for demo code. See top of imgui_tables.cpp for general commentary.<br/>- See ImGuiTableFlags_ and ImGuiTableColumnFlags_ enums for a description of available flags.<br/>The typical call flow is:.<br/>- 1. Call BeginTable(), early out if returning false.<br/>- 2. Optionally call TableSetupColumn() to submit column name/flags/defaults.<br/>- 3. Optionally call TableSetupScrollFreeze() to request scroll freezing of columns/rows.<br/>- 4. Optionally call TableHeadersRow() to submit a header row. Names are pulled from TableSetupColumn() data.<br/>- 5. Populate contents:.<br/>- In most situations you can use TableNextRow() + TableSetColumnIndex(N) to start appending into a column.<br/>- If you are using tables as a sort of grid, where every column is holding the same type of contents,.<br/>You may prefer using TableNextColumn() instead of TableNextRow() + TableSetColumnIndex().<br/>TableNextColumn() will automatically wrap-around into the next row if needed.<br/>- IMPORTANT: Comparatively to the old Columns() API, we need to call TableNextColumn() for the first column!<br/>- Summary of possible call flow:.<br/>--------------------------------------------------------------------------------------------------------.<br/>TableNextRow() -&gt; TableSetColumnIndex(0) -&gt; Text("Hello 0") -&gt; TableSetColumnIndex(1) -&gt; Text("Hello 1"), // OK.<br/>TableNextRow() -&gt; TableNextColumn(), -&gt; Text("Hello 0") -&gt; TableNextColumn(), -&gt; Text("Hello 1"), // OK.<br/>TableNextColumn(), -&gt; Text("Hello 0") -&gt; TableNextColumn(), -&gt; Text("Hello 1"), // OK: TableNextColumn() automatically gets to next row!<br/>TableNextRow(), -&gt; Text("Hello 0"), // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!<br/>--------------------------------------------------------------------------------------------------------.<br/>- 5. Call EndTable().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L767"/></summary>
        // DEBUG: bool          BeginTable(const char* str_id, int column, ImGuiTableFlags flags = 0, const ImVec2& outer_size = ImVec2(0.0f, 0.0f), float inner_width = 0.0f)
        public static bool BeginTable(string str_id, int column, ImGuiTableFlags flags, Vector2 outer_size, float inner_width = 0.0F)
        {
            var __arg3 = new IntPtr(Unsafe.AsPointer(ref outer_size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginTable(str_id, column, flags, __arg3, inner_width) : __Internal32.BeginTable(str_id, column, flags, __arg3, inner_width);
            return ___ret;
        }

        /// <summary>Only call EndTable() if BeginTable() returns true!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L768"/></summary>
        // DEBUG: void          EndTable()
        public static void EndTable()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndTable();
            }
            else
            {
                __Internal32.EndTable();
            }
        }

        /// <summary>Append into the first cell of a new row.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L769"/></summary>
        // DEBUG: void          TableNextRow(ImGuiTableRowFlags row_flags = 0, float min_row_height = 0.0f)
        public static void TableNextRow(ImGuiTableRowFlags row_flags = (ImGuiTableRowFlags)(0), float min_row_height = 0.0F)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TableNextRow(row_flags, min_row_height);
            }
            else
            {
                __Internal32.TableNextRow(row_flags, min_row_height);
            }
        }

        /// <summary>Append into the next column (or first column of next row if currently in last column). Return true when column is visible.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L770"/></summary>
        // DEBUG: bool          TableNextColumn()
        public static bool TableNextColumn()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TableNextColumn() : __Internal32.TableNextColumn();
            return ___ret;
        }

        /// <summary>Append into the specified column. Return true when column is visible.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L771"/></summary>
        // DEBUG: bool          TableSetColumnIndex(int column_n)
        public static bool TableSetColumnIndex(int column_n)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TableSetColumnIndex(column_n) : __Internal32.TableSetColumnIndex(column_n);
            return ___ret;
        }

        /// <summary>Tables: Headers &amp; Columns declaration.<br/>- Use TableSetupColumn() to specify label, resizing policy, default width/weight, id, various other flags etc.<br/>- Use TableHeadersRow() to create a header row and automatically submit a TableHeader() for each column.<br/>Headers are required to perform: reordering, sorting, and opening the context menu.<br/>The context menu can also be made available in columns body using ImGuiTableFlags_ContextMenuInBody.<br/>- You may manually submit headers using TableNextRow() + TableHeader() calls, but this is only useful in.<br/>Some advanced use cases (e.g. adding custom widgets in header row).<br/>- Use TableSetupScrollFreeze() to lock columns/rows so they stay visible when scrolled.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L781"/></summary>
        // DEBUG: void          TableSetupColumn(const char* label, ImGuiTableColumnFlags flags = 0, float init_width_or_weight = 0.0f, ImGuiID user_id = 0)
        public static void TableSetupColumn(string label, ImGuiTableColumnFlags flags = (ImGuiTableColumnFlags)(0), float init_width_or_weight = 0.0F, uint user_id = (uint)(0))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TableSetupColumn(label, flags, init_width_or_weight, user_id);
            }
            else
            {
                __Internal32.TableSetupColumn(label, flags, init_width_or_weight, user_id);
            }
        }

        /// <summary>Lock columns/rows so they stay visible when scrolled.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L782"/></summary>
        // DEBUG: void          TableSetupScrollFreeze(int cols, int rows)
        public static void TableSetupScrollFreeze(int cols, int rows)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TableSetupScrollFreeze(cols, rows);
            }
            else
            {
                __Internal32.TableSetupScrollFreeze(cols, rows);
            }
        }

        /// <summary>Submit one header cell manually (rarely used).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L783"/></summary>
        // DEBUG: void          TableHeader(const char* label)
        public static void TableHeader(string label)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TableHeader(label);
            }
            else
            {
                __Internal32.TableHeader(label);
            }
        }

        /// <summary>Submit a row with headers cells based on data provided to TableSetupColumn() + submit context menu.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L784"/></summary>
        // DEBUG: void          TableHeadersRow()
        public static void TableHeadersRow()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TableHeadersRow();
            }
            else
            {
                __Internal32.TableHeadersRow();
            }
        }

        /// <summary>Submit a row with angled headers for every column with the ImGuiTableColumnFlags_AngledHeader flag. MUST BE FIRST ROW.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L785"/></summary>
        // DEBUG: void          TableAngledHeadersRow()
        public static void TableAngledHeadersRow()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TableAngledHeadersRow();
            }
            else
            {
                __Internal32.TableAngledHeadersRow();
            }
        }

        /// <summary>Get latest sort specs for the table (NULL if not sorting).<br/>Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L793"/></summary>
        // DEBUG: ImGuiTableSortSpecs*  TableGetSortSpecs()
        public static ImGuiTableSortSpecs TableGetSortSpecs()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TableGetSortSpecs() : __Internal32.TableGetSortSpecs();
            var __result0 = ImGuiTableSortSpecs.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Return number of columns (value passed to BeginTable).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L794"/></summary>
        // DEBUG: int                   TableGetColumnCount()
        public static int TableGetColumnCount()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TableGetColumnCount() : __Internal32.TableGetColumnCount();
            return ___ret;
        }

        /// <summary>Return current column index.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L795"/></summary>
        // DEBUG: int                   TableGetColumnIndex()
        public static int TableGetColumnIndex()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TableGetColumnIndex() : __Internal32.TableGetColumnIndex();
            return ___ret;
        }

        /// <summary>Return current row index.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L796"/></summary>
        // DEBUG: int                   TableGetRowIndex()
        public static int TableGetRowIndex()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TableGetRowIndex() : __Internal32.TableGetRowIndex();
            return ___ret;
        }

        /// <summary>Return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L797"/></summary>
        // DEBUG: const char*           TableGetColumnName(int column_n = -1)
        public static string TableGetColumnName(int column_n = (int)(-1))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TableGetColumnName(column_n) : __Internal32.TableGetColumnName(column_n);
            return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ___ret);
        }

        /// <summary>Return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L798"/></summary>
        // DEBUG: ImGuiTableColumnFlags TableGetColumnFlags(int column_n = -1)
        public static ImGuiTableColumnFlags TableGetColumnFlags(int column_n = (int)(-1))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TableGetColumnFlags(column_n) : __Internal32.TableGetColumnFlags(column_n);
            return ___ret;
        }

        /// <summary>Change user accessible enabled/disabled state of a column. Set to false to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L799"/></summary>
        // DEBUG: void                  TableSetColumnEnabled(int column_n, bool v)
        public static void TableSetColumnEnabled(int column_n, bool v)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TableSetColumnEnabled(column_n, v);
            }
            else
            {
                __Internal32.TableSetColumnEnabled(column_n, v);
            }
        }

        /// <summary>Change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L800"/></summary>
        // DEBUG: void                  TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n = -1)
        public static void TableSetBgColor(ImGuiTableBgTarget target, uint color, int column_n = (int)(-1))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.TableSetBgColor(target, color, column_n);
            }
            else
            {
                __Internal32.TableSetBgColor(target, color, column_n);
            }
        }

        /// <summary>Legacy Columns API (prefer using Tables!).<br/>- You can also use SameLine(pos_x) to mimic simplified columns.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L804"/></summary>
        // DEBUG: void          Columns(int count = 1, const char* id = NULL, bool border = true)
        public static void Columns(int count = (int)(1), string id = default, bool border = true)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.Columns(count, id, border);
            }
            else
            {
                __Internal32.Columns(count, id, border);
            }
        }

        /// <summary>Next column, defaults to current row or next row if the current row is finished.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L805"/></summary>
        // DEBUG: void          NextColumn()
        public static void NextColumn()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.NextColumn();
            }
            else
            {
                __Internal32.NextColumn();
            }
        }

        /// <summary>Get current column index.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L806"/></summary>
        // DEBUG: int           GetColumnIndex()
        public static int GetColumnIndex()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetColumnIndex() : __Internal32.GetColumnIndex();
            return ___ret;
        }

        /// <summary>Get column width (in pixels). pass -1 to use current column.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L807"/></summary>
        // DEBUG: float         GetColumnWidth(int column_index = -1)
        public static float GetColumnWidth(int column_index = (int)(-1))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetColumnWidth(column_index) : __Internal32.GetColumnWidth(column_index);
            return ___ret;
        }

        /// <summary>Set column width (in pixels). pass -1 to use current column.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L808"/></summary>
        // DEBUG: void          SetColumnWidth(int column_index, float width)
        public static void SetColumnWidth(int column_index, float width)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetColumnWidth(column_index, width);
            }
            else
            {
                __Internal32.SetColumnWidth(column_index, width);
            }
        }

        /// <summary>Get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L809"/></summary>
        // DEBUG: float         GetColumnOffset(int column_index = -1)
        public static float GetColumnOffset(int column_index = (int)(-1))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetColumnOffset(column_index) : __Internal32.GetColumnOffset(column_index);
            return ___ret;
        }

        /// <summary>Set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L810"/></summary>
        // DEBUG: void          SetColumnOffset(int column_index, float offset_x)
        public static void SetColumnOffset(int column_index, float offset_x)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetColumnOffset(column_index, offset_x);
            }
            else
            {
                __Internal32.SetColumnOffset(column_index, offset_x);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L811"/></summary>
        // DEBUG: int           GetColumnsCount()
        public static int GetColumnsCount()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetColumnsCount() : __Internal32.GetColumnsCount();
            return ___ret;
        }

        /// <summary>Create and append into a TabBar.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L815"/></summary>
        // DEBUG: bool          BeginTabBar(const char* str_id, ImGuiTabBarFlags flags = 0)
        public static bool BeginTabBar(string str_id, ImGuiTabBarFlags flags = (ImGuiTabBarFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginTabBar(str_id, flags) : __Internal32.BeginTabBar(str_id, flags);
            return ___ret;
        }

        /// <summary>Only call EndTabBar() if BeginTabBar() returns true!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L816"/></summary>
        // DEBUG: void          EndTabBar()
        public static void EndTabBar()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndTabBar();
            }
            else
            {
                __Internal32.EndTabBar();
            }
        }

        /// <summary>Create a Tab. Returns true if the Tab is selected.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L817"/></summary>
        // DEBUG: bool          BeginTabItem(const char* label, bool* p_open = NULL, ImGuiTabItemFlags flags = 0)
        public static bool BeginTabItem(string label, ref bool p_open, ImGuiTabItemFlags flags = (ImGuiTabItemFlags)(0))
        {
            fixed (bool* __p_open1 = &p_open)
            {
                var __arg1 = __p_open1;
                var ___ret = Environment.Is64BitProcess ? __Internal64.BeginTabItem(label, __arg1, flags) : __Internal32.BeginTabItem(label, __arg1, flags);
                return ___ret;
            }
        }

        /// <summary>Only call EndTabItem() if BeginTabItem() returns true!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L818"/></summary>
        // DEBUG: void          EndTabItem()
        public static void EndTabItem()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndTabItem();
            }
            else
            {
                __Internal32.EndTabItem();
            }
        }

        /// <summary>Create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L819"/></summary>
        // DEBUG: bool          TabItemButton(const char* label, ImGuiTabItemFlags flags = 0)
        public static bool TabItemButton(string label, ImGuiTabItemFlags flags = (ImGuiTabItemFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.TabItemButton(label, flags) : __Internal32.TabItemButton(label, flags);
            return ___ret;
        }

        /// <summary>Notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L820"/></summary>
        // DEBUG: void          SetTabItemClosed(const char* tab_or_docked_window_label)
        public static void SetTabItemClosed(string tab_or_docked_window_label)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetTabItemClosed(tab_or_docked_window_label);
            }
            else
            {
                __Internal32.SetTabItemClosed(tab_or_docked_window_label);
            }
        }

        /// <summary>Docking.<br/>[BETA API] Enable with io.ConfigFlags |= ImGuiConfigFlags_DockingEnable.<br/>Note: You can use most Docking facilities without calling any API. You DO NOT need to call DockSpace() to use Docking!<br/>- Drag from window title bar or their tab to dock/undock. Hold SHIFT to disable docking.<br/>- Drag from window menu button (upper-left button) to undock an entire node (all windows).<br/>- When io.ConfigDockingWithShift == true, you instead need to hold SHIFT to enable docking.<br/>About dockspaces:.<br/>- Use DockSpaceOverViewport() to create an explicit dock node covering the screen or a specific viewport.<br/>This is often used with ImGuiDockNodeFlags_PassthruCentralNode to make it transparent.<br/>- Use DockSpace() to create an explicit dock node _within_ an existing window. See Docking demo for details.<br/>- Important: Dockspaces need to be submitted _before_ any window they can host. Submit it early in your frame!<br/>- Important: Dockspaces need to be kept alive if hidden, otherwise windows docked into it will be undocked.<br/>E.g. if you have multiple tabs with a dockspace inside each tab: submit the non-visible dockspaces with ImGuiDockNodeFlags_KeepAliveOnly.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L835"/></summary>
        // DEBUG: ImGuiID       DockSpace(ImGuiID id, const ImVec2& size = ImVec2(0, 0), ImGuiDockNodeFlags flags = 0, const ImGuiWindowClass* window_class = NULL)
        public static uint DockSpace(uint id, Vector2 size, ImGuiDockNodeFlags flags = (ImGuiDockNodeFlags)(0), ImGuiWindowClass window_class = default)
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg3 = window_class is null ? IntPtr.Zero : window_class.__Instance;
            var ___ret = Environment.Is64BitProcess ? __Internal64.DockSpace(id, __arg1, flags, __arg3) : __Internal32.DockSpace(id, __arg1, flags, __arg3);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L836"/></summary>
        // DEBUG: ImGuiID       DockSpaceOverViewport(const ImGuiViewport* viewport = NULL, ImGuiDockNodeFlags flags = 0, const ImGuiWindowClass* window_class = NULL)
        public static uint DockSpaceOverViewport(ImGuiViewport viewport = default, ImGuiDockNodeFlags flags = (ImGuiDockNodeFlags)(0), ImGuiWindowClass window_class = default)
        {
            var __arg0 = viewport is null ? IntPtr.Zero : viewport.__Instance;
            var __arg2 = window_class is null ? IntPtr.Zero : window_class.__Instance;
            var ___ret = Environment.Is64BitProcess ? __Internal64.DockSpaceOverViewport(__arg0, flags, __arg2) : __Internal32.DockSpaceOverViewport(__arg0, flags, __arg2);
            return ___ret;
        }

        /// <summary>Set next window dock id.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L837"/></summary>
        // DEBUG: void          SetNextWindowDockID(ImGuiID dock_id, ImGuiCond cond = 0)
        public static void SetNextWindowDockID(uint dock_id, ImGuiCond cond = (ImGuiCond)(0))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextWindowDockID(dock_id, cond);
            }
            else
            {
                __Internal32.SetNextWindowDockID(dock_id, cond);
            }
        }

        /// <summary>Set next window class (control docking compatibility + provide hints to platform backend via custom viewport flags and platform parent/child relationship).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L838"/></summary>
        // DEBUG: void          SetNextWindowClass(const ImGuiWindowClass* window_class)
        public static void SetNextWindowClass(ImGuiWindowClass window_class)
        {
            var __arg0 = window_class is null ? IntPtr.Zero : window_class.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextWindowClass(__arg0);
            }
            else
            {
                __Internal32.SetNextWindowClass(__arg0);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L839"/></summary>
        // DEBUG: ImGuiID       GetWindowDockID()
        public static uint GetWindowDockID()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetWindowDockID() : __Internal32.GetWindowDockID();
            return ___ret;
        }

        /// <summary>Is current window docked into another window?.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L840"/></summary>
        // DEBUG: bool          IsWindowDocked()
        public static bool IsWindowDocked()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsWindowDocked() : __Internal32.IsWindowDocked();
            return ___ret;
        }

        /// <summary>Start logging to tty (stdout).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L844"/></summary>
        // DEBUG: void          LogToTTY(int auto_open_depth = -1)
        public static void LogToTTY(int auto_open_depth = (int)(-1))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.LogToTTY(auto_open_depth);
            }
            else
            {
                __Internal32.LogToTTY(auto_open_depth);
            }
        }

        /// <summary>Start logging to file.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L845"/></summary>
        // DEBUG: void          LogToFile(int auto_open_depth = -1, const char* filename = NULL)
        public static void LogToFile(int auto_open_depth = (int)(-1), string filename = default)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.LogToFile(auto_open_depth, filename);
            }
            else
            {
                __Internal32.LogToFile(auto_open_depth, filename);
            }
        }

        /// <summary>Start logging to OS clipboard.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L846"/></summary>
        // DEBUG: void          LogToClipboard(int auto_open_depth = -1)
        public static void LogToClipboard(int auto_open_depth = (int)(-1))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.LogToClipboard(auto_open_depth);
            }
            else
            {
                __Internal32.LogToClipboard(auto_open_depth);
            }
        }

        /// <summary>Stop logging (close file, etc.).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L847"/></summary>
        // DEBUG: void          LogFinish()
        public static void LogFinish()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.LogFinish();
            }
            else
            {
                __Internal32.LogFinish();
            }
        }

        /// <summary>Helper to display buttons for logging to tty/file/clipboard.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L848"/></summary>
        // DEBUG: void          LogButtons()
        public static void LogButtons()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.LogButtons();
            }
            else
            {
                __Internal32.LogButtons();
            }
        }

        /// <summary>Pass text data straight to log (without being displayed).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L849"/></summary>
        // DEBUG: void          LogText(const char* fmt, ...) IM_FMTARGS(1)
        public static void LogText(string fmt)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.LogText(fmt);
            }
            else
            {
                __Internal32.LogText(fmt);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L850"/></summary>
        // DEBUG: void          LogTextV(const char* fmt, va_list args) IM_FMTLIST(1)
        public static void LogTextV(string fmt, Object args)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.LogTextV(fmt, args);
            }
            else
            {
                __Internal32.LogTextV(fmt, args);
            }
        }

        /// <summary>Call after submitting an item which may be dragged. when this return true, you can call SetDragDropPayload() + EndDragDropSource().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L857"/></summary>
        // DEBUG: bool          BeginDragDropSource(ImGuiDragDropFlags flags = 0)
        public static bool BeginDragDropSource(ImGuiDragDropFlags flags = (ImGuiDragDropFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginDragDropSource(flags) : __Internal32.BeginDragDropSource(flags);
            return ___ret;
        }

        /// <summary>Type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui. Return true when payload has been accepted.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L858"/></summary>
        // DEBUG: bool          SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond = 0)
        public static bool SetDragDropPayload(string type, IntPtr data, UIntPtr sz, ImGuiCond cond = (ImGuiCond)(0))
        {
            var __arg2 = sz
            /* DEBUG: TypeMapSizeT.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.SetDragDropPayload(type, data, __arg2, cond) : __Internal32.SetDragDropPayload(type, data, __arg2, cond);
            return ___ret;
        }

        /// <summary>Only call EndDragDropSource() if BeginDragDropSource() returns true!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L859"/></summary>
        // DEBUG: void          EndDragDropSource()
        public static void EndDragDropSource()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndDragDropSource();
            }
            else
            {
                __Internal32.EndDragDropSource();
            }
        }

        /// <summary>Call after submitting an item that may receive a payload. If this returns true, you can call AcceptDragDropPayload() + EndDragDropTarget().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L860"/></summary>
        // DEBUG: bool                  BeginDragDropTarget()
        public static bool BeginDragDropTarget()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginDragDropTarget() : __Internal32.BeginDragDropTarget();
            return ___ret;
        }

        /// <summary>Accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L861"/></summary>
        // DEBUG: const ImGuiPayload*   AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags = 0)
        public static ImGuiPayload AcceptDragDropPayload(string type, ImGuiDragDropFlags flags = (ImGuiDragDropFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.AcceptDragDropPayload(type, flags) : __Internal32.AcceptDragDropPayload(type, flags);
            var __result0 = ImGuiPayload.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Only call EndDragDropTarget() if BeginDragDropTarget() returns true!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L862"/></summary>
        // DEBUG: void                  EndDragDropTarget()
        public static void EndDragDropTarget()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndDragDropTarget();
            }
            else
            {
                __Internal32.EndDragDropTarget();
            }
        }

        /// <summary>Peek directly into the current payload from anywhere. returns NULL when drag and drop is finished or inactive. use ImGuiPayload::IsDataType() to test for the payload type.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L863"/></summary>
        // DEBUG: const ImGuiPayload*   GetDragDropPayload()
        public static ImGuiPayload GetDragDropPayload()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetDragDropPayload() : __Internal32.GetDragDropPayload();
            var __result0 = ImGuiPayload.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Disabling [BETA API].<br/>- Disable all user interactions and dim items visuals (applying style.DisabledAlpha over current colors).<br/>- Those can be nested but it cannot be used to enable an already disabled section (a single BeginDisabled(true) in the stack is enough to keep everything disabled).<br/>- BeginDisabled(false) essentially does nothing useful but is provided to facilitate use of boolean expressions. If you can avoid calling BeginDisabled(False)/EndDisabled() best to avoid it.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L869"/></summary>
        // DEBUG: void          BeginDisabled(bool disabled = true)
        public static void BeginDisabled(bool disabled = true)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.BeginDisabled(disabled);
            }
            else
            {
                __Internal32.BeginDisabled(disabled);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L870"/></summary>
        // DEBUG: void          EndDisabled()
        public static void EndDisabled()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndDisabled();
            }
            else
            {
                __Internal32.EndDisabled();
            }
        }

        /// <summary>Clipping.<br/>- Mouse hovering is affected by ImGui::PushClipRect() calls, unlike direct calls to ImDrawList::PushClipRect() which are render only.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L874"/></summary>
        // DEBUG: void          PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect)
        public static void PushClipRect(Vector2 clip_rect_min, Vector2 clip_rect_max, bool intersect_with_current_clip_rect)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref clip_rect_min))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref clip_rect_max))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.PushClipRect(__arg0, __arg1, intersect_with_current_clip_rect);
            }
            else
            {
                __Internal32.PushClipRect(__arg0, __arg1, intersect_with_current_clip_rect);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L875"/></summary>
        // DEBUG: void          PopClipRect()
        public static void PopClipRect()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.PopClipRect();
            }
            else
            {
                __Internal32.PopClipRect();
            }
        }

        /// <summary>Make last item the default focused item of a window.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L879"/></summary>
        // DEBUG: void          SetItemDefaultFocus()
        public static void SetItemDefaultFocus()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetItemDefaultFocus();
            }
            else
            {
                __Internal32.SetItemDefaultFocus();
            }
        }

        /// <summary>Focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L880"/></summary>
        // DEBUG: void          SetKeyboardFocusHere(int offset = 0)
        public static void SetKeyboardFocusHere(int offset = (int)(0))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetKeyboardFocusHere(offset);
            }
            else
            {
                __Internal32.SetKeyboardFocusHere(offset);
            }
        }

        /// <summary>Allow next item to be overlapped by a subsequent item. Useful with invisible buttons, selectable, treenode covering an area where subsequent items may need to be added. Note that both Selectable() and TreeNode() have dedicated flags doing this.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L883"/></summary>
        // DEBUG: void          SetNextItemAllowOverlap()
        public static void SetNextItemAllowOverlap()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextItemAllowOverlap();
            }
            else
            {
                __Internal32.SetNextItemAllowOverlap();
            }
        }

        /// <summary>Is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L888"/></summary>
        // DEBUG: bool          IsItemHovered(ImGuiHoveredFlags flags = 0)
        public static bool IsItemHovered(ImGuiHoveredFlags flags = (ImGuiHoveredFlags)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsItemHovered(flags) : __Internal32.IsItemHovered(flags);
            return ___ret;
        }

        /// <summary>Is the last item active? (e.g. button being held, text field being edited. This will continuously return true while holding mouse button on an item. Items that don't interact will always return false).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L889"/></summary>
        // DEBUG: bool          IsItemActive()
        public static bool IsItemActive()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsItemActive() : __Internal32.IsItemActive();
            return ___ret;
        }

        /// <summary>Is the last item focused for keyboard/gamepad navigation?.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L890"/></summary>
        // DEBUG: bool          IsItemFocused()
        public static bool IsItemFocused()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsItemFocused() : __Internal32.IsItemFocused();
            return ___ret;
        }

        /// <summary>Is the last item hovered and mouse clicked on? (**).<br/>== IsMouseClicked(mouse_button) &amp; &amp; IsItemHovered()Important. (**) this is NOT equivalent to the behavior of e.g. Button(). Read comments in function definition.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L891"/></summary>
        // DEBUG: bool          IsItemClicked(ImGuiMouseButton mouse_button = 0)
        public static bool IsItemClicked(ImGuiMouseButton mouse_button = (ImGuiMouseButton)(0))
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsItemClicked(mouse_button) : __Internal32.IsItemClicked(mouse_button);
            return ___ret;
        }

        /// <summary>Is the last item visible? (items may be out of sight because of clipping/scrolling).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L892"/></summary>
        // DEBUG: bool          IsItemVisible()
        public static bool IsItemVisible()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsItemVisible() : __Internal32.IsItemVisible();
            return ___ret;
        }

        /// <summary>Did the last item modify its underlying value this frame? or was pressed? This is generally the same as the "bool" return value of many widgets.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L893"/></summary>
        // DEBUG: bool          IsItemEdited()
        public static bool IsItemEdited()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsItemEdited() : __Internal32.IsItemEdited();
            return ___ret;
        }

        /// <summary>Was the last item just made active (item was previously inactive).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L894"/></summary>
        // DEBUG: bool          IsItemActivated()
        public static bool IsItemActivated()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsItemActivated() : __Internal32.IsItemActivated();
            return ___ret;
        }

        /// <summary>Was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that require continuous editing.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L895"/></summary>
        // DEBUG: bool          IsItemDeactivated()
        public static bool IsItemDeactivated()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsItemDeactivated() : __Internal32.IsItemDeactivated();
            return ___ret;
        }

        /// <summary>Was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that require continuous editing. Note that you may get false positives (some widgets such as Combo()/ListBox()/Selectable() will return true even when clicking an already selected item).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L896"/></summary>
        // DEBUG: bool          IsItemDeactivatedAfterEdit()
        public static bool IsItemDeactivatedAfterEdit()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsItemDeactivatedAfterEdit() : __Internal32.IsItemDeactivatedAfterEdit();
            return ___ret;
        }

        /// <summary>Was the last item open state toggled? set by TreeNode().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L897"/></summary>
        // DEBUG: bool          IsItemToggledOpen()
        public static bool IsItemToggledOpen()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsItemToggledOpen() : __Internal32.IsItemToggledOpen();
            return ___ret;
        }

        /// <summary>Is any item hovered?.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L898"/></summary>
        // DEBUG: bool          IsAnyItemHovered()
        public static bool IsAnyItemHovered()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsAnyItemHovered() : __Internal32.IsAnyItemHovered();
            return ___ret;
        }

        /// <summary>Is any item active?.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L899"/></summary>
        // DEBUG: bool          IsAnyItemActive()
        public static bool IsAnyItemActive()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsAnyItemActive() : __Internal32.IsAnyItemActive();
            return ___ret;
        }

        /// <summary>Is any item focused?.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L900"/></summary>
        // DEBUG: bool          IsAnyItemFocused()
        public static bool IsAnyItemFocused()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsAnyItemFocused() : __Internal32.IsAnyItemFocused();
            return ___ret;
        }

        /// <summary>Get ID of last item (~~ often same ImGui::GetID(label) beforehand).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L901"/></summary>
        // DEBUG: ImGuiID       GetItemID()
        public static uint GetItemID()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetItemID() : __Internal32.GetItemID();
            return ___ret;
        }

        /// <summary>Get upper-left bounding rectangle of the last item (screen space).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L902"/></summary>
        // DEBUG: ImVec2        GetItemRectMin()
        public static Vector2 GetItemRectMin()
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetItemRectMin(new IntPtr(&___ret));
            }
            else
            {
                __Internal32.GetItemRectMin(new IntPtr(&___ret));
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Get lower-right bounding rectangle of the last item (screen space).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L903"/></summary>
        // DEBUG: ImVec2        GetItemRectMax()
        public static Vector2 GetItemRectMax()
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetItemRectMax(new IntPtr(&___ret));
            }
            else
            {
                __Internal32.GetItemRectMax(new IntPtr(&___ret));
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Get size of last item.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L904"/></summary>
        // DEBUG: ImVec2        GetItemRectSize()
        public static Vector2 GetItemRectSize()
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetItemRectSize(new IntPtr(&___ret));
            }
            else
            {
                __Internal32.GetItemRectSize(new IntPtr(&___ret));
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Return primary/default viewport. This can never be NULL.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L910"/></summary>
        // DEBUG: ImGuiViewport* GetMainViewport()
        public static ImGuiViewport GetMainViewport()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetMainViewport() : __Internal32.GetMainViewport();
            var __result0 = ImGuiViewport.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Get background draw list for the viewport associated to the current window. this draw list will be the first rendering one. Useful to quickly draw shapes/text behind dear imgui contents.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L913"/></summary>
        // DEBUG: ImDrawList*   GetBackgroundDrawList()
        public static ImDrawList GetBackgroundDrawList()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetBackgroundDrawList() : __Internal32.GetBackgroundDrawList();
            var __result0 = ___ret != IntPtr.Zero ? ImDrawList.__CreateInstance(___ret) : default;
            return __result0;
        }

        /// <summary>Get foreground draw list for the viewport associated to the current window. this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L914"/></summary>
        // DEBUG: ImDrawList*   GetForegroundDrawList()
        public static ImDrawList GetForegroundDrawList()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetForegroundDrawList() : __Internal32.GetForegroundDrawList();
            var __result0 = ___ret != IntPtr.Zero ? ImDrawList.__CreateInstance(___ret) : default;
            return __result0;
        }

        /// <summary>Get background draw list for the given viewport. this draw list will be the first rendering one. Useful to quickly draw shapes/text behind dear imgui contents.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L915"/></summary>
        // DEBUG: ImDrawList*   GetBackgroundDrawList(ImGuiViewport* viewport)
        public static ImDrawList GetBackgroundDrawList(ImGuiViewport viewport)
        {
            var __arg0 = viewport is null ? IntPtr.Zero : viewport.__Instance;
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetBackgroundDrawList(__arg0) : __Internal32.GetBackgroundDrawList(__arg0);
            var __result0 = ___ret != IntPtr.Zero ? ImDrawList.__CreateInstance(___ret) : default;
            return __result0;
        }

        /// <summary>Get foreground draw list for the given viewport. this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L916"/></summary>
        // DEBUG: ImDrawList*   GetForegroundDrawList(ImGuiViewport* viewport)
        public static ImDrawList GetForegroundDrawList(ImGuiViewport viewport)
        {
            var __arg0 = viewport is null ? IntPtr.Zero : viewport.__Instance;
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetForegroundDrawList(__arg0) : __Internal32.GetForegroundDrawList(__arg0);
            var __result0 = ___ret != IntPtr.Zero ? ImDrawList.__CreateInstance(___ret) : default;
            return __result0;
        }

        /// <summary>Test if rectangle (of given size, starting from cursor position) is visible / not clipped.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L919"/></summary>
        // DEBUG: bool          IsRectVisible(const ImVec2& size)
        public static bool IsRectVisible(Vector2 size)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsRectVisible(__arg0) : __Internal32.IsRectVisible(__arg0);
            return ___ret;
        }

        /// <summary>Test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L920"/></summary>
        // DEBUG: bool          IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)
        public static bool IsRectVisible(Vector2 rect_min, Vector2 rect_max)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref rect_min))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref rect_max))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsRectVisible(__arg0, __arg1) : __Internal32.IsRectVisible(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>Get global imgui time. incremented by io.DeltaTime every frame.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L921"/></summary>
        // DEBUG: double        GetTime()
        public static double GetTime()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetTime() : __Internal32.GetTime();
            return ___ret;
        }

        /// <summary>Get global imgui frame count. incremented by 1 every frame.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L922"/></summary>
        // DEBUG: int           GetFrameCount()
        public static int GetFrameCount()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetFrameCount() : __Internal32.GetFrameCount();
            return ___ret;
        }

        /// <summary>You may use this when creating your own ImDrawList instances.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L923"/></summary>
        // DEBUG: ImDrawListSharedData* GetDrawListSharedData()
        public static ImDrawListSharedData GetDrawListSharedData()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetDrawListSharedData() : __Internal32.GetDrawListSharedData();
            var __result0 = ImDrawListSharedData.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Get a string corresponding to the enum value (for display, saving, etc.).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L924"/></summary>
        // DEBUG: const char*   GetStyleColorName(ImGuiCol idx)
        public static string GetStyleColorName(ImGuiCol idx)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetStyleColorName(idx) : __Internal32.GetStyleColorName(idx);
            return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ___ret);
        }

        /// <summary>Replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L925"/></summary>
        // DEBUG: void          SetStateStorage(ImGuiStorage* storage)
        public static void SetStateStorage(ImGuiStorage storage)
        {
            var __arg0 = storage is null ? IntPtr.Zero : storage.__Instance;
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetStateStorage(__arg0);
            }
            else
            {
                __Internal32.SetStateStorage(__arg0);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L926"/></summary>
        // DEBUG: ImGuiStorage* GetStateStorage()
        public static ImGuiStorage GetStateStorage()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetStateStorage() : __Internal32.GetStateStorage();
            var __result0 = ImGuiStorage.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Helper to create a child window / scrolling region that looks like a normal widget frame.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L927"/></summary>
        // DEBUG: bool          BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags flags = 0)
        public static bool BeginChildFrame(uint id, Vector2 size, ImGuiWindowFlags flags = (ImGuiWindowFlags)(0))
        {
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref size))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.BeginChildFrame(id, __arg1, flags) : __Internal32.BeginChildFrame(id, __arg1, flags);
            return ___ret;
        }

        /// <summary>Always call EndChildFrame() regardless of BeginChildFrame() return values (which indicates a collapsed/clipped window).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L928"/></summary>
        // DEBUG: void          EndChildFrame()
        public static void EndChildFrame()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.EndChildFrame();
            }
            else
            {
                __Internal32.EndChildFrame();
            }
        }

        /// <summary>Text Utilities.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L931"/></summary>
        // DEBUG: ImVec2        CalcTextSize(const char* text, const char* text_end = NULL, bool hide_text_after_double_hash = false, float wrap_width = -1.0f)
        public static Vector2 CalcTextSize(string text, string text_end = default, bool hide_text_after_double_hash = false, float wrap_width = -1.0F)
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.CalcTextSize(new IntPtr(&___ret), text, text_end, hide_text_after_double_hash, wrap_width);
            }
            else
            {
                __Internal32.CalcTextSize(new IntPtr(&___ret), text, text_end, hide_text_after_double_hash, wrap_width);
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Color Utilities.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L934"/></summary>
        // DEBUG: ImVec4        ColorConvertU32ToFloat4(ImU32 in)
        public static Vector4 ColorConvertU32ToFloat4(uint @in)
        {
            var ___ret = new Vector4();
            if (Environment.Is64BitProcess)
            {
                __Internal64.ColorConvertU32ToFloat4(new IntPtr(&___ret), @in);
            }
            else
            {
                __Internal32.ColorConvertU32ToFloat4(new IntPtr(&___ret), @in);
            }

            return ___ret
            /* DEBUG: TypeMapImVec4.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec4.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L935"/></summary>
        // DEBUG: ImU32         ColorConvertFloat4ToU32(const ImVec4& in)
        public static uint ColorConvertFloat4ToU32(Vector4 @in)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref @in))
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec4.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.ColorConvertFloat4ToU32(__arg0) : __Internal32.ColorConvertFloat4ToU32(__arg0);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L936"/></summary>
        // DEBUG: void          ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v)
        public static void ColorConvertRGBtoHSV(float r, float g, float b, ref float out_h, ref float out_s, ref float out_v)
        {
            fixed (float* __out_h3 = &out_h)
            {
                var __arg3 = __out_h3;
                fixed (float* __out_s4 = &out_s)
                {
                    var __arg4 = __out_s4;
                    fixed (float* __out_v5 = &out_v)
                    {
                        var __arg5 = __out_v5;
                        if (Environment.Is64BitProcess)
                        {
                            __Internal64.ColorConvertRGBtoHSV(r, g, b, __arg3, __arg4, __arg5);
                        }
                        else
                        {
                            __Internal32.ColorConvertRGBtoHSV(r, g, b, __arg3, __arg4, __arg5);
                        }
                    }
                }
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L937"/></summary>
        // DEBUG: void          ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b)
        public static void ColorConvertHSVtoRGB(float h, float s, float v, ref float out_r, ref float out_g, ref float out_b)
        {
            fixed (float* __out_r3 = &out_r)
            {
                var __arg3 = __out_r3;
                fixed (float* __out_g4 = &out_g)
                {
                    var __arg4 = __out_g4;
                    fixed (float* __out_b5 = &out_b)
                    {
                        var __arg5 = __out_b5;
                        if (Environment.Is64BitProcess)
                        {
                            __Internal64.ColorConvertHSVtoRGB(h, s, v, __arg3, __arg4, __arg5);
                        }
                        else
                        {
                            __Internal32.ColorConvertHSVtoRGB(h, s, v, __arg3, __arg4, __arg5);
                        }
                    }
                }
            }
        }

        /// <summary>Is key being held.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L944"/></summary>
        // DEBUG: bool          IsKeyDown(ImGuiKey key)
        public static bool IsKeyDown(ImGuiKey key)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsKeyDown(key) : __Internal32.IsKeyDown(key);
            return ___ret;
        }

        /// <summary>Was key pressed (went from !Down to Down)? if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L945"/></summary>
        // DEBUG: bool          IsKeyPressed(ImGuiKey key, bool repeat = true)
        public static bool IsKeyPressed(ImGuiKey key, bool repeat = true)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsKeyPressed(key, repeat) : __Internal32.IsKeyPressed(key, repeat);
            return ___ret;
        }

        /// <summary>Was key released (went from Down to !Down)?.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L946"/></summary>
        // DEBUG: bool          IsKeyReleased(ImGuiKey key)
        public static bool IsKeyReleased(ImGuiKey key)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsKeyReleased(key) : __Internal32.IsKeyReleased(key);
            return ___ret;
        }

        /// <summary>Uses provided repeat rate/delay. return a count, most often 0 or 1 but might be &gt;1 if RepeatRate is small enough that DeltaTime &gt; RepeatRate.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L947"/></summary>
        // DEBUG: int           GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate)
        public static int GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetKeyPressedAmount(key, repeat_delay, rate) : __Internal32.GetKeyPressedAmount(key, repeat_delay, rate);
            return ___ret;
        }

        /// <summary>[DEBUG] returns English name of the key. Those names a provided for debugging purpose and are not meant to be saved persistently not compared.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L948"/></summary>
        // DEBUG: const char*   GetKeyName(ImGuiKey key)
        public static string GetKeyName(ImGuiKey key)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetKeyName(key) : __Internal32.GetKeyName(key);
            return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ___ret);
        }

        /// <summary>Override io.WantCaptureKeyboard flag next frame (said flag is left for your application to handle, typically when true it instructs your app to ignore inputs). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting "io.WantCaptureKeyboard = want_capture_keyboard"; after the next NewFrame() call.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L949"/></summary>
        // DEBUG: void          SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)
        public static void SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextFrameWantCaptureKeyboard(want_capture_keyboard);
            }
            else
            {
                __Internal32.SetNextFrameWantCaptureKeyboard(want_capture_keyboard);
            }
        }

        /// <summary>Is mouse button held?.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L955"/></summary>
        // DEBUG: bool          IsMouseDown(ImGuiMouseButton button)
        public static bool IsMouseDown(ImGuiMouseButton button)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsMouseDown(button) : __Internal32.IsMouseDown(button);
            return ___ret;
        }

        /// <summary>Did mouse button clicked? (went from !Down to Down). Same as GetMouseClickedCount() == 1.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L956"/></summary>
        // DEBUG: bool          IsMouseClicked(ImGuiMouseButton button, bool repeat = false)
        public static bool IsMouseClicked(ImGuiMouseButton button, bool repeat = false)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsMouseClicked(button, repeat) : __Internal32.IsMouseClicked(button, repeat);
            return ___ret;
        }

        /// <summary>Did mouse button released? (went from Down to !Down).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L957"/></summary>
        // DEBUG: bool          IsMouseReleased(ImGuiMouseButton button)
        public static bool IsMouseReleased(ImGuiMouseButton button)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsMouseReleased(button) : __Internal32.IsMouseReleased(button);
            return ___ret;
        }

        /// <summary>Did mouse button double-clicked? Same as GetMouseClickedCount() == 2. (note that a double-click will also report IsMouseClicked() == true).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L958"/></summary>
        // DEBUG: bool          IsMouseDoubleClicked(ImGuiMouseButton button)
        public static bool IsMouseDoubleClicked(ImGuiMouseButton button)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsMouseDoubleClicked(button) : __Internal32.IsMouseDoubleClicked(button);
            return ___ret;
        }

        /// <summary>Return the number of successive mouse-clicks at the time where a click happen (otherwise 0).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L959"/></summary>
        // DEBUG: int           GetMouseClickedCount(ImGuiMouseButton button)
        public static int GetMouseClickedCount(ImGuiMouseButton button)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetMouseClickedCount(button) : __Internal32.GetMouseClickedCount(button);
            return ___ret;
        }

        /// <summary>Is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L960"/></summary>
        // DEBUG: bool          IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip = true)
        public static bool IsMouseHoveringRect(Vector2 r_min, Vector2 r_max, bool clip = true)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref r_min))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg1 = new IntPtr(Unsafe.AsPointer(ref r_max))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 4 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsMouseHoveringRect(__arg0, __arg1, clip) : __Internal32.IsMouseHoveringRect(__arg0, __arg1, clip);
            return ___ret;
        }

        /// <summary>By convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse available.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L961"/></summary>
        // DEBUG: bool          IsMousePosValid(const ImVec2* mouse_pos = NULL)
        public static bool IsMousePosValid(ref Vector2 mouse_pos)
        {
            var __arg0 = new IntPtr(Unsafe.AsPointer(ref mouse_pos))
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Case 3 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsMousePosValid(__arg0) : __Internal32.IsMousePosValid(__arg0);
            return ___ret;
        }

        /// <summary>[WILL OBSOLETE] is any mouse button held? This was designed for backends, but prefer having backend maintain a mask of held mouse buttons, because upcoming input queue system will make this invalid.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L962"/></summary>
        // DEBUG: bool          IsAnyMouseDown()
        public static bool IsAnyMouseDown()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsAnyMouseDown() : __Internal32.IsAnyMouseDown();
            return ___ret;
        }

        /// <summary>Shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L963"/></summary>
        // DEBUG: ImVec2        GetMousePos()
        public static Vector2 GetMousePos()
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetMousePos(new IntPtr(&___ret));
            }
            else
            {
                __Internal32.GetMousePos(new IntPtr(&___ret));
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L964"/></summary>
        // DEBUG: ImVec2        GetMousePosOnOpeningCurrentPopup()
        public static Vector2 GetMousePosOnOpeningCurrentPopup()
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetMousePosOnOpeningCurrentPopup(new IntPtr(&___ret));
            }
            else
            {
                __Internal32.GetMousePosOnOpeningCurrentPopup(new IntPtr(&___ret));
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary>Is mouse dragging? (if lock_threshold &lt; -1.0f, uses io.MouseDraggingThreshold).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L965"/></summary>
        // DEBUG: bool          IsMouseDragging(ImGuiMouseButton button, float lock_threshold = -1.0f)
        public static bool IsMouseDragging(ImGuiMouseButton button, float lock_threshold = -1.0F)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.IsMouseDragging(button, lock_threshold) : __Internal32.IsMouseDragging(button, lock_threshold);
            return ___ret;
        }

        /// <summary>Return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once (if lock_threshold &lt; -1.0f, uses io.MouseDraggingThreshold).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L966"/></summary>
        // DEBUG: ImVec2        GetMouseDragDelta(ImGuiMouseButton button = 0, float lock_threshold = -1.0f)
        public static Vector2 GetMouseDragDelta(ImGuiMouseButton button = (ImGuiMouseButton)(0), float lock_threshold = -1.0F)
        {
            var ___ret = new Vector2();
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetMouseDragDelta(new IntPtr(&___ret), button, lock_threshold);
            }
            else
            {
                __Internal32.GetMouseDragDelta(new IntPtr(&___ret), button, lock_threshold);
            }

            return ___ret
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Case 6 */
            /* DEBUG: TypeMapImVec2.CSharpMarshalToManaged: Function: True, ReturnVarName: True */
            ;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L967"/></summary>
        // DEBUG: void          ResetMouseDragDelta(ImGuiMouseButton button = 0)
        public static void ResetMouseDragDelta(ImGuiMouseButton button = (ImGuiMouseButton)(0))
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.ResetMouseDragDelta(button);
            }
            else
            {
                __Internal32.ResetMouseDragDelta(button);
            }
        }

        /// <summary>Get desired mouse cursor shape. Important: reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L968"/></summary>
        // DEBUG: ImGuiMouseCursor GetMouseCursor()
        public static ImGuiMouseCursor GetMouseCursor()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetMouseCursor() : __Internal32.GetMouseCursor();
            return ___ret;
        }

        /// <summary>Set desired mouse cursor shape.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L969"/></summary>
        // DEBUG: void          SetMouseCursor(ImGuiMouseCursor cursor_type)
        public static void SetMouseCursor(ImGuiMouseCursor cursor_type)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetMouseCursor(cursor_type);
            }
            else
            {
                __Internal32.SetMouseCursor(cursor_type);
            }
        }

        /// <summary>Override io.WantCaptureMouse flag next frame (said flag is left for your application to handle, typical when true it instucts your app to ignore inputs). This is equivalent to setting "io.WantCaptureMouse = want_capture_mouse;" after the next NewFrame() call.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L970"/></summary>
        // DEBUG: void          SetNextFrameWantCaptureMouse(bool want_capture_mouse)
        public static void SetNextFrameWantCaptureMouse(bool want_capture_mouse)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetNextFrameWantCaptureMouse(want_capture_mouse);
            }
            else
            {
                __Internal32.SetNextFrameWantCaptureMouse(want_capture_mouse);
            }
        }

        /// <summary>Clipboard Utilities.<br/>- Also see the LogToClipboard() function to capture GUI into clipboard, or easily output text data to the clipboard.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L974"/></summary>
        // DEBUG: const char*   GetClipboardText()
        public static string GetClipboardText()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetClipboardText() : __Internal32.GetClipboardText();
            return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ___ret);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L975"/></summary>
        // DEBUG: void          SetClipboardText(const char* text)
        public static void SetClipboardText(string text)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetClipboardText(text);
            }
            else
            {
                __Internal32.SetClipboardText(text);
            }
        }

        /// <summary>Call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L981"/></summary>
        // DEBUG: void          LoadIniSettingsFromDisk(const char* ini_filename)
        public static void LoadIniSettingsFromDisk(string ini_filename)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.LoadIniSettingsFromDisk(ini_filename);
            }
            else
            {
                __Internal32.LoadIniSettingsFromDisk(ini_filename);
            }
        }

        /// <summary>Call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L982"/></summary>
        // DEBUG: void          LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size=0)
        public static void LoadIniSettingsFromMemory(string ini_data, UIntPtr ini_size = default)
        {
            var __arg1 = ini_size
            /* DEBUG: TypeMapSizeT.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            if (Environment.Is64BitProcess)
            {
                __Internal64.LoadIniSettingsFromMemory(ini_data, __arg1);
            }
            else
            {
                __Internal32.LoadIniSettingsFromMemory(ini_data, __arg1);
            }
        }

        /// <summary>This is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L983"/></summary>
        // DEBUG: void          SaveIniSettingsToDisk(const char* ini_filename)
        public static void SaveIniSettingsToDisk(string ini_filename)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.SaveIniSettingsToDisk(ini_filename);
            }
            else
            {
                __Internal32.SaveIniSettingsToDisk(ini_filename);
            }
        }

        /// <summary>Return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L984"/></summary>
        // DEBUG: const char*   SaveIniSettingsToMemory(size_t* out_ini_size = NULL)
        public static string SaveIniSettingsToMemory(ref UIntPtr out_ini_size)
        {
            fixed (UIntPtr* __out_ini_size0 = &out_ini_size)
            {
                var __arg0 = __out_ini_size0;
                var ___ret = Environment.Is64BitProcess ? __Internal64.SaveIniSettingsToMemory(__arg0) : __Internal32.SaveIniSettingsToMemory(__arg0);
                return CppSharp.Runtime.MarshalUtil.GetString(Encoding.UTF8, ___ret);
            }
        }

        /// <summary>Debug Utilities.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L987"/></summary>
        // DEBUG: void          DebugTextEncoding(const char* text)
        public static void DebugTextEncoding(string text)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.DebugTextEncoding(text);
            }
            else
            {
                __Internal32.DebugTextEncoding(text);
            }
        }

        /// <summary>This is called by IMGUI_CHECKVERSION() macro.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L988"/></summary>
        // DEBUG: bool          DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx)
        public static bool DebugCheckVersionAndDataLayout(string version_str, UIntPtr sz_io, UIntPtr sz_style, UIntPtr sz_vec2, UIntPtr sz_vec4, UIntPtr sz_drawvert, UIntPtr sz_drawidx)
        {
            var __arg1 = sz_io
            /* DEBUG: TypeMapSizeT.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg2 = sz_style
            /* DEBUG: TypeMapSizeT.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg3 = sz_vec2
            /* DEBUG: TypeMapSizeT.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg4 = sz_vec4
            /* DEBUG: TypeMapSizeT.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg5 = sz_drawvert
            /* DEBUG: TypeMapSizeT.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var __arg6 = sz_drawidx
            /* DEBUG: TypeMapSizeT.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.DebugCheckVersionAndDataLayout(version_str, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6) : __Internal32.DebugCheckVersionAndDataLayout(version_str, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
            return ___ret;
        }

        /// <summary>Memory Allocators.<br/>- Those functions are not reliant on the current context.<br/>- DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions().<br/>For each static/DLL boundary you are calling from. Read "Context and Memory Allocators" section of imgui.cpp for more details.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L994"/></summary>
        // DEBUG: void          SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void* user_data = NULL)
        public static void SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, IntPtr user_data = default)
        {
            var __arg0 = alloc_func == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(alloc_func);
            var __arg1 = free_func == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(free_func);
            if (Environment.Is64BitProcess)
            {
                __Internal64.SetAllocatorFunctions(__arg0, __arg1, user_data);
            }
            else
            {
                __Internal32.SetAllocatorFunctions(__arg0, __arg1, user_data);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L995"/></summary>
        // DEBUG: void          GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func, void** p_user_data)
        public static void GetAllocatorFunctions(ImGuiMemAllocFunc p_alloc_func, ImGuiMemFreeFunc p_free_func, IntPtr* p_user_data)
        {
            var __arg0 = p_alloc_func == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(p_alloc_func);
            var __arg1 = p_free_func == null ? IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(p_free_func);
            if (Environment.Is64BitProcess)
            {
                __Internal64.GetAllocatorFunctions(__arg0, __arg1, p_user_data);
            }
            else
            {
                __Internal32.GetAllocatorFunctions(__arg0, __arg1, p_user_data);
            }
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L996"/></summary>
        // DEBUG: void*         MemAlloc(size_t size)
        public static IntPtr MemAlloc(UIntPtr size)
        {
            var __arg0 = size
            /* DEBUG: TypeMapSizeT.CSharpMarshalToNative: Function: True, ReturnVarName: False */
            ;
            var ___ret = Environment.Is64BitProcess ? __Internal64.MemAlloc(__arg0) : __Internal32.MemAlloc(__arg0);
            return ___ret;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L997"/></summary>
        // DEBUG: void          MemFree(void* ptr)
        public static void MemFree(IntPtr ptr)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.MemFree(ptr);
            }
            else
            {
                __Internal32.MemFree(ptr);
            }
        }

        /// <summary>Platform/renderer functions, for backend to setup + viewports list.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1002"/></summary>
        // DEBUG: ImGuiPlatformIO&  GetPlatformIO()
        public static ImGuiPlatformIO GetPlatformIO()
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetPlatformIO() : __Internal32.GetPlatformIO();
            var __result0 = ImGuiPlatformIO.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>Call in main loop. will call CreateWindow/ResizeWindow/etc. platform functions for each secondary viewport, and DestroyWindow for each inactive viewport.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1003"/></summary>
        // DEBUG: void              UpdatePlatformWindows()
        public static void UpdatePlatformWindows()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.UpdatePlatformWindows();
            }
            else
            {
                __Internal32.UpdatePlatformWindows();
            }
        }

        /// <summary>Call in main loop. will call RenderWindow/SwapBuffers platform functions for each secondary viewport which doesn't have the ImGuiViewportFlags_Minimized flag set. May be reimplemented by user for custom rendering needs.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1004"/></summary>
        // DEBUG: void              RenderPlatformWindowsDefault(void* platform_render_arg = NULL, void* renderer_render_arg = NULL)
        public static void RenderPlatformWindowsDefault(IntPtr platform_render_arg = default, IntPtr renderer_render_arg = default)
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.RenderPlatformWindowsDefault(platform_render_arg, renderer_render_arg);
            }
            else
            {
                __Internal32.RenderPlatformWindowsDefault(platform_render_arg, renderer_render_arg);
            }
        }

        /// <summary>Call DestroyWindow platform functions for all viewports. call from backend Shutdown() if you need to close platform windows before imgui shutdown. otherwise will be called by DestroyContext().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1005"/></summary>
        // DEBUG: void              DestroyPlatformWindows()
        public static void DestroyPlatformWindows()
        {
            if (Environment.Is64BitProcess)
            {
                __Internal64.DestroyPlatformWindows();
            }
            else
            {
                __Internal32.DestroyPlatformWindows();
            }
        }

        /// <summary>This is a helper for backends.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1006"/></summary>
        // DEBUG: ImGuiViewport*    FindViewportByID(ImGuiID id)
        public static ImGuiViewport FindViewportByID(uint id)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.FindViewportByID(id) : __Internal32.FindViewportByID(id);
            var __result0 = ImGuiViewport.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary>This is a helper for backends. the type platform_handle is decided by the backend (e.g. HWND, MyWindow*, GLFWwindow* etc.).<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L1007"/></summary>
        // DEBUG: ImGuiViewport*    FindViewportByPlatformHandle(void* platform_handle)
        public static ImGuiViewport FindViewportByPlatformHandle(IntPtr platform_handle)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.FindViewportByPlatformHandle(platform_handle) : __Internal32.FindViewportByPlatformHandle(platform_handle);
            var __result0 = ImGuiViewport.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L3375"/></summary>
        // DEBUG: static inline ImGuiKey GetKeyIndex(ImGuiKey key)   { IM_ASSERT(key >= ImGuiKey_NamedKey_BEGIN && key < ImGuiKey_NamedKey_END && "ImGuiKey and native_index was merged together and native_index is disabled by IMGUI_DISABLE_OBSOLETE_KEYIO. Please switch to ImGuiKey."); return key; }
        public static ImGuiKey GetKeyIndex(ImGuiKey key)
        {
            var ___ret = Environment.Is64BitProcess ? __Internal64.GetKeyIndex(key) : __Internal32.GetKeyIndex(key);
            return ___ret;
        }

        /// <summary>Create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L313"/></summary>
        // DEBUG: void          ShowDemoWindow(bool* p_open = NULL)
        public static void ShowDemoWindow()
        {
            bool param0 = false;
            ShowDemoWindow(ref param0);
        }

        /// <summary>Create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L314"/></summary>
        // DEBUG: void          ShowMetricsWindow(bool* p_open = NULL)
        public static void ShowMetricsWindow()
        {
            bool param0 = false;
            ShowMetricsWindow(ref param0);
        }

        /// <summary>Create Debug Log window. display a simplified log of important dear imgui events.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L315"/></summary>
        // DEBUG: void          ShowDebugLogWindow(bool* p_open = NULL)
        public static void ShowDebugLogWindow()
        {
            bool param0 = false;
            ShowDebugLogWindow(ref param0);
        }

        /// <summary>Create Stack Tool window. hover items with mouse to query information about the source of their unique ID.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L316"/></summary>
        // DEBUG: void          ShowIDStackToolWindow(bool* p_open = NULL)
        public static void ShowIDStackToolWindow()
        {
            bool param0 = false;
            ShowIDStackToolWindow(ref param0);
        }

        /// <summary>Create About window. display Dear ImGui version, credits and build/system information.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L317"/></summary>
        // DEBUG: void          ShowAboutWindow(bool* p_open = NULL)
        public static void ShowAboutWindow()
        {
            bool param0 = false;
            ShowAboutWindow(ref param0);
        }

        /// <summary>Windows.<br/>- Begin() = push window to the stack and start appending to it. End() = pop window from the stack.<br/>- Passing 'bool* p_open != NULL' shows a window-closing widget in the upper-right corner of the window,.<br/>Which clicking will set the boolean to false when clicked.<br/>- You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.<br/>Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin().<br/>- Begin() return false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting.<br/>Anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!<br/>[Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,.<br/>BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function.<br/>Returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.].<br/>- Note that the bottom of window stack always contains a window called "Debug".<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L341"/></summary>
        // DEBUG: bool          Begin(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0)
        public static bool Begin(string name)
        {
            bool param0 = false;
            return Begin(name, ref param0, 0);
        }

        /// <summary>Child Windows.<br/>- Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child.<br/>- For each independent axis of 'size': ==0.0f: use remaining host window size / &gt;0.0f: fixed size / &lt;0.0f: use remaining window size minus abs(size) / Each axis can use a different mode, e.g. ImVec2(0,400).<br/>- BeginChild() returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.<br/>Always call a matching EndChild() for each BeginChild() call, regardless of its return value.<br/>[Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,.<br/>BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function.<br/>Returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.].<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L352"/></summary>
        // DEBUG: bool          BeginChild(const char* str_id, const ImVec2& size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0)
        public static bool BeginChild(string str_id)
        {
            return BeginChild(str_id, new Vector2(0, 0), false, 0);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L353"/></summary>
        // DEBUG: bool          BeginChild(ImGuiID id, const ImVec2& size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0)
        public static bool BeginChild(uint id)
        {
            return BeginChild(id, new Vector2(0, 0), false, 0);
        }

        /// <summary>Set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L372"/></summary>
        // DEBUG: void          SetNextWindowPos(const ImVec2& pos, ImGuiCond cond = 0, const ImVec2& pivot = ImVec2(0, 0))
        public static void SetNextWindowPos(Vector2 pos, ImGuiCond cond = (ImGuiCond)(0))
        {
            SetNextWindowPos(pos, cond, new Vector2(0, 0));
        }

        /// <summary>Button.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L518"/></summary>
        // DEBUG: bool          Button(const char* label, const ImVec2& size = ImVec2(0, 0))
        public static bool Button(string label)
        {
            return Button(label, new Vector2(0, 0));
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L527"/></summary>
        // DEBUG: void          ProgressBar(float fraction, const ImVec2& size_arg = ImVec2(-FLT_MIN, 0), const char* overlay = NULL)
        public static void ProgressBar(float fraction)
        {
            ProgressBar(fraction, new Vector2(-1.17549435E-38F, 0), default);
        }

        /// <summary>Widgets: Images.<br/>- Read about ImTextureID here: https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples.<br/>- Note that ImageButton() adds style.FramePadding*2.0f to provided size. This is in order to facilitate fitting an image in a button.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L533"/></summary>
        // DEBUG: void          Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), const ImVec4& tint_col = ImVec4(1, 1, 1, 1), const ImVec4& border_col = ImVec4(0, 0, 0, 0))
        public static void Image(IntPtr user_texture_id, Vector2 size)
        {
            Image(user_texture_id, size, new Vector2(0, 0), new Vector2(1, 1), new Vector4(1, 1, 1, 1), new Vector4(0, 0, 0, 0));
        }

        /// <summary>Widgets: Images.<br/>- Read about ImTextureID here: https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples.<br/>- Note that ImageButton() adds style.FramePadding*2.0f to provided size. This is in order to facilitate fitting an image in a button.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L533"/></summary>
        // DEBUG: void          Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), const ImVec4& tint_col = ImVec4(1, 1, 1, 1), const ImVec4& border_col = ImVec4(0, 0, 0, 0))
        public static void Image(IntPtr user_texture_id, Vector2 size, Vector2 uv0)
        {
            Image(user_texture_id, size, uv0, new Vector2(1, 1), new Vector4(1, 1, 1, 1), new Vector4(0, 0, 0, 0));
        }

        /// <summary>Widgets: Images.<br/>- Read about ImTextureID here: https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples.<br/>- Note that ImageButton() adds style.FramePadding*2.0f to provided size. This is in order to facilitate fitting an image in a button.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L533"/></summary>
        // DEBUG: void          Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), const ImVec4& tint_col = ImVec4(1, 1, 1, 1), const ImVec4& border_col = ImVec4(0, 0, 0, 0))
        public static void Image(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1)
        {
            Image(user_texture_id, size, uv0, uv1, new Vector4(1, 1, 1, 1), new Vector4(0, 0, 0, 0));
        }

        /// <summary>Widgets: Images.<br/>- Read about ImTextureID here: https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples.<br/>- Note that ImageButton() adds style.FramePadding*2.0f to provided size. This is in order to facilitate fitting an image in a button.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L533"/></summary>
        // DEBUG: void          Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), const ImVec4& tint_col = ImVec4(1, 1, 1, 1), const ImVec4& border_col = ImVec4(0, 0, 0, 0))
        public static void Image(IntPtr user_texture_id, Vector2 size, Vector2 uv0, Vector2 uv1, Vector4 tint_col)
        {
            Image(user_texture_id, size, uv0, uv1, tint_col, new Vector4(0, 0, 0, 0));
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L534"/></summary>
        // DEBUG: bool          ImageButton(const char* str_id, ImTextureID user_texture_id, const ImVec2& image_size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), const ImVec4& bg_col = ImVec4(0, 0, 0, 0), const ImVec4& tint_col = ImVec4(1, 1, 1, 1))
        public static bool ImageButton(string str_id, IntPtr user_texture_id, Vector2 image_size)
        {
            return ImageButton(str_id, user_texture_id, image_size, new Vector2(0, 0), new Vector2(1, 1), new Vector4(0, 0, 0, 0), new Vector4(1, 1, 1, 1));
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L534"/></summary>
        // DEBUG: bool          ImageButton(const char* str_id, ImTextureID user_texture_id, const ImVec2& image_size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), const ImVec4& bg_col = ImVec4(0, 0, 0, 0), const ImVec4& tint_col = ImVec4(1, 1, 1, 1))
        public static bool ImageButton(string str_id, IntPtr user_texture_id, Vector2 image_size, Vector2 uv0)
        {
            return ImageButton(str_id, user_texture_id, image_size, uv0, new Vector2(1, 1), new Vector4(0, 0, 0, 0), new Vector4(1, 1, 1, 1));
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L534"/></summary>
        // DEBUG: bool          ImageButton(const char* str_id, ImTextureID user_texture_id, const ImVec2& image_size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), const ImVec4& bg_col = ImVec4(0, 0, 0, 0), const ImVec4& tint_col = ImVec4(1, 1, 1, 1))
        public static bool ImageButton(string str_id, IntPtr user_texture_id, Vector2 image_size, Vector2 uv0, Vector2 uv1)
        {
            return ImageButton(str_id, user_texture_id, image_size, uv0, uv1, new Vector4(0, 0, 0, 0), new Vector4(1, 1, 1, 1));
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L534"/></summary>
        // DEBUG: bool          ImageButton(const char* str_id, ImTextureID user_texture_id, const ImVec2& image_size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), const ImVec4& bg_col = ImVec4(0, 0, 0, 0), const ImVec4& tint_col = ImVec4(1, 1, 1, 1))
        public static bool ImageButton(string str_id, IntPtr user_texture_id, Vector2 image_size, Vector2 uv0, Vector2 uv1, Vector4 bg_col)
        {
            return ImageButton(str_id, user_texture_id, image_size, uv0, uv1, bg_col, new Vector4(1, 1, 1, 1));
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L595"/></summary>
        // DEBUG: bool          InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size = ImVec2(0, 0), ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL)
        public static bool InputTextMultiline(string label, char* buf, UIntPtr buf_size)
        {
            return InputTextMultiline(label, buf, buf_size, new Vector2(0, 0), 0, null, default);
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L615"/></summary>
        // DEBUG: bool          ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags = 0, const float* ref_col = NULL)
        public static bool ColorPicker4(string label, Span<float> col, ImGuiColorEditFlags flags = (ImGuiColorEditFlags)(0))
        {
            float param0 = 0;
            return ColorPicker4(label, col, flags, ref param0);
        }

        /// <summary>Display a color square/button, hover for details, return true when pressed.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L616"/></summary>
        // DEBUG: bool          ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags = 0, const ImVec2& size = ImVec2(0, 0))
        public static bool ColorButton(string desc_id, Vector4 col, ImGuiColorEditFlags flags = (ImGuiColorEditFlags)(0))
        {
            return ColorButton(desc_id, col, flags, new Vector2(0, 0));
        }

        /// <summary>"bool selected" carry the selection state (read-only). Selectable() is clicked is returns true so you can modify your selection state. size.x==0.0: use remaining width, size.x&gt;0.0: specify width. size.y==0.0: use label height, size.y&gt;0.0: specify height.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L642"/></summary>
        // DEBUG: bool          Selectable(const char* label, bool selected = false, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0, 0))
        public static bool Selectable(string label, bool selected = false, ImGuiSelectableFlags flags = (ImGuiSelectableFlags)(0))
        {
            return Selectable(label, selected, flags, new Vector2(0, 0));
        }

        /// <summary>"bool* p_selected" point to the selection state (read-write), as a convenient helper.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L643"/></summary>
        // DEBUG: bool          Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0, 0))
        public static bool Selectable(string label, ref bool p_selected, ImGuiSelectableFlags flags = (ImGuiSelectableFlags)(0))
        {
            return Selectable(label, ref p_selected, flags, new Vector2(0, 0));
        }

        /// <summary>Open a framed scrolling region.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L651"/></summary>
        // DEBUG: bool          BeginListBox(const char* label, const ImVec2& size = ImVec2(0, 0))
        public static bool BeginListBox(string label)
        {
            return BeginListBox(label, new Vector2(0, 0));
        }

        /// <summary>Widgets: Data Plotting.<br/>- Consider using ImPlot (https://github.com/epezent/implot) which is much better!<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L658"/></summary>
        // DEBUG: void          PlotLines(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float))
        public static void PlotLines(string label, ref float values, int values_count, int values_offset = (int)(0), string overlay_text = default, float scale_min = 3.40282347E+38F, float scale_max = 3.40282347E+38F)
        {
            PlotLines(label, ref values, values_count, values_offset, overlay_text, scale_min, scale_max, new Vector2(0, 0), sizeof(float));
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L659"/></summary>
        // DEBUG: void          PlotLines(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0))
        public static void PlotLines(string label, ImValuesGetterHandler values_getter, IntPtr data, int values_count, int values_offset = (int)(0), string overlay_text = default, float scale_min = 3.40282347E+38F, float scale_max = 3.40282347E+38F)
        {
            PlotLines(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, new Vector2(0, 0));
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L660"/></summary>
        // DEBUG: void          PlotHistogram(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float))
        public static void PlotHistogram(string label, ref float values, int values_count, int values_offset = (int)(0), string overlay_text = default, float scale_min = 3.40282347E+38F, float scale_max = 3.40282347E+38F)
        {
            PlotHistogram(label, ref values, values_count, values_offset, overlay_text, scale_min, scale_max, new Vector2(0, 0), sizeof(float));
        }

        /// <summary><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L661"/></summary>
        // DEBUG: void          PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0))
        public static void PlotHistogram(string label, ImValuesGetterHandler values_getter, IntPtr data, int values_count, int values_offset = (int)(0), string overlay_text = default, float scale_min = 3.40282347E+38F, float scale_max = 3.40282347E+38F)
        {
            PlotHistogram(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, new Vector2(0, 0));
        }

        /// <summary>Return true if the modal is open, and you can start outputting to it.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L713"/></summary>
        // DEBUG: bool          BeginPopupModal(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0)
        public static bool BeginPopupModal(string name)
        {
            bool param0 = false;
            return BeginPopupModal(name, ref param0, 0);
        }

        /// <summary>Tables.<br/>- Full-featured replacement for old Columns API.<br/>- See Demo-&gt;Tables for demo code. See top of imgui_tables.cpp for general commentary.<br/>- See ImGuiTableFlags_ and ImGuiTableColumnFlags_ enums for a description of available flags.<br/>The typical call flow is:.<br/>- 1. Call BeginTable(), early out if returning false.<br/>- 2. Optionally call TableSetupColumn() to submit column name/flags/defaults.<br/>- 3. Optionally call TableSetupScrollFreeze() to request scroll freezing of columns/rows.<br/>- 4. Optionally call TableHeadersRow() to submit a header row. Names are pulled from TableSetupColumn() data.<br/>- 5. Populate contents:.<br/>- In most situations you can use TableNextRow() + TableSetColumnIndex(N) to start appending into a column.<br/>- If you are using tables as a sort of grid, where every column is holding the same type of contents,.<br/>You may prefer using TableNextColumn() instead of TableNextRow() + TableSetColumnIndex().<br/>TableNextColumn() will automatically wrap-around into the next row if needed.<br/>- IMPORTANT: Comparatively to the old Columns() API, we need to call TableNextColumn() for the first column!<br/>- Summary of possible call flow:.<br/>--------------------------------------------------------------------------------------------------------.<br/>TableNextRow() -&gt; TableSetColumnIndex(0) -&gt; Text("Hello 0") -&gt; TableSetColumnIndex(1) -&gt; Text("Hello 1"), // OK.<br/>TableNextRow() -&gt; TableNextColumn(), -&gt; Text("Hello 0") -&gt; TableNextColumn(), -&gt; Text("Hello 1"), // OK.<br/>TableNextColumn(), -&gt; Text("Hello 0") -&gt; TableNextColumn(), -&gt; Text("Hello 1"), // OK: TableNextColumn() automatically gets to next row!<br/>TableNextRow(), -&gt; Text("Hello 0"), // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!<br/>--------------------------------------------------------------------------------------------------------.<br/>- 5. Call EndTable().<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L767"/></summary>
        // DEBUG: bool          BeginTable(const char* str_id, int column, ImGuiTableFlags flags = 0, const ImVec2& outer_size = ImVec2(0.0f, 0.0f), float inner_width = 0.0f)
        public static bool BeginTable(string str_id, int column, ImGuiTableFlags flags = (ImGuiTableFlags)(0))
        {
            return BeginTable(str_id, column, flags, new Vector2(0.0F, 0.0F), 0.0F);
        }

        /// <summary>Create a Tab. Returns true if the Tab is selected.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L817"/></summary>
        // DEBUG: bool          BeginTabItem(const char* label, bool* p_open = NULL, ImGuiTabItemFlags flags = 0)
        public static bool BeginTabItem(string label)
        {
            bool param0 = false;
            return BeginTabItem(label, ref param0, 0);
        }

        /// <summary>Docking.<br/>[BETA API] Enable with io.ConfigFlags |= ImGuiConfigFlags_DockingEnable.<br/>Note: You can use most Docking facilities without calling any API. You DO NOT need to call DockSpace() to use Docking!<br/>- Drag from window title bar or their tab to dock/undock. Hold SHIFT to disable docking.<br/>- Drag from window menu button (upper-left button) to undock an entire node (all windows).<br/>- When io.ConfigDockingWithShift == true, you instead need to hold SHIFT to enable docking.<br/>About dockspaces:.<br/>- Use DockSpaceOverViewport() to create an explicit dock node covering the screen or a specific viewport.<br/>This is often used with ImGuiDockNodeFlags_PassthruCentralNode to make it transparent.<br/>- Use DockSpace() to create an explicit dock node _within_ an existing window. See Docking demo for details.<br/>- Important: Dockspaces need to be submitted _before_ any window they can host. Submit it early in your frame!<br/>- Important: Dockspaces need to be kept alive if hidden, otherwise windows docked into it will be undocked.<br/>E.g. if you have multiple tabs with a dockspace inside each tab: submit the non-visible dockspaces with ImGuiDockNodeFlags_KeepAliveOnly.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L835"/></summary>
        // DEBUG: ImGuiID       DockSpace(ImGuiID id, const ImVec2& size = ImVec2(0, 0), ImGuiDockNodeFlags flags = 0, const ImGuiWindowClass* window_class = NULL)
        public static uint DockSpace(uint id)
        {
            return DockSpace(id, new Vector2(0, 0), 0, default);
        }

        /// <summary>Return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.<br/><see href="https://github.com/ocornut/imgui/blob/83c433682883aaa6f9583a4a84d1ae4bd8d1e977/imgui.h#L984"/></summary>
        // DEBUG: const char*   SaveIniSettingsToMemory(size_t* out_ini_size = NULL)
        public static string SaveIniSettingsToMemory()
        {
            UIntPtr param0 = (UIntPtr)0;
            return SaveIniSettingsToMemory(ref param0);
        }

        internal static IntPtr _EmptyString_ImGuiTextBuffer__2PADA { get; }

        static ImGui()
        {
            var path = "imgui";
            var image = DearImGui.SymbolResolver.LoadImage(ref path);
            if (image == IntPtr.Zero)
                throw new DllNotFoundException(path);
            _EmptyString_ImGuiTextBuffer__2PADA = DearImGui.SymbolResolver.ResolveSymbol(image, "?EmptyString@ImGuiTextBuffer@@2PADA");
        }
    }
}